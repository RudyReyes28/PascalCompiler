
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.rudyreyes.pascalcompiler.controlador.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.rudyreyes.pascalcompiler.modelo.abstracto.Instruccion;
import com.rudyreyes.pascalcompiler.modelo.simbolo.*;
import java.util.HashMap;
import java.util.Collections;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.writeln.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.variables.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.arrays.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.sentenciasControl.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.tipos.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.ciclos.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.sentenciaTransferencia.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.funciones.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.nativo.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.aritmeticas.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.relacionales.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.logicas.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.variables.*;
import com.rudyreyes.pascalcompiler.modelo.errores.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\210\000\002\002\004\000\002\004\004\000\002\004" +
    "\003\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\002\003\000\002\002\006\000" +
    "\002\003\004\000\002\003\003\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\040\016\000\002\040" +
    "\014\000\002\040\015\000\002\040\013\000\002\037\020" +
    "\000\002\037\016\000\002\037\017\000\002\037\015\000" +
    "\002\041\007\000\002\041\005\000\002\042\005\000\002" +
    "\042\003\000\002\043\004\000\002\043\003\000\002\046" +
    "\006\000\002\046\005\000\002\045\006\000\002\045\005" +
    "\000\002\044\005\000\002\044\003\000\002\007\004\000" +
    "\002\007\003\000\002\011\006\000\002\011\012\000\002" +
    "\011\016\000\002\011\004\000\002\011\003\000\002\005" +
    "\007\000\002\005\006\000\002\005\004\000\002\005\003" +
    "\000\002\010\004\000\002\010\003\000\002\012\006\000" +
    "\002\012\012\000\002\012\016\000\002\012\004\000\002" +
    "\012\003\000\002\024\005\000\002\024\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\025" +
    "\006\000\002\023\005\000\002\023\003\000\002\026\006" +
    "\000\002\030\011\000\002\027\006\000\002\027\011\000" +
    "\002\027\012\000\002\027\010\000\002\027\013\000\002" +
    "\027\015\000\002\031\013\000\002\031\012\000\002\050" +
    "\004\000\002\050\003\000\002\047\010\000\002\047\005" +
    "\000\002\051\005\000\002\051\003\000\002\032\011\000" +
    "\002\032\006\000\002\033\013\000\002\033\016\000\002" +
    "\034\007\000\002\035\003\000\002\036\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\006\000\002\020\004\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\022\004\000\002\022" +
    "\005\000\002\022\005\000\002\022\006\000\002\022\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0156\000\016\012\013\015\006\016\015\021\007\076" +
    "\011\077\004\001\002\000\004\007\u013e\001\002\000\020" +
    "\002\ufffb\012\ufffb\015\ufffb\016\ufffb\021\ufffb\076\ufffb\077" +
    "\ufffb\001\002\000\006\003\350\007\346\001\002\000\006" +
    "\003\u011e\007\346\001\002\000\020\002\uffff\012\uffff\015" +
    "\uffff\016\uffff\021\uffff\076\uffff\077\uffff\001\002\000\004" +
    "\007\317\001\002\000\020\002\315\012\013\015\006\016" +
    "\015\021\007\076\011\077\004\001\002\000\026\003\147" +
    "\007\136\011\134\060\135\061\146\063\131\065\151\067" +
    "\152\071\143\072\125\001\002\000\020\002\ufffa\012\ufffa" +
    "\015\ufffa\016\ufffa\021\ufffa\076\ufffa\077\ufffa\001\002\000" +
    "\006\003\017\007\016\001\002\000\004\046\121\001\002" +
    "\000\024\002\uffc8\007\uffc8\010\120\012\uffc8\015\uffc8\016" +
    "\uffc8\021\uffc8\076\uffc8\077\uffc8\001\002\000\022\002\ufffd" +
    "\007\021\012\ufffd\015\ufffd\016\ufffd\021\ufffd\076\ufffd\077" +
    "\ufffd\001\002\000\004\046\022\001\002\000\024\004\025" +
    "\005\030\006\026\007\034\030\033\033\027\047\037\056" +
    "\031\057\040\001\002\000\064\010\uff97\014\uff97\017\uff97" +
    "\020\uff97\031\uff97\032\uff97\033\uff97\035\uff97\036\uff97\037" +
    "\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97" +
    "\046\uff97\050\uff97\051\uff97\052\uff97\053\uff97\062\uff97\064" +
    "\uff97\066\uff97\075\uff97\001\002\000\064\010\uff95\014\uff95" +
    "\017\uff95\020\uff95\031\uff95\032\uff95\033\uff95\035\uff95\036" +
    "\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95" +
    "\045\uff95\046\uff95\050\uff95\051\uff95\052\uff95\053\uff95\062" +
    "\uff95\064\uff95\066\uff95\075\uff95\001\002\000\064\010\uff91" +
    "\014\uff91\017\uff91\020\uff91\031\uff91\032\uff91\033\uff91\035" +
    "\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91" +
    "\044\uff91\045\uff91\046\uff91\050\uff91\051\uff91\052\uff91\053" +
    "\uff91\062\uff91\064\uff91\066\uff91\075\uff91\001\002\000\064" +
    "\010\uff92\014\uff92\017\uff92\020\uff92\031\uff92\032\uff92\033" +
    "\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\050\uff92\051\uff92\052" +
    "\uff92\053\uff92\062\uff92\064\uff92\066\uff92\075\uff92\001\002" +
    "\000\024\004\025\005\030\006\026\007\034\030\033\033" +
    "\027\047\037\056\031\057\040\001\002\000\064\010\uff93" +
    "\014\uff93\017\uff93\020\uff93\031\uff93\032\uff93\033\uff93\035" +
    "\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93" +
    "\044\uff93\045\uff93\046\uff93\050\uff93\051\uff93\052\uff93\053" +
    "\uff93\062\uff93\064\uff93\066\uff93\075\uff93\001\002\000\064" +
    "\010\uff8f\014\uff8f\017\uff8f\020\uff8f\031\uff8f\032\uff8f\033" +
    "\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f" +
    "\043\uff8f\044\uff8f\045\uff8f\046\uff8f\050\uff8f\051\uff8f\052" +
    "\uff8f\053\uff8f\062\uff8f\064\uff8f\066\uff8f\075\uff8f\001\002" +
    "\000\040\010\116\032\051\033\044\035\047\036\053\037" +
    "\046\040\050\041\056\042\045\043\043\044\054\045\052" +
    "\046\055\050\042\053\057\001\002\000\024\004\025\005" +
    "\030\006\026\007\034\030\033\033\027\047\037\056\031" +
    "\057\040\001\002\000\070\010\uff8e\014\uff8e\017\uff8e\020" +
    "\uff8e\030\103\031\uff8e\032\uff8e\033\uff8e\035\uff8e\036\uff8e" +
    "\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045" +
    "\uff8e\046\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\062\uff8e" +
    "\064\uff8e\066\uff8e\074\102\075\uff8e\001\002\000\064\010" +
    "\uff94\014\uff94\017\uff94\020\uff94\031\uff94\032\uff94\033\uff94" +
    "\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043" +
    "\uff94\044\uff94\045\uff94\046\uff94\050\uff94\051\uff94\052\uff94" +
    "\053\uff94\062\uff94\064\uff94\066\uff94\075\uff94\001\002\000" +
    "\064\010\uff96\014\uff96\017\uff96\020\uff96\031\uff96\032\uff96" +
    "\033\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\050\uff96\051\uff96" +
    "\052\uff96\053\uff96\062\uff96\064\uff96\066\uff96\075\uff96\001" +
    "\002\000\024\004\025\005\030\006\026\007\034\030\033" +
    "\033\027\047\037\056\031\057\040\001\002\000\064\010" +
    "\uff90\014\uff90\017\uff90\020\uff90\031\uff90\032\uff90\033\uff90" +
    "\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043" +
    "\uff90\044\uff90\045\uff90\046\uff90\050\uff90\051\uff90\052\uff90" +
    "\053\uff90\062\uff90\064\uff90\066\uff90\075\uff90\001\002\000" +
    "\064\010\uff7e\014\uff7e\017\uff7e\020\uff7e\031\uff7e\032\051" +
    "\033\044\035\047\036\053\037\046\040\050\041\056\042" +
    "\045\043\043\044\054\045\052\046\055\050\uff7e\051\uff7e" +
    "\052\uff7e\053\uff7e\062\uff7e\064\uff7e\066\uff7e\075\uff7e\001" +
    "\002\000\026\004\025\005\030\006\026\007\034\030\033" +
    "\033\027\047\037\051\077\056\031\057\040\001\002\000" +
    "\024\004\025\005\030\006\026\007\034\030\033\033\027" +
    "\047\037\056\031\057\040\001\002\000\024\004\025\005" +
    "\030\006\026\007\034\030\033\033\027\047\037\056\031" +
    "\057\040\001\002\000\024\004\025\005\030\006\026\007" +
    "\034\030\033\033\027\047\037\056\031\057\040\001\002" +
    "\000\024\004\025\005\030\006\026\007\034\030\033\033" +
    "\027\047\037\056\031\057\040\001\002\000\024\004\025" +
    "\005\030\006\026\007\034\030\033\033\027\047\037\056" +
    "\031\057\040\001\002\000\024\004\025\005\030\006\026" +
    "\007\034\030\033\033\027\047\037\056\031\057\040\001" +
    "\002\000\024\004\025\005\030\006\026\007\034\030\033" +
    "\033\027\047\037\056\031\057\040\001\002\000\024\004" +
    "\025\005\030\006\026\007\034\030\033\033\027\047\037" +
    "\056\031\057\040\001\002\000\024\004\025\005\030\006" +
    "\026\007\034\030\033\033\027\047\037\056\031\057\040" +
    "\001\002\000\024\004\025\005\030\006\026\007\034\030" +
    "\033\033\027\047\037\056\031\057\040\001\002\000\024" +
    "\004\025\005\030\006\026\007\034\030\033\033\027\047" +
    "\037\056\031\057\040\001\002\000\024\004\025\005\030" +
    "\006\026\007\034\030\033\033\027\047\037\056\031\057" +
    "\040\001\002\000\026\004\025\005\030\006\026\007\034" +
    "\030\033\033\027\047\037\052\061\056\031\057\040\001" +
    "\002\000\064\010\uff7c\014\uff7c\017\uff7c\020\uff7c\031\uff7c" +
    "\032\051\033\044\035\047\036\053\037\046\040\050\041" +
    "\056\042\045\043\043\044\054\045\052\046\055\050\042" +
    "\051\uff7c\052\uff7c\053\uff7c\062\uff7c\064\uff7c\066\uff7c\075" +
    "\uff7c\001\002\000\024\004\025\005\030\006\026\007\034" +
    "\030\033\033\027\047\037\056\031\057\040\001\002\000" +
    "\064\010\uff7a\014\uff7a\017\uff7a\020\uff7a\031\uff7a\032\051" +
    "\033\044\035\047\036\053\037\046\040\050\041\056\042" +
    "\045\043\043\044\054\045\052\046\055\050\042\051\uff7a" +
    "\052\uff7a\053\057\062\uff7a\064\uff7a\066\uff7a\075\uff7a\001" +
    "\002\000\064\010\uff83\014\uff83\017\uff83\020\uff83\031\uff83" +
    "\032\051\033\044\035\047\036\053\037\046\040\050\041" +
    "\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83\050\uff83" +
    "\051\uff83\052\uff83\053\uff83\062\uff83\064\uff83\066\uff83\075" +
    "\uff83\001\002\000\064\010\uff84\014\uff84\017\uff84\020\uff84" +
    "\031\uff84\032\051\033\044\035\047\036\053\037\046\040" +
    "\050\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84" +
    "\050\uff84\051\uff84\052\uff84\053\uff84\062\uff84\064\uff84\066" +
    "\uff84\075\uff84\001\002\000\064\010\uff80\014\uff80\017\uff80" +
    "\020\uff80\031\uff80\032\051\033\044\035\047\036\053\037" +
    "\046\040\050\041\uff80\042\uff80\043\uff80\044\uff80\045\uff80" +
    "\046\uff80\050\uff80\051\uff80\052\uff80\053\uff80\062\uff80\064" +
    "\uff80\066\uff80\075\uff80\001\002\000\064\010\uff88\014\uff88" +
    "\017\uff88\020\uff88\031\uff88\032\uff88\033\uff88\035\uff88\036" +
    "\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88" +
    "\045\uff88\046\uff88\050\uff88\051\uff88\052\uff88\053\uff88\062" +
    "\uff88\064\uff88\066\uff88\075\uff88\001\002\000\064\010\uff7f" +
    "\014\uff7f\017\uff7f\020\uff7f\031\uff7f\032\051\033\044\035" +
    "\047\036\053\037\046\040\050\041\uff7f\042\uff7f\043\uff7f" +
    "\044\uff7f\045\uff7f\046\uff7f\050\uff7f\051\uff7f\052\uff7f\053" +
    "\uff7f\062\uff7f\064\uff7f\066\uff7f\075\uff7f\001\002\000\064" +
    "\010\uff8b\014\uff8b\017\uff8b\020\uff8b\031\uff8b\032\uff8b\033" +
    "\uff8b\035\047\036\053\037\046\040\050\041\uff8b\042\uff8b" +
    "\043\uff8b\044\uff8b\045\uff8b\046\uff8b\050\uff8b\051\uff8b\052" +
    "\uff8b\053\uff8b\062\uff8b\064\uff8b\066\uff8b\075\uff8b\001\002" +
    "\000\064\010\uff86\014\uff86\017\uff86\020\uff86\031\uff86\032" +
    "\uff86\033\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86" +
    "\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\050\uff86\051" +
    "\uff86\052\uff86\053\uff86\062\uff86\064\uff86\066\uff86\075\uff86" +
    "\001\002\000\064\010\uff89\014\uff89\017\uff89\020\uff89\031" +
    "\uff89\032\uff89\033\uff89\035\uff89\036\uff89\037\uff89\040\uff89" +
    "\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\046\uff89\050" +
    "\uff89\051\uff89\052\uff89\053\uff89\062\uff89\064\uff89\066\uff89" +
    "\075\uff89\001\002\000\064\010\uff87\014\uff87\017\uff87\020" +
    "\uff87\031\uff87\032\uff87\033\uff87\035\uff87\036\uff87\037\uff87" +
    "\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046" +
    "\uff87\050\uff87\051\uff87\052\uff87\053\uff87\062\uff87\064\uff87" +
    "\066\uff87\075\uff87\001\002\000\064\010\uff82\014\uff82\017" +
    "\uff82\020\uff82\031\uff82\032\051\033\044\035\047\036\053" +
    "\037\046\040\050\041\uff82\042\uff82\043\uff82\044\uff82\045" +
    "\uff82\046\uff82\050\uff82\051\uff82\052\uff82\053\uff82\062\uff82" +
    "\064\uff82\066\uff82\075\uff82\001\002\000\064\010\uff8a\014" +
    "\uff8a\017\uff8a\020\uff8a\031\uff8a\032\uff8a\033\uff8a\035\047" +
    "\036\053\037\046\040\050\041\uff8a\042\uff8a\043\uff8a\044" +
    "\uff8a\045\uff8a\046\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a" +
    "\062\uff8a\064\uff8a\066\uff8a\075\uff8a\001\002\000\064\010" +
    "\uff81\014\uff81\017\uff81\020\uff81\031\uff81\032\051\033\044" +
    "\035\047\036\053\037\046\040\050\041\uff81\042\uff81\043" +
    "\uff81\044\uff81\045\uff81\046\uff81\050\uff81\051\uff81\052\uff81" +
    "\053\uff81\062\uff81\064\uff81\066\uff81\075\uff81\001\002\000" +
    "\024\004\025\005\030\006\026\007\034\030\033\033\027" +
    "\047\037\056\031\057\040\001\002\000\064\010\uff7d\014" +
    "\uff7d\017\uff7d\020\uff7d\031\uff7d\032\051\033\044\035\047" +
    "\036\053\037\046\040\050\041\056\042\045\043\043\044" +
    "\054\045\052\046\055\050\uff7d\051\uff7d\052\uff7d\053\uff7d" +
    "\062\uff7d\064\uff7d\066\uff7d\075\uff7d\001\002\000\064\010" +
    "\uff7b\014\uff7b\017\uff7b\020\uff7b\031\uff7b\032\051\033\044" +
    "\035\047\036\053\037\046\040\050\041\056\042\045\043" +
    "\043\044\054\045\052\046\055\050\042\051\uff7b\052\uff7b" +
    "\053\057\062\uff7b\064\uff7b\066\uff7b\075\uff7b\001\002\000" +
    "\024\004\025\005\030\006\026\007\034\030\033\033\027" +
    "\047\037\056\031\057\040\001\002\000\026\004\025\005" +
    "\030\006\026\007\034\030\033\031\105\033\027\047\037" +
    "\056\031\057\040\001\002\000\006\020\107\031\110\001" +
    "\002\000\064\010\uffd5\014\uffd5\017\uffd5\020\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\062\uffd5\064\uffd5\066\uffd5\075" +
    "\uffd5\001\002\000\042\020\uffd3\031\uffd3\032\051\033\044" +
    "\035\047\036\053\037\046\040\050\041\056\042\045\043" +
    "\043\044\054\045\052\046\055\050\042\053\057\001\002" +
    "\000\024\004\025\005\030\006\026\007\034\030\033\033" +
    "\027\047\037\056\031\057\040\001\002\000\064\010\uffd6" +
    "\014\uffd6\017\uffd6\020\uffd6\031\uffd6\032\uffd6\033\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\045\uffd6\046\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\062\uffd6\064\uffd6\066\uffd6\075\uffd6\001\002\000\042" +
    "\020\uffd4\031\uffd4\032\051\033\044\035\047\036\053\037" +
    "\046\040\050\041\056\042\045\043\043\044\054\045\052" +
    "\046\055\050\042\053\057\001\002\000\040\032\051\033" +
    "\044\035\047\036\053\037\046\040\050\041\056\042\045" +
    "\043\043\044\054\045\052\046\055\050\042\053\057\075" +
    "\113\001\002\000\064\010\uff8d\014\uff8d\017\uff8d\020\uff8d" +
    "\031\uff8d\032\uff8d\033\uff8d\035\uff8d\036\uff8d\037\uff8d\040" +
    "\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d" +
    "\050\uff8d\051\uff8d\052\uff8d\053\uff8d\062\uff8d\064\uff8d\066" +
    "\uff8d\075\uff8d\001\002\000\040\031\115\032\051\033\044" +
    "\035\047\036\053\037\046\040\050\041\056\042\045\043" +
    "\043\044\054\045\052\046\055\050\042\053\057\001\002" +
    "\000\064\010\uff85\014\uff85\017\uff85\020\uff85\031\uff85\032" +
    "\uff85\033\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85" +
    "\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\050\uff85\051" +
    "\uff85\052\uff85\053\uff85\062\uff85\064\uff85\066\uff85\075\uff85" +
    "\001\002\000\022\002\uffcb\007\uffcb\012\uffcb\015\uffcb\016" +
    "\uffcb\021\uffcb\076\uffcb\077\uffcb\001\002\000\064\010\uff8c" +
    "\014\uff8c\017\uff8c\020\uff8c\031\uff8c\032\uff8c\033\uff8c\035" +
    "\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c" +
    "\044\uff8c\045\uff8c\046\uff8c\050\uff8c\051\uff8c\052\uff8c\053" +
    "\uff8c\062\uff8c\064\uff8c\066\uff8c\075\uff8c\001\002\000\022" +
    "\002\uffc9\007\uffc9\012\uffc9\015\uffc9\016\uffc9\021\uffc9\076" +
    "\uffc9\077\uffc9\001\002\000\024\004\025\005\030\006\026" +
    "\007\034\030\033\033\027\047\037\056\031\057\040\001" +
    "\002\000\040\010\123\032\051\033\044\035\047\036\053" +
    "\037\046\040\050\041\056\042\045\043\043\044\054\045" +
    "\052\046\055\050\042\053\057\001\002\000\022\002\uffca" +
    "\007\uffca\012\uffca\015\uffca\016\uffca\021\uffca\076\uffca\077" +
    "\uffca\001\002\000\030\003\147\007\136\011\134\013\313" +
    "\060\135\061\146\063\131\065\151\067\152\071\143\072" +
    "\125\001\002\000\004\010\uff98\001\002\000\004\010\312" +
    "\001\002\000\004\010\274\001\002\000\004\010\273\001" +
    "\002\000\024\004\025\005\030\006\026\007\034\030\033" +
    "\033\027\047\037\056\031\057\040\001\002\000\054\003" +
    "\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\013\ufff2" +
    "\030\ufff2\033\ufff2\047\ufff2\052\ufff2\056\ufff2\057\ufff2\060" +
    "\ufff2\061\ufff2\063\ufff2\065\ufff2\067\ufff2\070\ufff2\071\ufff2" +
    "\072\ufff2\001\002\000\032\003\ufff7\007\ufff7\011\ufff7\013" +
    "\ufff7\060\ufff7\061\ufff7\063\ufff7\065\ufff7\067\ufff7\070\ufff7" +
    "\071\ufff7\072\ufff7\001\002\000\004\030\275\001\002\000" +
    "\024\004\025\005\030\006\026\007\034\030\033\033\027" +
    "\047\037\056\031\057\040\001\002\000\010\017\230\030" +
    "\231\074\227\001\002\000\004\010\226\001\002\000\004" +
    "\010\225\001\002\000\054\003\ufff1\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\011\ufff1\013\ufff1\030\ufff1\033\ufff1\047\ufff1" +
    "\052\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\063\ufff1\065" +
    "\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\001\002\000\054" +
    "\003\uffef\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef\013" +
    "\uffef\030\uffef\033\uffef\047\uffef\052\uffef\056\uffef\057\uffef" +
    "\060\uffef\061\uffef\063\uffef\065\uffef\067\uffef\070\uffef\071" +
    "\uffef\072\uffef\001\002\000\004\010\uff99\001\002\000\054" +
    "\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\011\uffee\013" +
    "\uffee\030\uffee\033\uffee\047\uffee\052\uffee\056\uffee\057\uffee" +
    "\060\uffee\061\uffee\063\uffee\065\uffee\067\uffee\070\uffee\071" +
    "\uffee\072\uffee\001\002\000\004\010\224\001\002\000\024" +
    "\004\025\005\030\006\026\007\034\030\033\033\027\047" +
    "\037\056\031\057\040\001\002\000\056\003\uffea\004\uffea" +
    "\005\uffea\006\uffea\007\uffea\010\174\011\uffea\013\uffea\030" +
    "\uffea\033\uffea\047\uffea\052\uffea\056\uffea\057\uffea\060\uffea" +
    "\061\uffea\063\uffea\065\uffea\067\uffea\070\uffea\071\uffea\072" +
    "\uffea\001\002\000\054\003\ufff0\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\011\ufff0\013\ufff0\030\ufff0\033\ufff0\047\ufff0\052" +
    "\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\063\ufff0\065\ufff0" +
    "\067\ufff0\070\ufff0\071\ufff0\072\ufff0\001\002\000\004\007" +
    "\160\001\002\000\026\003\147\007\136\011\134\060\135" +
    "\061\146\063\131\065\151\067\152\071\143\072\125\001" +
    "\002\000\030\003\147\007\136\011\134\060\135\061\146" +
    "\063\131\065\151\067\152\070\155\071\143\072\125\001" +
    "\002\000\032\003\ufff8\007\ufff8\011\ufff8\013\ufff8\060\ufff8" +
    "\061\ufff8\063\ufff8\065\ufff8\067\ufff8\070\ufff8\071\ufff8\072" +
    "\ufff8\001\002\000\024\004\025\005\030\006\026\007\034" +
    "\030\033\033\027\047\037\056\031\057\040\001\002\000" +
    "\040\010\157\032\051\033\044\035\047\036\053\037\046" +
    "\040\050\041\056\042\045\043\043\044\054\045\052\046" +
    "\055\050\042\053\057\001\002\000\054\003\uff9a\004\uff9a" +
    "\005\uff9a\006\uff9a\007\uff9a\011\uff9a\013\uff9a\030\uff9a\033" +
    "\uff9a\047\uff9a\052\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a" +
    "\063\uff9a\065\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\001" +
    "\002\000\004\017\161\001\002\000\004\046\162\001\002" +
    "\000\024\004\025\005\030\006\026\007\034\030\033\033" +
    "\027\047\037\056\031\057\040\001\002\000\040\032\051" +
    "\033\044\035\047\036\053\037\046\040\050\041\056\042" +
    "\045\043\043\044\054\045\052\046\055\050\042\053\057" +
    "\066\164\001\002\000\024\004\025\005\030\006\026\007" +
    "\034\030\033\033\027\047\037\056\031\057\040\001\002" +
    "\000\040\032\051\033\044\035\047\036\053\037\046\040" +
    "\050\041\056\042\045\043\043\044\054\045\052\046\055" +
    "\050\042\053\057\064\166\001\002\000\030\003\147\007" +
    "\136\011\134\012\170\060\135\061\146\063\131\065\151" +
    "\067\152\071\143\072\125\001\002\000\054\003\uff9c\004" +
    "\uff9c\005\uff9c\006\uff9c\007\uff9c\011\uff9c\013\uff9c\030\uff9c" +
    "\033\uff9c\047\uff9c\052\uff9c\056\uff9c\057\uff9c\060\uff9c\061" +
    "\uff9c\063\uff9c\065\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c" +
    "\001\002\000\026\003\147\007\136\011\134\060\135\061" +
    "\146\063\131\065\151\067\152\071\143\072\125\001\002" +
    "\000\030\003\147\007\136\011\134\013\172\060\135\061" +
    "\146\063\131\065\151\067\152\071\143\072\125\001\002" +
    "\000\004\010\173\001\002\000\054\003\uff9b\004\uff9b\005" +
    "\uff9b\006\uff9b\007\uff9b\011\uff9b\013\uff9b\030\uff9b\033\uff9b" +
    "\047\uff9b\052\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\063" +
    "\uff9b\065\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\001\002" +
    "\000\054\003\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\011" +
    "\uffeb\013\uffeb\030\uffeb\033\uffeb\047\uffeb\052\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\063\uffeb\065\uffeb\067\uffeb\070" +
    "\uffeb\071\uffeb\072\uffeb\001\002\000\040\032\051\033\044" +
    "\035\047\036\053\037\046\040\050\041\056\042\045\043" +
    "\043\044\054\045\052\046\055\050\042\053\057\062\176" +
    "\001\002\000\024\004\025\005\030\006\026\007\034\030" +
    "\033\033\027\047\037\056\031\057\040\001\002\000\026" +
    "\004\025\005\030\006\026\007\034\030\033\033\027\047" +
    "\037\052\214\056\031\057\040\001\002\000\006\017\204" +
    "\020\203\001\002\000\026\004\uffa3\005\uffa3\006\uffa3\007" +
    "\uffa3\030\uffa3\033\uffa3\047\uffa3\052\uffa3\056\uffa3\057\uffa3" +
    "\001\002\000\042\017\uff9f\020\uff9f\032\051\033\044\035" +
    "\047\036\053\037\046\040\050\041\056\042\045\043\043" +
    "\044\054\045\052\046\055\050\042\053\057\001\002\000" +
    "\024\004\025\005\030\006\026\007\034\030\033\033\027" +
    "\047\037\056\031\057\040\001\002\000\030\003\147\007" +
    "\136\011\134\012\206\060\135\061\146\063\131\065\151" +
    "\067\152\071\143\072\125\001\002\000\026\004\uffa1\005" +
    "\uffa1\006\uffa1\007\uffa1\030\uffa1\033\uffa1\047\uffa1\052\uffa1" +
    "\056\uffa1\057\uffa1\001\002\000\026\003\147\007\136\011" +
    "\134\060\135\061\146\063\131\065\151\067\152\071\143" +
    "\072\125\001\002\000\030\003\147\007\136\011\134\013" +
    "\210\060\135\061\146\063\131\065\151\067\152\071\143" +
    "\072\125\001\002\000\004\010\211\001\002\000\026\004" +
    "\uffa2\005\uffa2\006\uffa2\007\uffa2\030\uffa2\033\uffa2\047\uffa2" +
    "\052\uffa2\056\uffa2\057\uffa2\001\002\000\042\017\uffa0\020" +
    "\uffa0\032\051\033\044\035\047\036\053\037\046\040\050" +
    "\041\056\042\045\043\043\044\054\045\052\046\055\050" +
    "\042\053\057\001\002\000\026\004\uffa4\005\uffa4\006\uffa4" +
    "\007\uffa4\030\uffa4\033\uffa4\047\uffa4\052\uffa4\056\uffa4\057" +
    "\uffa4\001\002\000\030\003\147\007\136\011\134\012\216" +
    "\060\135\061\146\063\131\065\151\067\152\071\143\072" +
    "\125\001\002\000\004\013\222\001\002\000\026\003\147" +
    "\007\136\011\134\060\135\061\146\063\131\065\151\067" +
    "\152\071\143\072\125\001\002\000\030\003\147\007\136" +
    "\011\134\013\220\060\135\061\146\063\131\065\151\067" +
    "\152\071\143\072\125\001\002\000\004\010\221\001\002" +
    "\000\054\003\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\011" +
    "\uffa6\013\uffa6\030\uffa6\033\uffa6\047\uffa6\052\uffa6\056\uffa6" +
    "\057\uffa6\060\uffa6\061\uffa6\063\uffa6\065\uffa6\067\uffa6\070" +
    "\uffa6\071\uffa6\072\uffa6\001\002\000\004\010\223\001\002" +
    "\000\054\003\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\011" +
    "\uffa5\013\uffa5\030\uffa5\033\uffa5\047\uffa5\052\uffa5\056\uffa5" +
    "\057\uffa5\060\uffa5\061\uffa5\063\uffa5\065\uffa5\067\uffa5\070" +
    "\uffa5\071\uffa5\072\uffa5\001\002\000\054\003\uffed\004\uffed" +
    "\005\uffed\006\uffed\007\uffed\011\uffed\013\uffed\030\uffed\033" +
    "\uffed\047\uffed\052\uffed\056\uffed\057\uffed\060\uffed\061\uffed" +
    "\063\uffed\065\uffed\067\uffed\070\uffed\071\uffed\072\uffed\001" +
    "\002\000\054\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\011\uffec\013\uffec\030\uffec\033\uffec\047\uffec\052\uffec\056" +
    "\uffec\057\uffec\060\uffec\061\uffec\063\uffec\065\uffec\067\uffec" +
    "\070\uffec\071\uffec\072\uffec\001\002\000\054\003\ufff5\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\011\ufff5\013\ufff5\030\ufff5" +
    "\033\ufff5\047\ufff5\052\ufff5\056\ufff5\057\ufff5\060\ufff5\061" +
    "\ufff5\063\ufff5\065\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5" +
    "\001\002\000\024\004\025\005\030\006\026\007\034\030" +
    "\033\033\027\047\037\056\031\057\040\001\002\000\004" +
    "\046\235\001\002\000\026\004\025\005\030\006\026\007" +
    "\034\030\033\031\233\033\027\047\037\056\031\057\040" +
    "\001\002\000\006\020\107\031\234\001\002\000\004\010" +
    "\uffd7\001\002\000\004\010\uffd8\001\002\000\024\004\025" +
    "\005\030\006\026\007\034\030\033\033\027\047\037\056" +
    "\031\057\040\001\002\000\042\010\uffae\032\051\033\044" +
    "\035\047\036\053\037\046\040\050\041\056\042\045\043" +
    "\043\044\054\045\052\046\055\050\042\052\uffae\053\057" +
    "\001\002\000\040\032\051\033\044\035\047\036\053\037" +
    "\046\040\050\041\056\042\045\043\043\044\054\045\052" +
    "\046\055\050\042\053\057\075\240\001\002\000\004\017" +
    "\241\001\002\000\004\046\242\001\002\000\024\004\025" +
    "\005\030\006\026\007\034\030\033\033\027\047\037\056" +
    "\031\057\040\001\002\000\042\010\uffad\032\051\033\044" +
    "\035\047\036\053\037\046\040\050\041\056\042\045\043" +
    "\043\044\054\045\052\046\055\050\042\052\uffad\053\057" +
    "\001\002\000\040\032\051\033\044\035\047\036\053\037" +
    "\046\040\050\041\056\042\045\043\043\044\054\045\052" +
    "\046\055\050\042\051\245\053\057\001\002\000\030\003" +
    "\147\007\136\011\134\012\252\060\135\061\146\063\131" +
    "\065\151\067\152\071\143\072\125\001\002\000\006\010" +
    "\274\052\uffe7\001\002\000\006\010\273\052\uffe9\001\002" +
    "\000\054\003\uffac\004\uffac\005\uffac\006\uffac\007\uffac\011" +
    "\uffac\013\uffac\030\uffac\033\uffac\047\uffac\052\uffac\056\uffac" +
    "\057\uffac\060\uffac\061\uffac\063\uffac\065\uffac\067\uffac\070" +
    "\uffac\071\uffac\072\uffac\001\002\000\006\010\226\052\uffe8" +
    "\001\002\000\026\003\147\007\136\011\134\060\135\061" +
    "\146\063\131\065\151\067\152\071\143\072\125\001\002" +
    "\000\004\052\254\001\002\000\030\003\147\007\136\011" +
    "\134\012\256\060\135\061\146\063\131\065\151\067\152" +
    "\071\143\072\125\001\002\000\054\003\uffa9\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\011\uffa9\013\uffa9\030\uffa9\033\uffa9" +
    "\047\uffa9\052\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\063" +
    "\uffa9\065\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\001\002" +
    "\000\026\003\147\007\136\011\134\060\135\061\146\063" +
    "\131\065\151\067\152\071\143\072\125\001\002\000\030" +
    "\003\147\007\136\011\134\013\260\060\135\061\146\063" +
    "\131\065\151\067\152\071\143\072\125\001\002\000\004" +
    "\010\261\001\002\000\054\003\uffa8\004\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\011\uffa8\013\uffa8\030\uffa8\033\uffa8\047\uffa8" +
    "\052\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\063\uffa8\065" +
    "\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\001\002\000\030" +
    "\003\147\007\136\011\134\013\263\060\135\061\146\063" +
    "\131\065\151\067\152\071\143\072\125\001\002\000\006" +
    "\010\264\052\265\001\002\000\054\003\uffab\004\uffab\005" +
    "\uffab\006\uffab\007\uffab\011\uffab\013\uffab\030\uffab\033\uffab" +
    "\047\uffab\052\uffab\056\uffab\057\uffab\060\uffab\061\uffab\063" +
    "\uffab\065\uffab\067\uffab\070\uffab\071\uffab\072\uffab\001\002" +
    "\000\030\003\147\007\136\011\134\012\267\060\135\061" +
    "\146\063\131\065\151\067\152\071\143\072\125\001\002" +
    "\000\054\003\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\011" +
    "\uffaa\013\uffaa\030\uffaa\033\uffaa\047\uffaa\052\uffaa\056\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\063\uffaa\065\uffaa\067\uffaa\070" +
    "\uffaa\071\uffaa\072\uffaa\001\002\000\026\003\147\007\136" +
    "\011\134\060\135\061\146\063\131\065\151\067\152\071" +
    "\143\072\125\001\002\000\030\003\147\007\136\011\134" +
    "\013\271\060\135\061\146\063\131\065\151\067\152\071" +
    "\143\072\125\001\002\000\004\010\272\001\002\000\054" +
    "\003\uffa7\004\uffa7\005\uffa7\006\uffa7\007\uffa7\011\uffa7\013" +
    "\uffa7\030\uffa7\033\uffa7\047\uffa7\052\uffa7\056\uffa7\057\uffa7" +
    "\060\uffa7\061\uffa7\063\uffa7\065\uffa7\067\uffa7\070\uffa7\071" +
    "\uffa7\072\uffa7\001\002\000\054\003\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\011\ufff6\013\ufff6\030\ufff6\033\ufff6\047" +
    "\ufff6\052\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\063\ufff6" +
    "\065\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\001\002\000" +
    "\054\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4" +
    "\013\ufff4\030\ufff4\033\ufff4\047\ufff4\052\ufff4\056\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\063\ufff4\065\ufff4\067\ufff4\070\ufff4" +
    "\071\ufff4\072\ufff4\001\002\000\024\004\025\005\030\006" +
    "\026\007\034\030\033\033\027\047\037\056\031\057\040" +
    "\001\002\000\042\020\uffaf\031\uffaf\032\051\033\044\035" +
    "\047\036\053\037\046\040\050\041\056\042\045\043\043" +
    "\044\054\045\052\046\055\050\042\053\057\001\002\000" +
    "\006\020\300\031\301\001\002\000\024\004\025\005\030" +
    "\006\026\007\034\030\033\033\027\047\037\056\031\057" +
    "\040\001\002\000\006\010\uffb1\052\uffb1\001\002\000\042" +
    "\020\uffb0\031\uffb0\032\051\033\044\035\047\036\053\037" +
    "\046\040\050\041\056\042\045\043\043\044\054\045\052" +
    "\046\055\050\042\053\057\001\002\000\040\032\051\033" +
    "\044\035\047\036\053\037\046\040\050\041\056\042\045" +
    "\043\043\044\054\045\052\046\055\050\042\053\057\064" +
    "\304\001\002\000\030\003\147\007\136\011\134\012\306" +
    "\060\135\061\146\063\131\065\151\067\152\071\143\072" +
    "\125\001\002\000\054\003\uff9d\004\uff9d\005\uff9d\006\uff9d" +
    "\007\uff9d\011\uff9d\013\uff9d\030\uff9d\033\uff9d\047\uff9d\052" +
    "\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\063\uff9d\065\uff9d" +
    "\067\uff9d\070\uff9d\071\uff9d\072\uff9d\001\002\000\026\003" +
    "\147\007\136\011\134\060\135\061\146\063\131\065\151" +
    "\067\152\071\143\072\125\001\002\000\030\003\147\007" +
    "\136\011\134\013\310\060\135\061\146\063\131\065\151" +
    "\067\152\071\143\072\125\001\002\000\004\010\311\001" +
    "\002\000\054\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e" +
    "\011\uff9e\013\uff9e\030\uff9e\033\uff9e\047\uff9e\052\uff9e\056" +
    "\uff9e\057\uff9e\060\uff9e\061\uff9e\063\uff9e\065\uff9e\067\uff9e" +
    "\070\uff9e\071\uff9e\072\uff9e\001\002\000\054\003\ufff3\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\013\ufff3\030\ufff3" +
    "\033\ufff3\047\ufff3\052\ufff3\056\ufff3\057\ufff3\060\ufff3\061" +
    "\ufff3\063\ufff3\065\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3" +
    "\001\002\000\004\014\314\001\002\000\020\002\ufff9\012" +
    "\ufff9\015\ufff9\016\ufff9\021\ufff9\076\ufff9\077\ufff9\001\002" +
    "\000\004\002\001\001\002\000\020\002\000\012\000\015" +
    "\000\016\000\021\000\076\000\077\000\001\002\000\004" +
    "\030\320\001\002\000\010\007\322\015\321\031\326\001" +
    "\002\000\004\007\u011d\001\002\000\006\017\uffd9\020\uffd9" +
    "\001\002\000\006\017\u011b\020\u0117\001\002\000\006\010" +
    "\u0107\031\u0108\001\002\000\006\017\uffdb\020\uffdb\001\002" +
    "\000\004\017\327\001\002\000\020\007\331\022\330\023" +
    "\333\024\336\025\335\026\332\027\337\001\002\000\006" +
    "\010\uffb8\031\uffb8\001\002\000\006\010\uffb2\031\uffb2\001" +
    "\002\000\006\010\uffb6\031\uffb6\001\002\000\006\010\uffb7" +
    "\031\uffb7\001\002\000\004\010\340\001\002\000\006\010" +
    "\uffb4\031\uffb4\001\002\000\006\010\uffb3\031\uffb3\001\002" +
    "\000\006\010\uffb5\031\uffb5\001\002\000\006\012\342\015" +
    "\341\001\002\000\006\003\350\007\346\001\002\000\026" +
    "\003\147\007\136\011\134\060\135\061\146\063\131\065" +
    "\151\067\152\071\143\072\125\001\002\000\030\003\147" +
    "\007\136\011\134\013\344\060\135\061\146\063\131\065" +
    "\151\067\152\071\143\072\125\001\002\000\004\010\345" +
    "\001\002\000\020\002\uffdf\012\uffdf\015\uffdf\016\uffdf\021" +
    "\uffdf\076\uffdf\077\uffdf\001\002\000\010\017\uffbf\020\uffbf" +
    "\046\uffbf\001\002\000\024\002\uffc6\003\uffc6\007\uffc6\012" +
    "\uffc6\015\uffc6\016\uffc6\021\uffc6\076\uffc6\077\uffc6\001\002" +
    "\000\026\002\uffc1\003\uffc1\007\uffc1\010\u0106\012\uffc1\015" +
    "\uffc1\016\uffc1\021\uffc1\076\uffc1\077\uffc1\001\002\000\006" +
    "\017\361\020\360\001\002\000\010\003\350\007\346\012" +
    "\354\001\002\000\024\002\uffc7\003\uffc7\007\uffc7\012\uffc7" +
    "\015\uffc7\016\uffc7\021\uffc7\076\uffc7\077\uffc7\001\002\000" +
    "\026\003\147\007\136\011\134\060\135\061\146\063\131" +
    "\065\151\067\152\071\143\072\125\001\002\000\030\003" +
    "\147\007\136\011\134\013\356\060\135\061\146\063\131" +
    "\065\151\067\152\071\143\072\125\001\002\000\004\010" +
    "\357\001\002\000\020\002\uffe0\012\uffe0\015\uffe0\016\uffe0" +
    "\021\uffe0\076\uffe0\077\uffe0\001\002\000\004\007\u0105\001" +
    "\002\000\042\004\025\005\030\006\026\007\363\022\330" +
    "\023\333\024\336\025\335\026\332\027\337\030\033\033" +
    "\027\047\037\056\031\057\040\073\365\001\002\000\040" +
    "\014\u0100\032\051\033\044\035\047\036\053\037\046\040" +
    "\050\041\056\042\045\043\043\044\054\045\052\046\055" +
    "\050\042\053\057\001\002\000\046\010\uffb2\014\uff8e\030" +
    "\103\032\uff8e\033\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e" +
    "\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\050" +
    "\uff8e\053\uff8e\074\102\001\002\000\004\010\377\001\002" +
    "\000\004\074\366\001\002\000\024\004\025\005\030\006" +
    "\026\007\034\030\033\033\027\047\037\056\031\057\040" +
    "\001\002\000\040\014\370\032\051\033\044\035\047\036" +
    "\053\037\046\040\050\041\056\042\045\043\043\044\054" +
    "\045\052\046\055\050\042\053\057\001\002\000\004\014" +
    "\371\001\002\000\024\004\025\005\030\006\026\007\034" +
    "\030\033\033\027\047\037\056\031\057\040\001\002\000" +
    "\040\032\051\033\044\035\047\036\053\037\046\040\050" +
    "\041\056\042\045\043\043\044\054\045\052\046\055\050" +
    "\042\053\057\075\373\001\002\000\004\062\374\001\002" +
    "\000\020\007\331\022\330\023\333\024\336\025\335\026" +
    "\332\027\337\001\002\000\004\010\376\001\002\000\024" +
    "\002\uffc3\003\uffc3\007\uffc3\012\uffc3\015\uffc3\016\uffc3\021" +
    "\uffc3\076\uffc3\077\uffc3\001\002\000\024\002\uffc5\003\uffc5" +
    "\007\uffc5\012\uffc5\015\uffc5\016\uffc5\021\uffc5\076\uffc5\077" +
    "\uffc5\001\002\000\004\014\u0101\001\002\000\004\014\u0102" +
    "\001\002\000\024\004\025\005\030\006\026\007\034\030" +
    "\033\033\027\047\037\056\031\057\040\001\002\000\040" +
    "\010\u0104\032\051\033\044\035\047\036\053\037\046\040" +
    "\050\041\056\042\045\043\043\044\054\045\052\046\055" +
    "\050\042\053\057\001\002\000\024\002\uffc4\003\uffc4\007" +
    "\uffc4\012\uffc4\015\uffc4\016\uffc4\021\uffc4\076\uffc4\077\uffc4" +
    "\001\002\000\010\017\uffc0\020\uffc0\046\uffc0\001\002\000" +
    "\024\002\uffc2\003\uffc2\007\uffc2\012\uffc2\015\uffc2\016\uffc2" +
    "\021\uffc2\076\uffc2\077\uffc2\001\002\000\006\007\322\015" +
    "\321\001\002\000\004\017\u0109\001\002\000\020\007\331" +
    "\022\330\023\333\024\336\025\335\026\332\027\337\001" +
    "\002\000\004\010\u010b\001\002\000\006\012\u010d\015\u010c" +
    "\001\002\000\006\003\350\007\346\001\002\000\026\003" +
    "\147\007\136\011\134\060\135\061\146\063\131\065\151" +
    "\067\152\071\143\072\125\001\002\000\030\003\147\007" +
    "\136\011\134\013\u010f\060\135\061\146\063\131\065\151" +
    "\067\152\071\143\072\125\001\002\000\004\010\u0110\001" +
    "\002\000\020\002\uffe1\012\uffe1\015\uffe1\016\uffe1\021\uffe1" +
    "\076\uffe1\077\uffe1\001\002\000\010\003\350\007\346\012" +
    "\u0112\001\002\000\026\003\147\007\136\011\134\060\135" +
    "\061\146\063\131\065\151\067\152\071\143\072\125\001" +
    "\002\000\030\003\147\007\136\011\134\013\u0114\060\135" +
    "\061\146\063\131\065\151\067\152\071\143\072\125\001" +
    "\002\000\004\010\u0115\001\002\000\020\002\uffe2\012\uffe2" +
    "\015\uffe2\016\uffe2\021\uffe2\076\uffe2\077\uffe2\001\002\000" +
    "\006\017\u0118\020\u0117\001\002\000\006\007\322\015\321" +
    "\001\002\000\020\007\331\022\330\023\333\024\336\025" +
    "\335\026\332\027\337\001\002\000\006\010\uffde\031\uffde" +
    "\001\002\000\006\017\uffdc\020\uffdc\001\002\000\020\007" +
    "\331\022\330\023\333\024\336\025\335\026\332\027\337" +
    "\001\002\000\006\010\uffdd\031\uffdd\001\002\000\006\017" +
    "\uffda\020\uffda\001\002\000\026\002\uffcc\003\uffcc\007\uffcc" +
    "\010\u013c\012\uffcc\015\uffcc\016\uffcc\021\uffcc\076\uffcc\077" +
    "\uffcc\001\002\000\006\020\360\046\u0123\001\002\000\024" +
    "\002\uffd1\003\uffd1\007\uffd1\012\uffd1\015\uffd1\016\uffd1\021" +
    "\uffd1\076\uffd1\077\uffd1\001\002\000\024\002\ufffe\003\u011e" +
    "\007\346\012\ufffe\015\ufffe\016\ufffe\021\ufffe\076\ufffe\077" +
    "\ufffe\001\002\000\024\002\uffd2\003\uffd2\007\uffd2\012\uffd2" +
    "\015\uffd2\016\uffd2\021\uffd2\076\uffd2\077\uffd2\001\002\000" +
    "\042\004\025\005\030\006\026\007\034\022\u0129\023\u012a" +
    "\024\u012b\025\u0128\026\u0127\027\u0124\030\033\033\027\047" +
    "\037\056\031\057\040\073\u012c\001\002\000\004\010\uffbb" +
    "\001\002\000\040\014\u0137\032\051\033\044\035\047\036" +
    "\053\037\046\040\050\041\056\042\045\043\043\044\054" +
    "\045\052\046\055\050\042\053\057\001\002\000\004\010" +
    "\u0136\001\002\000\004\010\uffbc\001\002\000\004\010\uffba" +
    "\001\002\000\004\010\uffbe\001\002\000\004\010\uffbd\001" +
    "\002\000\004\010\uffb9\001\002\000\004\074\u012d\001\002" +
    "\000\024\004\025\005\030\006\026\007\034\030\033\033" +
    "\027\047\037\056\031\057\040\001\002\000\040\014\u012f" +
    "\032\051\033\044\035\047\036\053\037\046\040\050\041" +
    "\056\042\045\043\043\044\054\045\052\046\055\050\042" +
    "\053\057\001\002\000\004\014\u0130\001\002\000\024\004" +
    "\025\005\030\006\026\007\034\030\033\033\027\047\037" +
    "\056\031\057\040\001\002\000\040\032\051\033\044\035" +
    "\047\036\053\037\046\040\050\041\056\042\045\043\043" +
    "\044\054\045\052\046\055\050\042\053\057\075\u0132\001" +
    "\002\000\004\062\u0133\001\002\000\016\022\u0129\023\u012a" +
    "\024\u012b\025\u0128\026\u0127\027\u0124\001\002\000\004\010" +
    "\u0135\001\002\000\024\002\uffce\003\uffce\007\uffce\012\uffce" +
    "\015\uffce\016\uffce\021\uffce\076\uffce\077\uffce\001\002\000" +
    "\024\002\uffd0\003\uffd0\007\uffd0\012\uffd0\015\uffd0\016\uffd0" +
    "\021\uffd0\076\uffd0\077\uffd0\001\002\000\004\014\u0138\001" +
    "\002\000\004\014\u0139\001\002\000\024\004\025\005\030" +
    "\006\026\007\034\030\033\033\027\047\037\056\031\057" +
    "\040\001\002\000\040\010\u013b\032\051\033\044\035\047" +
    "\036\053\037\046\040\050\041\056\042\045\043\043\044" +
    "\054\045\052\046\055\050\042\053\057\001\002\000\024" +
    "\002\uffcf\003\uffcf\007\uffcf\012\uffcf\015\uffcf\016\uffcf\021" +
    "\uffcf\076\uffcf\077\uffcf\001\002\000\024\002\uffcd\003\uffcd" +
    "\007\uffcd\012\uffcd\015\uffcd\016\uffcd\021\uffcd\076\uffcd\077" +
    "\uffcd\001\002\000\024\002\ufffc\003\350\007\346\012\ufffc" +
    "\015\ufffc\016\ufffc\021\ufffc\076\ufffc\077\ufffc\001\002\000" +
    "\004\030\u013f\001\002\000\010\007\322\015\321\031\u0141" +
    "\001\002\000\006\010\u0107\031\u014d\001\002\000\004\010" +
    "\u0142\001\002\000\006\012\u0144\015\u0143\001\002\000\006" +
    "\003\350\007\346\001\002\000\026\003\147\007\136\011" +
    "\134\060\135\061\146\063\131\065\151\067\152\071\143" +
    "\072\125\001\002\000\030\003\147\007\136\011\134\013" +
    "\u0146\060\135\061\146\063\131\065\151\067\152\071\143" +
    "\072\125\001\002\000\004\010\u0147\001\002\000\020\002" +
    "\uffe3\012\uffe3\015\uffe3\016\uffe3\021\uffe3\076\uffe3\077\uffe3" +
    "\001\002\000\010\003\350\007\346\012\u0149\001\002\000" +
    "\026\003\147\007\136\011\134\060\135\061\146\063\131" +
    "\065\151\067\152\071\143\072\125\001\002\000\030\003" +
    "\147\007\136\011\134\013\u014b\060\135\061\146\063\131" +
    "\065\151\067\152\071\143\072\125\001\002\000\004\010" +
    "\u014c\001\002\000\020\002\uffe4\012\uffe4\015\uffe4\016\uffe4" +
    "\021\uffe4\076\uffe4\077\uffe4\001\002\000\004\010\u014e\001" +
    "\002\000\006\012\u0150\015\u014f\001\002\000\006\003\350" +
    "\007\346\001\002\000\026\003\147\007\136\011\134\060" +
    "\135\061\146\063\131\065\151\067\152\071\143\072\125" +
    "\001\002\000\030\003\147\007\136\011\134\013\u0152\060" +
    "\135\061\146\063\131\065\151\067\152\071\143\072\125" +
    "\001\002\000\004\010\u0153\001\002\000\020\002\uffe5\012" +
    "\uffe5\015\uffe5\016\uffe5\021\uffe5\076\uffe5\077\uffe5\001\002" +
    "\000\010\003\350\007\346\012\u0155\001\002\000\026\003" +
    "\147\007\136\011\134\060\135\061\146\063\131\065\151" +
    "\067\152\071\143\072\125\001\002\000\030\003\147\007" +
    "\136\011\134\013\u0157\060\135\061\146\063\131\065\151" +
    "\067\152\071\143\072\125\001\002\000\004\010\u0158\001" +
    "\002\000\020\002\uffe6\012\uffe6\015\uffe6\016\uffe6\021\uffe6" +
    "\076\uffe6\077\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0156\000\012\002\007\004\011\037\004\040\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\u013c" +
    "\012\346\024\350\001\001\000\010\007\u0120\011\u011f\024" +
    "\u011e\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\315\037\004\040\013\001\001\000\034\003\123\015" +
    "\132\025\127\026\136\027\131\030\126\031\140\032\147" +
    "\033\141\034\143\035\144\036\137\046\125\001\001\000" +
    "\002\001\001\000\004\005\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\031\020\022\021\035\022\023\045\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\116\020\022\021\035\022\023" +
    "\045\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\113\020\022\021\035\022\023" +
    "\045\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\040\020\022\021\035\022\023" +
    "\045\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\077\020\022\021\035\022\023\045\034\001\001" +
    "\000\014\017\075\020\022\021\035\022\023\045\034\001" +
    "\001\000\014\017\074\020\022\021\035\022\023\045\034" +
    "\001\001\000\014\017\073\020\022\021\035\022\023\045" +
    "\034\001\001\000\014\017\072\020\022\021\035\022\023" +
    "\045\034\001\001\000\014\017\071\020\022\021\035\022" +
    "\023\045\034\001\001\000\014\017\070\020\022\021\035" +
    "\022\023\045\034\001\001\000\014\017\067\020\022\021" +
    "\035\022\023\045\034\001\001\000\014\017\066\020\022" +
    "\021\035\022\023\045\034\001\001\000\014\017\065\020" +
    "\022\021\035\022\023\045\034\001\001\000\014\017\064" +
    "\020\022\021\035\022\023\045\034\001\001\000\014\017" +
    "\063\020\022\021\035\022\023\045\034\001\001\000\014" +
    "\017\062\020\022\021\035\022\023\045\034\001\001\000" +
    "\014\017\057\020\022\021\035\022\023\045\034\001\001" +
    "\000\002\001\001\000\014\017\061\020\022\021\035\022" +
    "\023\045\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\100\020\022\021\035" +
    "\022\023\045\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\111\020\022\021\035\022\023\045\034" +
    "\001\001\000\016\017\105\020\022\021\035\022\023\044" +
    "\103\045\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\110\020\022\021\035\022" +
    "\023\045\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\017\121\020\022\021\035\022\023\045" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\015\153\025\127\026\136\027\131\030\126\031\140\032" +
    "\147\033\141\034\143\035\144\036\137\046\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\302\020\022\021\035\022\023" +
    "\045\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\017\243\020\022\021\035\022\023" +
    "\045\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\174\020\022\021\035\022\023\045\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\152\015\132\025\127\026\136\027\131\030\126\031\140" +
    "\032\147\033\141\034\143\035\144\036\137\046\125\001" +
    "\001\000\032\015\153\025\127\026\136\027\131\030\126" +
    "\031\140\032\147\033\141\034\143\035\144\036\137\046" +
    "\125\001\001\000\002\001\001\000\014\017\155\020\022" +
    "\021\035\022\023\045\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\162\020\022\021\035\022\023\045\034\001\001\000" +
    "\002\001\001\000\014\017\164\020\022\021\035\022\023" +
    "\045\034\001\001\000\002\001\001\000\032\015\166\025" +
    "\127\026\136\027\131\030\126\031\140\032\147\033\141" +
    "\034\143\035\144\036\137\046\125\001\001\000\002\001" +
    "\001\000\034\003\170\015\132\025\127\026\136\027\131" +
    "\030\126\031\140\032\147\033\141\034\143\035\144\036" +
    "\137\046\125\001\001\000\032\015\153\025\127\026\136" +
    "\027\131\030\126\031\140\032\147\033\141\034\143\035" +
    "\144\036\137\046\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\017" +
    "\201\020\022\021\035\022\023\045\034\047\200\050\176" +
    "\051\177\001\001\000\020\017\201\020\022\021\035\022" +
    "\023\045\034\047\212\051\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\211\020" +
    "\022\021\035\022\023\045\034\001\001\000\032\015\204" +
    "\025\127\026\136\027\131\030\126\031\140\032\147\033" +
    "\141\034\143\035\144\036\137\046\125\001\001\000\002" +
    "\001\001\000\034\003\206\015\132\025\127\026\136\027" +
    "\131\030\126\031\140\032\147\033\141\034\143\035\144" +
    "\036\137\046\125\001\001\000\032\015\153\025\127\026" +
    "\136\027\131\030\126\031\140\032\147\033\141\034\143" +
    "\035\144\036\137\046\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\015\214\025\127\026\136\027\131\030\126\031\140\032" +
    "\147\033\141\034\143\035\144\036\137\046\125\001\001" +
    "\000\002\001\001\000\034\003\216\015\132\025\127\026" +
    "\136\027\131\030\126\031\140\032\147\033\141\034\143" +
    "\035\144\036\137\046\125\001\001\000\032\015\153\025" +
    "\127\026\136\027\131\030\126\031\140\032\147\033\141" +
    "\034\143\035\144\036\137\046\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\236\020\022\021\035\022\023\045\034\001\001" +
    "\000\002\001\001\000\016\017\105\020\022\021\035\022" +
    "\023\044\231\045\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\235\020\022\021" +
    "\035\022\023\045\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\242\020\022\021\035\022\023\045\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\015\247\016\252\025" +
    "\246\026\250\027\131\030\245\031\140\032\147\033\141" +
    "\034\143\035\144\036\137\046\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\261\015\132\025\127\026\136\027\131\030" +
    "\126\031\140\032\147\033\141\034\143\035\144\036\137" +
    "\046\125\001\001\000\002\001\001\000\032\015\254\025" +
    "\127\026\136\027\131\030\126\031\140\032\147\033\141" +
    "\034\143\035\144\036\137\046\125\001\001\000\002\001" +
    "\001\000\034\003\256\015\132\025\127\026\136\027\131" +
    "\030\126\031\140\032\147\033\141\034\143\035\144\036" +
    "\137\046\125\001\001\000\032\015\153\025\127\026\136" +
    "\027\131\030\126\031\140\032\147\033\141\034\143\035" +
    "\144\036\137\046\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\015\153\025\127\026\136\027\131\030" +
    "\126\031\140\032\147\033\141\034\143\035\144\036\137" +
    "\046\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\015\265\025\127\026\136\027\131\030\126\031\140" +
    "\032\147\033\141\034\143\035\144\036\137\046\125\001" +
    "\001\000\002\001\001\000\034\003\267\015\132\025\127" +
    "\026\136\027\131\030\126\031\140\032\147\033\141\034" +
    "\143\035\144\036\137\046\125\001\001\000\032\015\153" +
    "\025\127\026\136\027\131\030\126\031\140\032\147\033" +
    "\141\034\143\035\144\036\137\046\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\275\020\022\021\035\022\023\023\276" +
    "\045\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\301\020\022\021\035\022\023\045\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\015\304\025\127\026\136\027\131\030\126\031\140" +
    "\032\147\033\141\034\143\035\144\036\137\046\125\001" +
    "\001\000\002\001\001\000\034\003\306\015\132\025\127" +
    "\026\136\027\131\030\126\031\140\032\147\033\141\034" +
    "\143\035\144\036\137\046\125\001\001\000\032\015\153" +
    "\025\127\026\136\027\131\030\126\031\140\032\147\033" +
    "\141\034\143\035\144\036\137\046\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\041\323\042\322\043\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\333\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\351\012\346\024\350\001\001\000" +
    "\034\003\342\015\132\025\127\026\136\027\131\030\126" +
    "\031\140\032\147\033\141\034\143\035\144\036\137\046" +
    "\125\001\001\000\032\015\153\025\127\026\136\027\131" +
    "\030\126\031\140\032\147\033\141\034\143\035\144\036" +
    "\137\046\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\352\024\350\001\001\000\002" +
    "\001\001\000\034\003\354\015\132\025\127\026\136\027" +
    "\131\030\126\031\140\032\147\033\141\034\143\035\144" +
    "\036\137\046\125\001\001\000\032\015\153\025\127\026" +
    "\136\027\131\030\126\031\140\032\147\033\141\034\143" +
    "\035\144\036\137\046\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\014\363\017\361" +
    "\020\022\021\035\022\023\045\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\366\020\022\021\035\022\023\045\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\371" +
    "\020\022\021\035\022\023\045\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\374\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\u0102\020\022\021\035" +
    "\022\023\045\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\u0115" +
    "\043\324\001\001\000\002\001\001\000\004\014\u0109\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\u0110" +
    "\012\346\024\350\001\001\000\034\003\u010d\015\132\025" +
    "\127\026\136\027\131\030\126\031\140\032\147\033\141" +
    "\034\143\035\144\036\137\046\125\001\001\000\032\015" +
    "\153\025\127\026\136\027\131\030\126\031\140\032\147" +
    "\033\141\034\143\035\144\036\137\046\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\352\024\350" +
    "\001\001\000\034\003\u0112\015\132\025\127\026\136\027" +
    "\131\030\126\031\140\032\147\033\141\034\143\035\144" +
    "\036\137\046\125\001\001\000\032\015\153\025\127\026" +
    "\136\027\131\030\126\031\140\032\147\033\141\034\143" +
    "\035\144\036\137\046\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\u0119\001\001" +
    "\000\004\014\u0118\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\u011b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\u0121\024\u011e\001\001\000\002\001\001" +
    "\000\016\013\u0125\017\u0124\020\022\021\035\022\023\045" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\017\u012d\020\022\021\035\022\023\045\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\u0130" +
    "\020\022\021\035\022\023\045\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u0133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\u0139\020\022\021\035" +
    "\022\023\045\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\352\024\350\001\001" +
    "\000\002\001\001\000\010\041\u013f\042\322\043\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\u0147\012\346\024\350\001\001\000\034\003" +
    "\u0144\015\132\025\127\026\136\027\131\030\126\031\140" +
    "\032\147\033\141\034\143\035\144\036\137\046\125\001" +
    "\001\000\032\015\153\025\127\026\136\027\131\030\126" +
    "\031\140\032\147\033\141\034\143\035\144\036\137\046" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\352\024\350\001\001\000\034\003\u0149\015\132\025" +
    "\127\026\136\027\131\030\126\031\140\032\147\033\141" +
    "\034\143\035\144\036\137\046\125\001\001\000\032\015" +
    "\153\025\127\026\136\027\131\030\126\031\140\032\147" +
    "\033\141\034\143\035\144\036\137\046\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\u0153\012\346\024\350\001\001\000" +
    "\034\003\u0150\015\132\025\127\026\136\027\131\030\126" +
    "\031\140\032\147\033\141\034\143\035\144\036\137\046" +
    "\125\001\001\000\032\015\153\025\127\026\136\027\131" +
    "\030\126\031\140\032\147\033\141\034\143\035\144\036" +
    "\137\046\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\352\024\350\001\001\000\034\003\u0155\015" +
    "\132\025\127\026\136\027\131\030\126\031\140\032\147" +
    "\033\141\034\143\035\144\036\137\046\125\001\001\000" +
    "\032\015\153\025\127\026\136\027\131\030\126\031\140" +
    "\032\147\033\141\034\143\035\144\036\137\046\125\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= cuerpo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // cuerpo ::= cuerpo estructura 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.addAll(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo ::= estructura 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>();  RESULT.addAll(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // estructura ::= TYPE declaraciones_tipos 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // estructura ::= CONST declaracion_constantes 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // estructura ::= VAR declaraciones_variables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // estructura ::= declaracion_funcion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(Collections.singletonList(a)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // estructura ::= declaracion_procedimiento 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(Collections.singletonList(a)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // estructura ::= BEGIN instrucciones END PUNTO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= writeln FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= asignacion_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= asignacion_array FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= llamada_metodo FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= sentencia_case 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= sentencia_while 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= sentencia_for 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= sentencia_repeat 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= transferencia_break FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= transferencia_continue FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion_fin ::= writeln 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion_fin ::= asignacion_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion_fin ::= asignacion_array 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion_procedimiento ::= PROCEDURE ID PAR1 lista_param_f PAR2 FINCADENA VAR declaraciones_variables BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		          LinkedList<Instruccion> cuerpo = new LinkedList<>();
            cuerpo.addAll(d); // d es LinkedList<Instruccion>
            cuerpo.addAll(e);  
        RESULT = new DeclaracionFuncion(a, b, "void", cuerpo, aleft, aright); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion_procedimiento ::= PROCEDURE ID PAR1 lista_param_f PAR2 FINCADENA BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionFuncion(a, b, "void", d,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion_procedimiento ::= PROCEDURE ID PAR1 PAR2 FINCADENA VAR declaraciones_variables BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		          LinkedList<Instruccion> cuerpo = new LinkedList<>();
            cuerpo.addAll(d); // d es LinkedList<Instruccion>
            cuerpo.addAll(e);  
        RESULT = new DeclaracionFuncion(a, new LinkedList<HashMap>(),"void", cuerpo, aleft, aright); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion_procedimiento ::= PROCEDURE ID PAR1 PAR2 FINCADENA BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionFuncion(a, new LinkedList<HashMap>(), "void", d,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion_funcion ::= FUNCTION ID PAR1 lista_param_f PAR2 DOSPUNTOS tipos_dato_var FINCADENA VAR declaraciones_variables BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		          LinkedList<Instruccion> cuerpo = new LinkedList<>();
            cuerpo.addAll(d); // d es LinkedList<Instruccion>
            cuerpo.addAll(e);  
        RESULT = new DeclaracionFuncion(a, b, c, cuerpo, aleft, aright); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion_funcion ::= FUNCTION ID PAR1 lista_param_f PAR2 DOSPUNTOS tipos_dato_var FINCADENA BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionFuncion(a, b, c, d,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion_funcion ::= FUNCTION ID PAR1 PAR2 DOSPUNTOS tipos_dato_var FINCADENA VAR declaraciones_variables BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		          LinkedList<Instruccion> cuerpo = new LinkedList<>();
            cuerpo.addAll(d); // d es LinkedList<Instruccion>
            cuerpo.addAll(e);  
        RESULT = new DeclaracionFuncion(a, new LinkedList<HashMap>(), c, cuerpo, aleft, aright); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion_funcion ::= FUNCTION ID PAR1 PAR2 DOSPUNTOS tipos_dato_var FINCADENA BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionFuncion(a, new LinkedList<HashMap>(), c, d,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_param_f ::= lista_param_f FINCADENA lista_params_id DOSPUNTOS tipos_dato_var 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = a;
                    // Recorrer la lista de identificadores (b) y asignarles el tipo (c)
                    for (String id : b) {
                        var hm2 = new HashMap<String, Object>();
                        hm2.put("id", id);
                        hm2.put("tipo", c);
                        RESULT.add(hm2);
                    }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_param_f",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_param_f ::= lista_params_id DOSPUNTOS tipos_dato_var 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new LinkedList<HashMap>(); 
                    // Recorrer la lista de identificadores (a) y asignarles el tipo (b)
                    for (String id : a) {
                        var hm = new HashMap<String, Object>();
                        hm.put("id", id);
                        hm.put("tipo", b);
                        RESULT.add(hm);
                    }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_param_f",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_params_id ::= lista_params_id COMA tipo_id_f 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                                    RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_params_id",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_params_id ::= tipo_id_f 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<String>(); 
                                                    RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_params_id",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo_id_f ::= VAR ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_id_f",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo_id_f ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_id_f",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // llamada_metodo ::= ID PAR1 parametros_llamada PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new LlamadoFuncion(a,b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metodo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // llamada_metodo ::= ID PAR1 PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT= new LlamadoFuncion(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metodo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // llamada_funcion ::= ID PAR1 parametros_llamada PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new LlamadoFuncion(a,b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // llamada_funcion ::= ID PAR1 PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT= new LlamadoFuncion(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros_llamada ::= parametros_llamada COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros_llamada ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaraciones_tipos ::= declaraciones_tipos declaracion_tipo 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaraciones_tipos ::= declaracion_tipo 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion_tipo ::= listado_id IGUAL tipos_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipos(a, b,aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion_tipo ::= listado_id IGUAL expresion PUNTO PUNTO PUNTO expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipoSubRango(a, b,c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaracion_tipo ::= listado_id IGUAL ARRAY CORCHETE1 expresion PUNTO PUNTO expresion CORCHETE2 OF tipos_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipoArreglo(a,b,c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaracion_tipo ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracion_tipo ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion_constantes ::= declaracion_constantes ID IGUAL expresion FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;  
                                    RESULT.add(new DeclaracionConstante(false, b,c, new Tipo(TipoDato.INTEGER),bleft, bright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion_constantes ::= ID IGUAL expresion FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(new DeclaracionConstante(false, b,c, new Tipo(TipoDato.INTEGER),bleft, bright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion_constantes ::= error FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion_constantes ::= error 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaraciones_variables ::= declaraciones_variables declaracion_variables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_variables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaraciones_variables ::= declaracion_variables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_variables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracion_variables ::= listado_id DOSPUNTOS tipos_dato_var FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DeclaracionVariable(true, a,null, b,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracion_variables ::= listado_id DOSPUNTOS expresion PUNTO PUNTO PUNTO expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVarSubrango(a, b,c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracion_variables ::= listado_id DOSPUNTOS ARRAY CORCHETE1 expresion PUNTO PUNTO expresion CORCHETE2 OF tipos_dato_var FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVarArreglo(a,b,c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaracion_variables ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaracion_variables ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // listado_id ::= listado_id COMA ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                                    RESULT.add(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listado_id",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // listado_id ::= ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<String>(); 
                                                    RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listado_id",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipos_variable ::= INTEGER 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("integer",TipoDato.INTEGER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipos_variable ::= REAL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("real",TipoDato.REAL);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipos_variable ::= STRING 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("string",TipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipos_variable ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("char",TipoDato.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipos_variable ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("boolean",TipoDato.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipos_variable ::= VOID 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("void",TipoDato.VOID);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipos_dato_var ::= INTEGER 
            {
              String RESULT =null;
		   RESULT="integer";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipos_dato_var ::= REAL 
            {
              String RESULT =null;
		   RESULT="real";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipos_dato_var ::= STRING 
            {
              String RESULT =null;
		   RESULT="string";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipos_dato_var ::= CHAR 
            {
              String RESULT =null;
		   RESULT="char";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipos_dato_var ::= BOOL 
            {
              String RESULT =null;
		   RESULT="boolean";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipos_dato_var ::= VOID 
            {
              String RESULT =null;
		   RESULT="void";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipos_dato_var ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // writeln ::= IMPRIMIR PAR1 expresion_conca PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Writeln(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion_conca ::= expresion_conca COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                                    RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_conca",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion_conca ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); 
                                                    RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_conca",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // asignacion_variable ::= ID DOSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // asignacion_array ::= ID CORCHETE1 expresion CORCHETE2 DOSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVarArreglo(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_array",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencia_if ::= IF expresion THEN instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new SentenciaIf(a, new LinkedList<>(Collections.singletonList(b)), aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencia_if ::= IF expresion THEN BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaIf(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencia_if ::= IF expresion THEN BEGIN instrucciones END ELSE instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaIfElse(a, b,new LinkedList<>(Collections.singletonList(c)) , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencia_if ::= IF expresion THEN instruccion_fin ELSE instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new SentenciaIfElse(a, new LinkedList<>(Collections.singletonList(b)), new LinkedList<>(Collections.singletonList(c)), aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentencia_if ::= IF expresion THEN instruccion_fin ELSE BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaIfElse(a, new LinkedList<>(Collections.singletonList(b)),c , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencia_if ::= IF expresion THEN BEGIN instrucciones END ELSE BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaIfElse(a, b,c , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentencia_case ::= CASE expresion OF casos_case ELSE BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<CasoCase> b = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = new SentenciaCase(a, b, c, aleft, aright);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentencia_case ::= CASE expresion OF casos_case ELSE instruccion END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<CasoCase> b = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = new SentenciaCase(a, b, new LinkedList<>(Collections.singletonList(c)), aleft, aright);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // casos_case ::= casos_case caso_case 
            {
              LinkedList<CasoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoCase> a = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoCase b = (CasoCase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_case",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // casos_case ::= caso_case 
            {
              LinkedList<CasoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoCase a = (CasoCase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_case",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // caso_case ::= expresiones_case DOSPUNTOS BEGIN instrucciones END FINCADENA 
            {
              CasoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new CasoCase(a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_case",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // caso_case ::= expresiones_case DOSPUNTOS instruccion 
            {
              CasoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CasoCase(a, new LinkedList<>(Collections.singletonList(b))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_case",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresiones_case ::= expresiones_case COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_case",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresiones_case ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_case",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentencia_while ::= WHILE expresion DO BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentencia_while ::= WHILE expresion DO instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaWhile(a,new LinkedList<>(Collections.singletonList(b)), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentencia_for ::= FOR ID DOSPUNTOS IGUAL expresion TO expresion DO instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentenciaFor(new AsignacionVariable(a, b, aleft, aright), c, new AccesoVariable(a, aleft, aright) , new LinkedList<>(Collections.singletonList(d)),new AsignacionVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo("integer",TipoDato.INTEGER), aleft, aright) , aleft, aright), aleft, aright),aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentencia_for ::= FOR ID DOSPUNTOS IGUAL expresion TO expresion DO BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  		   RESULT = new SentenciaFor(new AsignacionVariable(a, b, aleft, aright), c, new AccesoVariable(a, aleft, aright) , d,new AsignacionVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo("integer",TipoDato.INTEGER), aleft, aright) , aleft, aright), aleft, aright),aleft, aright);   
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentencia_repeat ::= REPEAT instrucciones UNTIL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaRepeat(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_repeat",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // transferencia_break ::= BREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = new SentenciaBreak(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_break",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // transferencia_continue ::= CONTINUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = new SentenciaContinue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_continue",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= expresionAritmetica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresion ::= expresionRelacional 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresion ::= expresionLogica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresion ::= llamada_funcion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo("integer",TipoDato.INTEGER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo("real",TipoDato.REAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo("string",TipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo("char",TipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresion ::= BOOLEAN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo("boolean",TipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresion ::= ID CORCHETE1 expresion CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVarArreglo(a, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresionAritmetica ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionNegacionU(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresionAritmetica ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionSuma(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresionAritmetica ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionResta(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresionAritmetica ::= expresion MULT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionMultiplicacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresionAritmetica ::= expresion DIV expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDivision (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expresionAritmetica ::= expresion DIVE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDiv(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expresionAritmetica ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionModulo (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresionAritmetica ::= PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresionRelacional ::= expresion IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Igualacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresionRelacional ::= expresion DIFERENTE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Diferenciacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresionRelacional ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresionRelacional ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expresionRelacional ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expresionRelacional ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expresionLogica ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorNot(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expresionLogica ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAnd(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expresionLogica ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOr(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expresionLogica ::= expresion AND THEN expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAndThen(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expresionLogica ::= expresion OR ELSE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOrThen(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
