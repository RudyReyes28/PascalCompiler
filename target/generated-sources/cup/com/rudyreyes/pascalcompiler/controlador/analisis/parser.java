
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.rudyreyes.pascalcompiler.controlador.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.rudyreyes.pascalcompiler.modelo.abstracto.Instruccion;
import com.rudyreyes.pascalcompiler.modelo.simbolo.*;
import java.util.HashMap;
import java.util.Collections;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.writeln.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.variables.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.arrays.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.sentenciasControl.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.tipos.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.ciclos.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.sentenciaTransferencia.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.funciones.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.nativo.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.aritmeticas.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.relacionales.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.logicas.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.variables.*;
import com.rudyreyes.pascalcompiler.modelo.errores.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\004\000\002\004\004\000\002\004" +
    "\003\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\002\006\000\002\003\004\000" +
    "\002\003\003\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\037\020\000\002\037\016\000\002\040\007\000\002\040" +
    "\005\000\002\041\005\000\002\041\003\000\002\042\004" +
    "\000\002\042\003\000\002\007\004\000\002\007\003\000" +
    "\002\011\006\000\002\011\012\000\002\011\016\000\002" +
    "\011\004\000\002\011\003\000\002\005\007\000\002\005" +
    "\006\000\002\005\004\000\002\005\003\000\002\010\004" +
    "\000\002\010\003\000\002\012\006\000\002\012\012\000" +
    "\002\012\016\000\002\012\004\000\002\012\003\000\002" +
    "\024\005\000\002\024\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\025\006\000\002\023" +
    "\005\000\002\023\003\000\002\026\006\000\002\030\011" +
    "\000\002\027\006\000\002\027\011\000\002\027\012\000" +
    "\002\027\010\000\002\027\013\000\002\027\015\000\002" +
    "\031\013\000\002\031\012\000\002\044\004\000\002\044" +
    "\003\000\002\043\010\000\002\043\005\000\002\045\005" +
    "\000\002\045\003\000\002\032\011\000\002\032\006\000" +
    "\002\033\013\000\002\033\016\000\002\034\007\000\002" +
    "\035\003\000\002\036\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\006\000\002\020\004\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\022\004\000\002\022\005\000\002\022\005\000\002\022" +
    "\006\000\002\022\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\014\012\010\015\006\016\005\021\013\076" +
    "\012\001\002\000\016\002\ufffb\012\ufffb\015\ufffb\016\ufffb" +
    "\021\ufffb\076\ufffb\001\002\000\006\003\u0116\007\u0115\001" +
    "\002\000\006\003\352\007\014\001\002\000\016\002\u0112" +
    "\012\010\015\006\016\005\021\013\076\012\001\002\000" +
    "\026\003\210\007\177\011\175\060\176\061\207\063\172" +
    "\065\212\067\213\071\205\072\167\001\002\000\016\002" +
    "\uffff\012\uffff\015\uffff\016\uffff\021\uffff\076\uffff\001\002" +
    "\000\004\007\141\001\002\000\006\003\015\007\014\001" +
    "\002\000\010\017\uffcd\020\uffcd\046\uffcd\001\002\000\024" +
    "\002\uffda\003\uffda\007\uffda\010\140\012\uffda\015\uffda\016" +
    "\uffda\021\uffda\076\uffda\001\002\000\006\020\022\046\023" +
    "\001\002\000\022\002\uffdf\003\uffdf\007\uffdf\012\uffdf\015" +
    "\uffdf\016\uffdf\021\uffdf\076\uffdf\001\002\000\022\002\ufffe" +
    "\003\015\007\014\012\ufffe\015\ufffe\016\ufffe\021\ufffe\076" +
    "\ufffe\001\002\000\022\002\uffe0\003\uffe0\007\uffe0\012\uffe0" +
    "\015\uffe0\016\uffe0\021\uffe0\076\uffe0\001\002\000\004\007" +
    "\137\001\002\000\042\004\027\005\045\006\031\007\036" +
    "\022\044\023\046\024\047\025\043\026\041\027\030\030" +
    "\042\033\025\047\033\056\037\057\040\073\050\001\002" +
    "\000\064\010\uffa4\014\uffa4\017\uffa4\020\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4" +
    "\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\050\uffa4\051" +
    "\uffa4\052\uffa4\053\uffa4\062\uffa4\064\uffa4\066\uffa4\075\uffa4" +
    "\001\002\000\024\004\027\005\045\006\031\007\036\030" +
    "\042\033\025\047\033\056\037\057\040\001\002\000\064" +
    "\010\uffa3\014\uffa3\017\uffa3\020\uffa3\031\uffa3\032\uffa3\033" +
    "\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3" +
    "\043\uffa3\044\uffa3\045\uffa3\046\uffa3\050\uffa3\051\uffa3\052" +
    "\uffa3\053\uffa3\062\uffa3\064\uffa3\066\uffa3\075\uffa3\001\002" +
    "\000\064\010\uffa0\014\uffa0\017\uffa0\020\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0" +
    "\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\050\uffa0\051" +
    "\uffa0\052\uffa0\053\uffa0\062\uffa0\064\uffa0\066\uffa0\075\uffa0" +
    "\001\002\000\004\010\uffc9\001\002\000\064\010\uffa1\014" +
    "\uffa1\017\uffa1\020\uffa1\031\uffa1\032\uffa1\033\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1" +
    "\062\uffa1\064\uffa1\066\uffa1\075\uffa1\001\002\000\040\014" +
    "\131\032\064\033\056\035\061\036\066\037\060\040\062" +
    "\041\070\042\057\043\053\044\065\045\063\046\067\050" +
    "\054\053\071\001\002\000\024\004\027\005\045\006\031" +
    "\007\036\030\042\033\025\047\033\056\037\057\040\001" +
    "\002\000\004\010\127\001\002\000\064\010\uffa5\014\uffa5" +
    "\017\uffa5\020\uffa5\031\uffa5\032\uffa5\033\uffa5\035\uffa5\036" +
    "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5" +
    "\045\uffa5\046\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\062" +
    "\uffa5\064\uffa5\066\uffa5\075\uffa5\001\002\000\066\010\uff9d" +
    "\014\uff9d\017\uff9d\020\uff9d\031\uff9d\032\uff9d\033\uff9d\035" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\050\uff9d\051\uff9d\052\uff9d\053" +
    "\uff9d\062\uff9d\064\uff9d\066\uff9d\074\124\075\uff9d\001\002" +
    "\000\064\010\uff9e\014\uff9e\017\uff9e\020\uff9e\031\uff9e\032" +
    "\uff9e\033\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e" +
    "\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\050\uff9e\051" +
    "\uff9e\052\uff9e\053\uff9e\062\uff9e\064\uff9e\066\uff9e\075\uff9e" +
    "\001\002\000\064\010\uff9f\014\uff9f\017\uff9f\020\uff9f\031" +
    "\uff9f\032\uff9f\033\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\050" +
    "\uff9f\051\uff9f\052\uff9f\053\uff9f\062\uff9f\064\uff9f\066\uff9f" +
    "\075\uff9f\001\002\000\004\010\uffca\001\002\000\024\004" +
    "\027\005\045\006\031\007\036\030\042\033\025\047\033" +
    "\056\037\057\040\001\002\000\004\010\uffc8\001\002\000" +
    "\004\010\uffcc\001\002\000\064\010\uffa2\014\uffa2\017\uffa2" +
    "\020\uffa2\031\uffa2\032\uffa2\033\uffa2\035\uffa2\036\uffa2\037" +
    "\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2" +
    "\046\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\062\uffa2\064" +
    "\uffa2\066\uffa2\075\uffa2\001\002\000\004\010\uffcb\001\002" +
    "\000\004\010\uffc7\001\002\000\004\074\051\001\002\000" +
    "\024\004\027\005\045\006\031\007\036\030\042\033\025" +
    "\047\033\056\037\057\040\001\002\000\040\014\055\032" +
    "\064\033\056\035\061\036\066\037\060\040\062\041\070" +
    "\042\057\043\053\044\065\045\063\046\067\050\054\053" +
    "\071\001\002\000\024\004\027\005\045\006\031\007\036" +
    "\030\042\033\025\047\033\056\037\057\040\001\002\000" +
    "\026\004\027\005\045\006\031\007\036\030\042\033\025" +
    "\047\033\051\116\056\037\057\040\001\002\000\004\014" +
    "\110\001\002\000\024\004\027\005\045\006\031\007\036" +
    "\030\042\033\025\047\033\056\037\057\040\001\002\000" +
    "\024\004\027\005\045\006\031\007\036\030\042\033\025" +
    "\047\033\056\037\057\040\001\002\000\024\004\027\005" +
    "\045\006\031\007\036\030\042\033\025\047\033\056\037" +
    "\057\040\001\002\000\024\004\027\005\045\006\031\007" +
    "\036\030\042\033\025\047\033\056\037\057\040\001\002" +
    "\000\024\004\027\005\045\006\031\007\036\030\042\033" +
    "\025\047\033\056\037\057\040\001\002\000\024\004\027" +
    "\005\045\006\031\007\036\030\042\033\025\047\033\056" +
    "\037\057\040\001\002\000\024\004\027\005\045\006\031" +
    "\007\036\030\042\033\025\047\033\056\037\057\040\001" +
    "\002\000\024\004\027\005\045\006\031\007\036\030\042" +
    "\033\025\047\033\056\037\057\040\001\002\000\024\004" +
    "\027\005\045\006\031\007\036\030\042\033\025\047\033" +
    "\056\037\057\040\001\002\000\024\004\027\005\045\006" +
    "\031\007\036\030\042\033\025\047\033\056\037\057\040" +
    "\001\002\000\024\004\027\005\045\006\031\007\036\030" +
    "\042\033\025\047\033\056\037\057\040\001\002\000\026" +
    "\004\027\005\045\006\031\007\036\030\042\033\025\047" +
    "\033\052\073\056\037\057\040\001\002\000\064\010\uff8b" +
    "\014\uff8b\017\uff8b\020\uff8b\031\uff8b\032\064\033\056\035" +
    "\061\036\066\037\060\040\062\041\070\042\057\043\053" +
    "\044\065\045\063\046\067\050\054\051\uff8b\052\uff8b\053" +
    "\uff8b\062\uff8b\064\uff8b\066\uff8b\075\uff8b\001\002\000\024" +
    "\004\027\005\045\006\031\007\036\030\042\033\025\047" +
    "\033\056\037\057\040\001\002\000\064\010\uff89\014\uff89" +
    "\017\uff89\020\uff89\031\uff89\032\064\033\056\035\061\036" +
    "\066\037\060\040\062\041\070\042\057\043\053\044\065" +
    "\045\063\046\067\050\054\051\uff89\052\uff89\053\071\062" +
    "\uff89\064\uff89\066\uff89\075\uff89\001\002\000\064\010\uff92" +
    "\014\uff92\017\uff92\020\uff92\031\uff92\032\064\033\056\035" +
    "\061\036\066\037\060\040\062\041\uff92\042\uff92\043\uff92" +
    "\044\uff92\045\uff92\046\uff92\050\uff92\051\uff92\052\uff92\053" +
    "\uff92\062\uff92\064\uff92\066\uff92\075\uff92\001\002\000\064" +
    "\010\uff93\014\uff93\017\uff93\020\uff93\031\uff93\032\064\033" +
    "\056\035\061\036\066\037\060\040\062\041\uff93\042\uff93" +
    "\043\uff93\044\uff93\045\uff93\046\uff93\050\uff93\051\uff93\052" +
    "\uff93\053\uff93\062\uff93\064\uff93\066\uff93\075\uff93\001\002" +
    "\000\064\010\uff97\014\uff97\017\uff97\020\uff97\031\uff97\032" +
    "\uff97\033\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97" +
    "\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\050\uff97\051" +
    "\uff97\052\uff97\053\uff97\062\uff97\064\uff97\066\uff97\075\uff97" +
    "\001\002\000\064\010\uff8f\014\uff8f\017\uff8f\020\uff8f\031" +
    "\uff8f\032\064\033\056\035\061\036\066\037\060\040\062" +
    "\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\050" +
    "\uff8f\051\uff8f\052\uff8f\053\uff8f\062\uff8f\064\uff8f\066\uff8f" +
    "\075\uff8f\001\002\000\064\010\uff9a\014\uff9a\017\uff9a\020" +
    "\uff9a\031\uff9a\032\uff9a\033\uff9a\035\061\036\066\037\060" +
    "\040\062\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046" +
    "\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\062\uff9a\064\uff9a" +
    "\066\uff9a\075\uff9a\001\002\000\064\010\uff8e\014\uff8e\017" +
    "\uff8e\020\uff8e\031\uff8e\032\064\033\056\035\061\036\066" +
    "\037\060\040\062\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045" +
    "\uff8e\046\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\062\uff8e" +
    "\064\uff8e\066\uff8e\075\uff8e\001\002\000\064\010\uff95\014" +
    "\uff95\017\uff95\020\uff95\031\uff95\032\uff95\033\uff95\035\uff95" +
    "\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044" +
    "\uff95\045\uff95\046\uff95\050\uff95\051\uff95\052\uff95\053\uff95" +
    "\062\uff95\064\uff95\066\uff95\075\uff95\001\002\000\064\010" +
    "\uff98\014\uff98\017\uff98\020\uff98\031\uff98\032\uff98\033\uff98" +
    "\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043" +
    "\uff98\044\uff98\045\uff98\046\uff98\050\uff98\051\uff98\052\uff98" +
    "\053\uff98\062\uff98\064\uff98\066\uff98\075\uff98\001\002\000" +
    "\064\010\uff96\014\uff96\017\uff96\020\uff96\031\uff96\032\uff96" +
    "\033\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\050\uff96\051\uff96" +
    "\052\uff96\053\uff96\062\uff96\064\uff96\066\uff96\075\uff96\001" +
    "\002\000\064\010\uff91\014\uff91\017\uff91\020\uff91\031\uff91" +
    "\032\064\033\056\035\061\036\066\037\060\040\062\041" +
    "\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\050\uff91" +
    "\051\uff91\052\uff91\053\uff91\062\uff91\064\uff91\066\uff91\075" +
    "\uff91\001\002\000\064\010\uff99\014\uff99\017\uff99\020\uff99" +
    "\031\uff99\032\uff99\033\uff99\035\061\036\066\037\060\040" +
    "\062\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99" +
    "\050\uff99\051\uff99\052\uff99\053\uff99\062\uff99\064\uff99\066" +
    "\uff99\075\uff99\001\002\000\024\004\027\005\045\006\031" +
    "\007\036\030\042\033\025\047\033\056\037\057\040\001" +
    "\002\000\040\032\064\033\056\035\061\036\066\037\060" +
    "\040\062\041\070\042\057\043\053\044\065\045\063\046" +
    "\067\050\054\053\071\075\112\001\002\000\004\062\113" +
    "\001\002\000\016\022\044\023\046\024\047\025\043\026" +
    "\041\027\030\001\002\000\004\010\115\001\002\000\022" +
    "\002\uffdc\003\uffdc\007\uffdc\012\uffdc\015\uffdc\016\uffdc\021" +
    "\uffdc\076\uffdc\001\002\000\024\004\027\005\045\006\031" +
    "\007\036\030\042\033\025\047\033\056\037\057\040\001" +
    "\002\000\064\010\uff8c\014\uff8c\017\uff8c\020\uff8c\031\uff8c" +
    "\032\064\033\056\035\061\036\066\037\060\040\062\041" +
    "\070\042\057\043\053\044\065\045\063\046\067\050\uff8c" +
    "\051\uff8c\052\uff8c\053\uff8c\062\uff8c\064\uff8c\066\uff8c\075" +
    "\uff8c\001\002\000\064\010\uff8a\014\uff8a\017\uff8a\020\uff8a" +
    "\031\uff8a\032\064\033\056\035\061\036\066\037\060\040" +
    "\062\041\070\042\057\043\053\044\065\045\063\046\067" +
    "\050\054\051\uff8a\052\uff8a\053\071\062\uff8a\064\uff8a\066" +
    "\uff8a\075\uff8a\001\002\000\064\010\uff90\014\uff90\017\uff90" +
    "\020\uff90\031\uff90\032\064\033\056\035\061\036\066\037" +
    "\060\040\062\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90" +
    "\046\uff90\050\uff90\051\uff90\052\uff90\053\uff90\062\uff90\064" +
    "\uff90\066\uff90\075\uff90\001\002\000\040\031\123\032\064" +
    "\033\056\035\061\036\066\037\060\040\062\041\070\042" +
    "\057\043\053\044\065\045\063\046\067\050\054\053\071" +
    "\001\002\000\064\010\uff94\014\uff94\017\uff94\020\uff94\031" +
    "\uff94\032\uff94\033\uff94\035\uff94\036\uff94\037\uff94\040\uff94" +
    "\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\050" +
    "\uff94\051\uff94\052\uff94\053\uff94\062\uff94\064\uff94\066\uff94" +
    "\075\uff94\001\002\000\024\004\027\005\045\006\031\007" +
    "\036\030\042\033\025\047\033\056\037\057\040\001\002" +
    "\000\040\032\064\033\056\035\061\036\066\037\060\040" +
    "\062\041\070\042\057\043\053\044\065\045\063\046\067" +
    "\050\054\053\071\075\126\001\002\000\064\010\uff9c\014" +
    "\uff9c\017\uff9c\020\uff9c\031\uff9c\032\uff9c\033\uff9c\035\uff9c" +
    "\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044" +
    "\uff9c\045\uff9c\046\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c" +
    "\062\uff9c\064\uff9c\066\uff9c\075\uff9c\001\002\000\022\002" +
    "\uffde\003\uffde\007\uffde\012\uffde\015\uffde\016\uffde\021\uffde" +
    "\076\uffde\001\002\000\064\010\uff8d\014\uff8d\017\uff8d\020" +
    "\uff8d\031\uff8d\032\064\033\056\035\061\036\066\037\060" +
    "\040\062\041\070\042\057\043\053\044\065\045\063\046" +
    "\067\050\uff8d\051\uff8d\052\uff8d\053\uff8d\062\uff8d\064\uff8d" +
    "\066\uff8d\075\uff8d\001\002\000\004\014\132\001\002\000" +
    "\004\014\133\001\002\000\024\004\027\005\045\006\031" +
    "\007\036\030\042\033\025\047\033\056\037\057\040\001" +
    "\002\000\040\010\135\032\064\033\056\035\061\036\066" +
    "\037\060\040\062\041\070\042\057\043\053\044\065\045" +
    "\063\046\067\050\054\053\071\001\002\000\022\002\uffdd" +
    "\003\uffdd\007\uffdd\012\uffdd\015\uffdd\016\uffdd\021\uffdd\076" +
    "\uffdd\001\002\000\064\010\uff9b\014\uff9b\017\uff9b\020\uff9b" +
    "\031\uff9b\032\uff9b\033\uff9b\035\uff9b\036\uff9b\037\uff9b\040" +
    "\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b" +
    "\050\uff9b\051\uff9b\052\uff9b\053\uff9b\062\uff9b\064\uff9b\066" +
    "\uff9b\075\uff9b\001\002\000\010\017\uffce\020\uffce\046\uffce" +
    "\001\002\000\022\002\uffdb\003\uffdb\007\uffdb\012\uffdb\015" +
    "\uffdb\016\uffdb\021\uffdb\076\uffdb\001\002\000\004\030\142" +
    "\001\002\000\006\007\144\015\143\001\002\000\004\007" +
    "\u010e\001\002\000\006\017\uffe1\020\uffe1\001\002\000\006" +
    "\017\u010c\020\u0108\001\002\000\006\010\150\031\151\001" +
    "\002\000\006\017\uffe3\020\uffe3\001\002\000\006\007\144" +
    "\015\143\001\002\000\004\017\152\001\002\000\020\007" +
    "\154\022\153\023\156\024\161\025\160\026\155\027\162" +
    "\001\002\000\006\010\uffc6\031\uffc6\001\002\000\006\010" +
    "\uffc0\031\uffc0\001\002\000\006\010\uffc4\031\uffc4\001\002" +
    "\000\006\010\uffc5\031\uffc5\001\002\000\004\010\163\001" +
    "\002\000\006\010\uffc2\031\uffc2\001\002\000\006\010\uffc1" +
    "\031\uffc1\001\002\000\006\010\uffc3\031\uffc3\001\002\000" +
    "\006\012\165\015\164\001\002\000\006\003\352\007\014" +
    "\001\002\000\026\003\210\007\177\011\175\060\176\061" +
    "\207\063\172\065\212\067\213\071\205\072\167\001\002" +
    "\000\030\003\210\007\177\011\175\013\347\060\176\061" +
    "\207\063\172\065\212\067\213\071\205\072\167\001\002" +
    "\000\004\010\uffa6\001\002\000\004\010\330\001\002\000" +
    "\004\010\331\001\002\000\024\004\027\005\045\006\031" +
    "\007\036\030\042\033\025\047\033\056\037\057\040\001" +
    "\002\000\054\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4" +
    "\011\ufff4\013\ufff4\030\ufff4\033\ufff4\047\ufff4\052\ufff4\056" +
    "\ufff4\057\ufff4\060\ufff4\061\ufff4\063\ufff4\065\ufff4\067\ufff4" +
    "\070\ufff4\071\ufff4\072\ufff4\001\002\000\032\003\ufff8\007" +
    "\ufff8\011\ufff8\013\ufff8\060\ufff8\061\ufff8\063\ufff8\065\ufff8" +
    "\067\ufff8\070\ufff8\071\ufff8\072\ufff8\001\002\000\004\030" +
    "\332\001\002\000\024\004\027\005\045\006\031\007\036" +
    "\030\042\033\025\047\033\056\037\057\040\001\002\000" +
    "\006\017\271\074\270\001\002\000\004\010\267\001\002" +
    "\000\004\010\266\001\002\000\054\003\ufff3\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\011\ufff3\013\ufff3\030\ufff3\033\ufff3" +
    "\047\ufff3\052\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\063" +
    "\ufff3\065\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\001\002" +
    "\000\054\003\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011" +
    "\ufff1\013\ufff1\030\ufff1\033\ufff1\047\ufff1\052\ufff1\056\ufff1" +
    "\057\ufff1\060\ufff1\061\ufff1\063\ufff1\065\ufff1\067\ufff1\070" +
    "\ufff1\071\ufff1\072\ufff1\001\002\000\054\003\ufff0\004\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\011\ufff0\013\ufff0\030\ufff0\033" +
    "\ufff0\047\ufff0\052\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0" +
    "\063\ufff0\065\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0\001" +
    "\002\000\004\010\uffa7\001\002\000\004\010\265\001\002" +
    "\000\024\004\027\005\045\006\031\007\036\030\042\033" +
    "\025\047\033\056\037\057\040\001\002\000\056\003\uffec" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\010\235\011\uffec\013" +
    "\uffec\030\uffec\033\uffec\047\uffec\052\uffec\056\uffec\057\uffec" +
    "\060\uffec\061\uffec\063\uffec\065\uffec\067\uffec\070\uffec\071" +
    "\uffec\072\uffec\001\002\000\054\003\ufff2\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\011\ufff2\013\ufff2\030\ufff2\033\ufff2\047" +
    "\ufff2\052\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\063\ufff2" +
    "\065\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\001\002\000" +
    "\004\007\221\001\002\000\026\003\210\007\177\011\175" +
    "\060\176\061\207\063\172\065\212\067\213\071\205\072" +
    "\167\001\002\000\030\003\210\007\177\011\175\060\176" +
    "\061\207\063\172\065\212\067\213\070\216\071\205\072" +
    "\167\001\002\000\032\003\ufff9\007\ufff9\011\ufff9\013\ufff9" +
    "\060\ufff9\061\ufff9\063\ufff9\065\ufff9\067\ufff9\070\ufff9\071" +
    "\ufff9\072\ufff9\001\002\000\024\004\027\005\045\006\031" +
    "\007\036\030\042\033\025\047\033\056\037\057\040\001" +
    "\002\000\040\010\220\032\064\033\056\035\061\036\066" +
    "\037\060\040\062\041\070\042\057\043\053\044\065\045" +
    "\063\046\067\050\054\053\071\001\002\000\054\003\uffa8" +
    "\004\uffa8\005\uffa8\006\uffa8\007\uffa8\011\uffa8\013\uffa8\030" +
    "\uffa8\033\uffa8\047\uffa8\052\uffa8\056\uffa8\057\uffa8\060\uffa8" +
    "\061\uffa8\063\uffa8\065\uffa8\067\uffa8\070\uffa8\071\uffa8\072" +
    "\uffa8\001\002\000\004\017\222\001\002\000\004\046\223" +
    "\001\002\000\024\004\027\005\045\006\031\007\036\030" +
    "\042\033\025\047\033\056\037\057\040\001\002\000\040" +
    "\032\064\033\056\035\061\036\066\037\060\040\062\041" +
    "\070\042\057\043\053\044\065\045\063\046\067\050\054" +
    "\053\071\066\225\001\002\000\024\004\027\005\045\006" +
    "\031\007\036\030\042\033\025\047\033\056\037\057\040" +
    "\001\002\000\040\032\064\033\056\035\061\036\066\037" +
    "\060\040\062\041\070\042\057\043\053\044\065\045\063" +
    "\046\067\050\054\053\071\064\227\001\002\000\030\003" +
    "\210\007\177\011\175\012\231\060\176\061\207\063\172" +
    "\065\212\067\213\071\205\072\167\001\002\000\054\003" +
    "\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\011\uffaa\013\uffaa" +
    "\030\uffaa\033\uffaa\047\uffaa\052\uffaa\056\uffaa\057\uffaa\060" +
    "\uffaa\061\uffaa\063\uffaa\065\uffaa\067\uffaa\070\uffaa\071\uffaa" +
    "\072\uffaa\001\002\000\026\003\210\007\177\011\175\060" +
    "\176\061\207\063\172\065\212\067\213\071\205\072\167" +
    "\001\002\000\030\003\210\007\177\011\175\013\233\060" +
    "\176\061\207\063\172\065\212\067\213\071\205\072\167" +
    "\001\002\000\004\010\234\001\002\000\054\003\uffa9\004" +
    "\uffa9\005\uffa9\006\uffa9\007\uffa9\011\uffa9\013\uffa9\030\uffa9" +
    "\033\uffa9\047\uffa9\052\uffa9\056\uffa9\057\uffa9\060\uffa9\061" +
    "\uffa9\063\uffa9\065\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9" +
    "\001\002\000\054\003\uffed\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\011\uffed\013\uffed\030\uffed\033\uffed\047\uffed\052\uffed" +
    "\056\uffed\057\uffed\060\uffed\061\uffed\063\uffed\065\uffed\067" +
    "\uffed\070\uffed\071\uffed\072\uffed\001\002\000\040\032\064" +
    "\033\056\035\061\036\066\037\060\040\062\041\070\042" +
    "\057\043\053\044\065\045\063\046\067\050\054\053\071" +
    "\062\237\001\002\000\024\004\027\005\045\006\031\007" +
    "\036\030\042\033\025\047\033\056\037\057\040\001\002" +
    "\000\026\004\027\005\045\006\031\007\036\030\042\033" +
    "\025\047\033\052\255\056\037\057\040\001\002\000\006" +
    "\017\245\020\244\001\002\000\026\004\uffb1\005\uffb1\006" +
    "\uffb1\007\uffb1\030\uffb1\033\uffb1\047\uffb1\052\uffb1\056\uffb1" +
    "\057\uffb1\001\002\000\042\017\uffad\020\uffad\032\064\033" +
    "\056\035\061\036\066\037\060\040\062\041\070\042\057" +
    "\043\053\044\065\045\063\046\067\050\054\053\071\001" +
    "\002\000\024\004\027\005\045\006\031\007\036\030\042" +
    "\033\025\047\033\056\037\057\040\001\002\000\030\003" +
    "\210\007\177\011\175\012\247\060\176\061\207\063\172" +
    "\065\212\067\213\071\205\072\167\001\002\000\026\004" +
    "\uffaf\005\uffaf\006\uffaf\007\uffaf\030\uffaf\033\uffaf\047\uffaf" +
    "\052\uffaf\056\uffaf\057\uffaf\001\002\000\026\003\210\007" +
    "\177\011\175\060\176\061\207\063\172\065\212\067\213" +
    "\071\205\072\167\001\002\000\030\003\210\007\177\011" +
    "\175\013\251\060\176\061\207\063\172\065\212\067\213" +
    "\071\205\072\167\001\002\000\004\010\252\001\002\000" +
    "\026\004\uffb0\005\uffb0\006\uffb0\007\uffb0\030\uffb0\033\uffb0" +
    "\047\uffb0\052\uffb0\056\uffb0\057\uffb0\001\002\000\042\017" +
    "\uffae\020\uffae\032\064\033\056\035\061\036\066\037\060" +
    "\040\062\041\070\042\057\043\053\044\065\045\063\046" +
    "\067\050\054\053\071\001\002\000\026\004\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\030\uffb2\033\uffb2\047\uffb2\052\uffb2\056" +
    "\uffb2\057\uffb2\001\002\000\030\003\210\007\177\011\175" +
    "\012\257\060\176\061\207\063\172\065\212\067\213\071" +
    "\205\072\167\001\002\000\004\013\263\001\002\000\026" +
    "\003\210\007\177\011\175\060\176\061\207\063\172\065" +
    "\212\067\213\071\205\072\167\001\002\000\030\003\210" +
    "\007\177\011\175\013\261\060\176\061\207\063\172\065" +
    "\212\067\213\071\205\072\167\001\002\000\004\010\262" +
    "\001\002\000\054\003\uffb4\004\uffb4\005\uffb4\006\uffb4\007" +
    "\uffb4\011\uffb4\013\uffb4\030\uffb4\033\uffb4\047\uffb4\052\uffb4" +
    "\056\uffb4\057\uffb4\060\uffb4\061\uffb4\063\uffb4\065\uffb4\067" +
    "\uffb4\070\uffb4\071\uffb4\072\uffb4\001\002\000\004\010\264" +
    "\001\002\000\054\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007" +
    "\uffb3\011\uffb3\013\uffb3\030\uffb3\033\uffb3\047\uffb3\052\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\063\uffb3\065\uffb3\067" +
    "\uffb3\070\uffb3\071\uffb3\072\uffb3\001\002\000\054\003\uffef" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef\013\uffef\030" +
    "\uffef\033\uffef\047\uffef\052\uffef\056\uffef\057\uffef\060\uffef" +
    "\061\uffef\063\uffef\065\uffef\067\uffef\070\uffef\071\uffef\072" +
    "\uffef\001\002\000\054\003\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\011\ufff6\013\ufff6\030\ufff6\033\ufff6\047\ufff6\052" +
    "\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\063\ufff6\065\ufff6" +
    "\067\ufff6\070\ufff6\071\ufff6\072\ufff6\001\002\000\054\003" +
    "\uffee\004\uffee\005\uffee\006\uffee\007\uffee\011\uffee\013\uffee" +
    "\030\uffee\033\uffee\047\uffee\052\uffee\056\uffee\057\uffee\060" +
    "\uffee\061\uffee\063\uffee\065\uffee\067\uffee\070\uffee\071\uffee" +
    "\072\uffee\001\002\000\024\004\027\005\045\006\031\007" +
    "\036\030\042\033\025\047\033\056\037\057\040\001\002" +
    "\000\004\046\272\001\002\000\024\004\027\005\045\006" +
    "\031\007\036\030\042\033\025\047\033\056\037\057\040" +
    "\001\002\000\042\010\uffbc\032\064\033\056\035\061\036" +
    "\066\037\060\040\062\041\070\042\057\043\053\044\065" +
    "\045\063\046\067\050\054\052\uffbc\053\071\001\002\000" +
    "\040\032\064\033\056\035\061\036\066\037\060\040\062" +
    "\041\070\042\057\043\053\044\065\045\063\046\067\050" +
    "\054\053\071\075\275\001\002\000\004\017\276\001\002" +
    "\000\004\046\277\001\002\000\024\004\027\005\045\006" +
    "\031\007\036\030\042\033\025\047\033\056\037\057\040" +
    "\001\002\000\042\010\uffbb\032\064\033\056\035\061\036" +
    "\066\037\060\040\062\041\070\042\057\043\053\044\065" +
    "\045\063\046\067\050\054\052\uffbb\053\071\001\002\000" +
    "\040\032\064\033\056\035\061\036\066\037\060\040\062" +
    "\041\070\042\057\043\053\044\065\045\063\046\067\050" +
    "\054\051\302\053\071\001\002\000\030\003\210\007\177" +
    "\011\175\012\307\060\176\061\207\063\172\065\212\067" +
    "\213\071\205\072\167\001\002\000\006\010\331\052\uffeb" +
    "\001\002\000\006\010\330\052\uffe9\001\002\000\054\003" +
    "\uffba\004\uffba\005\uffba\006\uffba\007\uffba\011\uffba\013\uffba" +
    "\030\uffba\033\uffba\047\uffba\052\uffba\056\uffba\057\uffba\060" +
    "\uffba\061\uffba\063\uffba\065\uffba\067\uffba\070\uffba\071\uffba" +
    "\072\uffba\001\002\000\006\010\266\052\uffea\001\002\000" +
    "\026\003\210\007\177\011\175\060\176\061\207\063\172" +
    "\065\212\067\213\071\205\072\167\001\002\000\004\052" +
    "\311\001\002\000\030\003\210\007\177\011\175\012\313" +
    "\060\176\061\207\063\172\065\212\067\213\071\205\072" +
    "\167\001\002\000\054\003\uffb7\004\uffb7\005\uffb7\006\uffb7" +
    "\007\uffb7\011\uffb7\013\uffb7\030\uffb7\033\uffb7\047\uffb7\052" +
    "\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\063\uffb7\065\uffb7" +
    "\067\uffb7\070\uffb7\071\uffb7\072\uffb7\001\002\000\026\003" +
    "\210\007\177\011\175\060\176\061\207\063\172\065\212" +
    "\067\213\071\205\072\167\001\002\000\030\003\210\007" +
    "\177\011\175\013\315\060\176\061\207\063\172\065\212" +
    "\067\213\071\205\072\167\001\002\000\004\010\316\001" +
    "\002\000\054\003\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6" +
    "\011\uffb6\013\uffb6\030\uffb6\033\uffb6\047\uffb6\052\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\063\uffb6\065\uffb6\067\uffb6" +
    "\070\uffb6\071\uffb6\072\uffb6\001\002\000\030\003\210\007" +
    "\177\011\175\013\320\060\176\061\207\063\172\065\212" +
    "\067\213\071\205\072\167\001\002\000\006\010\321\052" +
    "\322\001\002\000\054\003\uffb9\004\uffb9\005\uffb9\006\uffb9" +
    "\007\uffb9\011\uffb9\013\uffb9\030\uffb9\033\uffb9\047\uffb9\052" +
    "\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\063\uffb9\065\uffb9" +
    "\067\uffb9\070\uffb9\071\uffb9\072\uffb9\001\002\000\030\003" +
    "\210\007\177\011\175\012\324\060\176\061\207\063\172" +
    "\065\212\067\213\071\205\072\167\001\002\000\054\003" +
    "\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\011\uffb8\013\uffb8" +
    "\030\uffb8\033\uffb8\047\uffb8\052\uffb8\056\uffb8\057\uffb8\060" +
    "\uffb8\061\uffb8\063\uffb8\065\uffb8\067\uffb8\070\uffb8\071\uffb8" +
    "\072\uffb8\001\002\000\026\003\210\007\177\011\175\060" +
    "\176\061\207\063\172\065\212\067\213\071\205\072\167" +
    "\001\002\000\030\003\210\007\177\011\175\013\326\060" +
    "\176\061\207\063\172\065\212\067\213\071\205\072\167" +
    "\001\002\000\004\010\327\001\002\000\054\003\uffb5\004" +
    "\uffb5\005\uffb5\006\uffb5\007\uffb5\011\uffb5\013\uffb5\030\uffb5" +
    "\033\uffb5\047\uffb5\052\uffb5\056\uffb5\057\uffb5\060\uffb5\061" +
    "\uffb5\063\uffb5\065\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5" +
    "\001\002\000\054\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007" +
    "\ufff5\011\ufff5\013\ufff5\030\ufff5\033\ufff5\047\ufff5\052\ufff5" +
    "\056\ufff5\057\ufff5\060\ufff5\061\ufff5\063\ufff5\065\ufff5\067" +
    "\ufff5\070\ufff5\071\ufff5\072\ufff5\001\002\000\054\003\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\011\ufff7\013\ufff7\030" +
    "\ufff7\033\ufff7\047\ufff7\052\ufff7\056\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\063\ufff7\065\ufff7\067\ufff7\070\ufff7\071\ufff7\072" +
    "\ufff7\001\002\000\024\004\027\005\045\006\031\007\036" +
    "\030\042\033\025\047\033\056\037\057\040\001\002\000" +
    "\042\020\uffbd\031\uffbd\032\064\033\056\035\061\036\066" +
    "\037\060\040\062\041\070\042\057\043\053\044\065\045" +
    "\063\046\067\050\054\053\071\001\002\000\006\020\335" +
    "\031\336\001\002\000\024\004\027\005\045\006\031\007" +
    "\036\030\042\033\025\047\033\056\037\057\040\001\002" +
    "\000\006\010\uffbf\052\uffbf\001\002\000\042\020\uffbe\031" +
    "\uffbe\032\064\033\056\035\061\036\066\037\060\040\062" +
    "\041\070\042\057\043\053\044\065\045\063\046\067\050" +
    "\054\053\071\001\002\000\040\032\064\033\056\035\061" +
    "\036\066\037\060\040\062\041\070\042\057\043\053\044" +
    "\065\045\063\046\067\050\054\053\071\064\341\001\002" +
    "\000\030\003\210\007\177\011\175\012\343\060\176\061" +
    "\207\063\172\065\212\067\213\071\205\072\167\001\002" +
    "\000\054\003\uffab\004\uffab\005\uffab\006\uffab\007\uffab\011" +
    "\uffab\013\uffab\030\uffab\033\uffab\047\uffab\052\uffab\056\uffab" +
    "\057\uffab\060\uffab\061\uffab\063\uffab\065\uffab\067\uffab\070" +
    "\uffab\071\uffab\072\uffab\001\002\000\026\003\210\007\177" +
    "\011\175\060\176\061\207\063\172\065\212\067\213\071" +
    "\205\072\167\001\002\000\030\003\210\007\177\011\175" +
    "\013\345\060\176\061\207\063\172\065\212\067\213\071" +
    "\205\072\167\001\002\000\004\010\346\001\002\000\054" +
    "\003\uffac\004\uffac\005\uffac\006\uffac\007\uffac\011\uffac\013" +
    "\uffac\030\uffac\033\uffac\047\uffac\052\uffac\056\uffac\057\uffac" +
    "\060\uffac\061\uffac\063\uffac\065\uffac\067\uffac\070\uffac\071" +
    "\uffac\072\uffac\001\002\000\004\010\350\001\002\000\016" +
    "\002\uffe7\012\uffe7\015\uffe7\016\uffe7\021\uffe7\076\uffe7\001" +
    "\002\000\022\002\uffd4\003\uffd4\007\uffd4\012\uffd4\015\uffd4" +
    "\016\uffd4\021\uffd4\076\uffd4\001\002\000\024\002\uffcf\003" +
    "\uffcf\007\uffcf\010\u0106\012\uffcf\015\uffcf\016\uffcf\021\uffcf" +
    "\076\uffcf\001\002\000\006\017\362\020\022\001\002\000" +
    "\010\003\352\007\014\012\356\001\002\000\022\002\uffd5" +
    "\003\uffd5\007\uffd5\012\uffd5\015\uffd5\016\uffd5\021\uffd5\076" +
    "\uffd5\001\002\000\026\003\210\007\177\011\175\060\176" +
    "\061\207\063\172\065\212\067\213\071\205\072\167\001" +
    "\002\000\030\003\210\007\177\011\175\013\360\060\176" +
    "\061\207\063\172\065\212\067\213\071\205\072\167\001" +
    "\002\000\004\010\361\001\002\000\016\002\uffe8\012\uffe8" +
    "\015\uffe8\016\uffe8\021\uffe8\076\uffe8\001\002\000\042\004" +
    "\027\005\045\006\031\007\364\022\153\023\156\024\161" +
    "\025\160\026\155\027\162\030\042\033\025\047\033\056" +
    "\037\057\040\073\366\001\002\000\040\014\u0101\032\064" +
    "\033\056\035\061\036\066\037\060\040\062\041\070\042" +
    "\057\043\053\044\065\045\063\046\067\050\054\053\071" +
    "\001\002\000\044\010\uffc0\014\uff9d\032\uff9d\033\uff9d\035" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\050\uff9d\053\uff9d\074\124\001" +
    "\002\000\004\010\u0100\001\002\000\004\074\367\001\002" +
    "\000\024\004\027\005\045\006\031\007\036\030\042\033" +
    "\025\047\033\056\037\057\040\001\002\000\040\014\371" +
    "\032\064\033\056\035\061\036\066\037\060\040\062\041" +
    "\070\042\057\043\053\044\065\045\063\046\067\050\054" +
    "\053\071\001\002\000\004\014\372\001\002\000\024\004" +
    "\027\005\045\006\031\007\036\030\042\033\025\047\033" +
    "\056\037\057\040\001\002\000\040\032\064\033\056\035" +
    "\061\036\066\037\060\040\062\041\070\042\057\043\053" +
    "\044\065\045\063\046\067\050\054\053\071\075\374\001" +
    "\002\000\004\062\375\001\002\000\020\007\154\022\153" +
    "\023\156\024\161\025\160\026\155\027\162\001\002\000" +
    "\004\010\377\001\002\000\022\002\uffd1\003\uffd1\007\uffd1" +
    "\012\uffd1\015\uffd1\016\uffd1\021\uffd1\076\uffd1\001\002\000" +
    "\022\002\uffd3\003\uffd3\007\uffd3\012\uffd3\015\uffd3\016\uffd3" +
    "\021\uffd3\076\uffd3\001\002\000\004\014\u0102\001\002\000" +
    "\004\014\u0103\001\002\000\024\004\027\005\045\006\031" +
    "\007\036\030\042\033\025\047\033\056\037\057\040\001" +
    "\002\000\040\010\u0105\032\064\033\056\035\061\036\066" +
    "\037\060\040\062\041\070\042\057\043\053\044\065\045" +
    "\063\046\067\050\054\053\071\001\002\000\022\002\uffd2" +
    "\003\uffd2\007\uffd2\012\uffd2\015\uffd2\016\uffd2\021\uffd2\076" +
    "\uffd2\001\002\000\022\002\uffd0\003\uffd0\007\uffd0\012\uffd0" +
    "\015\uffd0\016\uffd0\021\uffd0\076\uffd0\001\002\000\006\017" +
    "\u0109\020\u0108\001\002\000\006\007\144\015\143\001\002" +
    "\000\020\007\154\022\153\023\156\024\161\025\160\026" +
    "\155\027\162\001\002\000\006\010\uffe6\031\uffe6\001\002" +
    "\000\006\017\uffe4\020\uffe4\001\002\000\020\007\154\022" +
    "\153\023\156\024\161\025\160\026\155\027\162\001\002" +
    "\000\006\010\uffe5\031\uffe5\001\002\000\006\017\uffe2\020" +
    "\uffe2\001\002\000\030\003\210\007\177\011\175\013\u0110" +
    "\060\176\061\207\063\172\065\212\067\213\071\205\072" +
    "\167\001\002\000\004\014\u0111\001\002\000\016\002\ufffa" +
    "\012\ufffa\015\ufffa\016\ufffa\021\ufffa\076\ufffa\001\002\000" +
    "\004\002\001\001\002\000\016\002\000\012\000\015\000" +
    "\016\000\021\000\076\000\001\002\000\022\002\ufffc\003" +
    "\352\007\014\012\ufffc\015\ufffc\016\ufffc\021\ufffc\076\ufffc" +
    "\001\002\000\004\046\u011d\001\002\000\022\002\uffd6\007" +
    "\uffd6\010\u011c\012\uffd6\015\uffd6\016\uffd6\021\uffd6\076\uffd6" +
    "\001\002\000\020\002\ufffd\007\u0118\012\ufffd\015\ufffd\016" +
    "\ufffd\021\ufffd\076\ufffd\001\002\000\004\046\u0119\001\002" +
    "\000\024\004\027\005\045\006\031\007\036\030\042\033" +
    "\025\047\033\056\037\057\040\001\002\000\040\010\u011b" +
    "\032\064\033\056\035\061\036\066\037\060\040\062\041" +
    "\070\042\057\043\053\044\065\045\063\046\067\050\054" +
    "\053\071\001\002\000\020\002\uffd9\007\uffd9\012\uffd9\015" +
    "\uffd9\016\uffd9\021\uffd9\076\uffd9\001\002\000\020\002\uffd7" +
    "\007\uffd7\012\uffd7\015\uffd7\016\uffd7\021\uffd7\076\uffd7\001" +
    "\002\000\024\004\027\005\045\006\031\007\036\030\042" +
    "\033\025\047\033\056\037\057\040\001\002\000\040\010" +
    "\u011f\032\064\033\056\035\061\036\066\037\060\040\062" +
    "\041\070\042\057\043\053\044\065\045\063\046\067\050" +
    "\054\053\071\001\002\000\020\002\uffd8\007\uffd8\012\uffd8" +
    "\015\uffd8\016\uffd8\021\uffd8\076\uffd8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\010\002\010\004\006\037\003\001\001\000" +
    "\002\001\001\000\004\005\u0116\001\001\000\010\010\u0113" +
    "\012\350\024\352\001\001\000\006\002\u0112\037\003\001" +
    "\001\000\032\003\u010e\015\173\025\170\026\200\027\172" +
    "\030\167\031\201\032\210\033\202\034\203\035\205\036" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\017\011\016\024\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\020\024\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\013\033\017\031\020\034\021\023\022\025" +
    "\001\001\000\002\001\001\000\012\017\135\020\034\021" +
    "\023\022\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\127\020\034\021\023\022\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\121" +
    "\020\034\021\023\022\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\051\020\034\021" +
    "\023\022\025\001\001\000\002\001\001\000\012\017\120" +
    "\020\034\021\023\022\025\001\001\000\012\017\116\020" +
    "\034\021\023\022\025\001\001\000\002\001\001\000\012" +
    "\017\106\020\034\021\023\022\025\001\001\000\012\017" +
    "\105\020\034\021\023\022\025\001\001\000\012\017\104" +
    "\020\034\021\023\022\025\001\001\000\012\017\103\020" +
    "\034\021\023\022\025\001\001\000\012\017\102\020\034" +
    "\021\023\022\025\001\001\000\012\017\101\020\034\021" +
    "\023\022\025\001\001\000\012\017\100\020\034\021\023" +
    "\022\025\001\001\000\012\017\077\020\034\021\023\022" +
    "\025\001\001\000\012\017\076\020\034\021\023\022\025" +
    "\001\001\000\012\017\075\020\034\021\023\022\025\001" +
    "\001\000\012\017\074\020\034\021\023\022\025\001\001" +
    "\000\012\017\071\020\034\021\023\022\025\001\001\000" +
    "\002\001\001\000\012\017\073\020\034\021\023\022\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\110\020\034\021\023\022\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\117\020\034\021" +
    "\023\022\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\017\124\020\034\021\023\022\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\133" +
    "\020\034\021\023\022\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\040\145\041\144\042" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\041" +
    "\u0106\042\146\001\001\000\002\001\001\000\004\014\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\353\012\350\024\352\001\001\000\032\003\165" +
    "\015\173\025\170\026\200\027\172\030\167\031\201\032" +
    "\210\033\202\034\203\035\205\036\177\001\001\000\030" +
    "\015\214\025\170\026\200\027\172\030\167\031\201\032" +
    "\210\033\202\034\203\035\205\036\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\337\020\034\021\023\022\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\300\020" +
    "\034\021\023\022\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\017\235\020\034\021\023\022\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\213\015\173\025\170\026\200\027\172\030\167\031" +
    "\201\032\210\033\202\034\203\035\205\036\177\001\001" +
    "\000\030\015\214\025\170\026\200\027\172\030\167\031" +
    "\201\032\210\033\202\034\203\035\205\036\177\001\001" +
    "\000\002\001\001\000\012\017\216\020\034\021\023\022" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\223\020\034\021" +
    "\023\022\025\001\001\000\002\001\001\000\012\017\225" +
    "\020\034\021\023\022\025\001\001\000\002\001\001\000" +
    "\030\015\227\025\170\026\200\027\172\030\167\031\201" +
    "\032\210\033\202\034\203\035\205\036\177\001\001\000" +
    "\002\001\001\000\032\003\231\015\173\025\170\026\200" +
    "\027\172\030\167\031\201\032\210\033\202\034\203\035" +
    "\205\036\177\001\001\000\030\015\214\025\170\026\200" +
    "\027\172\030\167\031\201\032\210\033\202\034\203\035" +
    "\205\036\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\017\242\020" +
    "\034\021\023\022\025\043\241\044\237\045\240\001\001" +
    "\000\016\017\242\020\034\021\023\022\025\043\253\045" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\252\020\034\021\023\022\025\001" +
    "\001\000\030\015\245\025\170\026\200\027\172\030\167" +
    "\031\201\032\210\033\202\034\203\035\205\036\177\001" +
    "\001\000\002\001\001\000\032\003\247\015\173\025\170" +
    "\026\200\027\172\030\167\031\201\032\210\033\202\034" +
    "\203\035\205\036\177\001\001\000\030\015\214\025\170" +
    "\026\200\027\172\030\167\031\201\032\210\033\202\034" +
    "\203\035\205\036\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\015" +
    "\255\025\170\026\200\027\172\030\167\031\201\032\210" +
    "\033\202\034\203\035\205\036\177\001\001\000\002\001" +
    "\001\000\032\003\257\015\173\025\170\026\200\027\172" +
    "\030\167\031\201\032\210\033\202\034\203\035\205\036" +
    "\177\001\001\000\030\015\214\025\170\026\200\027\172" +
    "\030\167\031\201\032\210\033\202\034\203\035\205\036" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\273\020\034\021\023" +
    "\022\025\001\001\000\002\001\001\000\012\017\272\020" +
    "\034\021\023\022\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\277\020\034\021\023\022\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\015\304\016\307\025\302\026" +
    "\305\027\172\030\303\031\201\032\210\033\202\034\203" +
    "\035\205\036\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\316" +
    "\015\173\025\170\026\200\027\172\030\167\031\201\032" +
    "\210\033\202\034\203\035\205\036\177\001\001\000\002" +
    "\001\001\000\030\015\311\025\170\026\200\027\172\030" +
    "\167\031\201\032\210\033\202\034\203\035\205\036\177" +
    "\001\001\000\002\001\001\000\032\003\313\015\173\025" +
    "\170\026\200\027\172\030\167\031\201\032\210\033\202" +
    "\034\203\035\205\036\177\001\001\000\030\015\214\025" +
    "\170\026\200\027\172\030\167\031\201\032\210\033\202" +
    "\034\203\035\205\036\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\015\214\025\170\026\200\027\172" +
    "\030\167\031\201\032\210\033\202\034\203\035\205\036" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\015\322\025\170\026\200\027\172\030\167\031\201\032" +
    "\210\033\202\034\203\035\205\036\177\001\001\000\002" +
    "\001\001\000\032\003\324\015\173\025\170\026\200\027" +
    "\172\030\167\031\201\032\210\033\202\034\203\035\205" +
    "\036\177\001\001\000\030\015\214\025\170\026\200\027" +
    "\172\030\167\031\201\032\210\033\202\034\203\035\205" +
    "\036\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\017\332\020\034" +
    "\021\023\022\025\023\333\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\336\020\034\021\023\022\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\015\341\025\170\026\200\027\172\030\167" +
    "\031\201\032\210\033\202\034\203\035\205\036\177\001" +
    "\001\000\002\001\001\000\032\003\343\015\173\025\170" +
    "\026\200\027\172\030\167\031\201\032\210\033\202\034" +
    "\203\035\205\036\177\001\001\000\030\015\214\025\170" +
    "\026\200\027\172\030\167\031\201\032\210\033\202\034" +
    "\203\035\205\036\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\354" +
    "\024\352\001\001\000\002\001\001\000\032\003\356\015" +
    "\173\025\170\026\200\027\172\030\167\031\201\032\210" +
    "\033\202\034\203\035\205\036\177\001\001\000\030\015" +
    "\214\025\170\026\200\027\172\030\167\031\201\032\210" +
    "\033\202\034\203\035\205\036\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\364\017\362\020\034" +
    "\021\023\022\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\367" +
    "\020\034\021\023\022\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\372\020\034\021\023\022\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\375\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\017" +
    "\u0103\020\034\021\023\022\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\u010a\001\001\000\004\014\u0109\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\u010c\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\015\214\025\170" +
    "\026\200\027\172\030\167\031\201\032\210\033\202\034" +
    "\203\035\205\036\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\354\024\352\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\u0119\020" +
    "\034\021\023\022\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\u011d\020\034\021" +
    "\023\022\025\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= cuerpo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // cuerpo ::= cuerpo estructura 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.addAll(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo ::= estructura 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>();  RESULT.addAll(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // estructura ::= TYPE declaraciones_tipos 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // estructura ::= CONST declaracion_constantes 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // estructura ::= VAR declaraciones_variables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // estructura ::= declaracion_funcion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(Collections.singletonList(a)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // estructura ::= BEGIN instrucciones END PUNTO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= writeln FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= asignacion_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= asignacion_array FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= sentencia_case 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= sentencia_while 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= sentencia_for 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= sentencia_repeat 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= transferencia_break FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= transferencia_continue FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion_fin ::= writeln 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion_fin ::= asignacion_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion_fin ::= asignacion_array 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_funcion ::= FUNCTION ID PAR1 lista_param_f PAR2 DOSPUNTOS tipos_dato_var FINCADENA VAR declaraciones_variables BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		          LinkedList<Instruccion> cuerpo = new LinkedList<>();
            cuerpo.addAll(d); // d es LinkedList<Instruccion>
            cuerpo.addAll(e);  
        RESULT = new DeclaracionFuncion(a, b, c, cuerpo, aleft, aright); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion_funcion ::= FUNCTION ID PAR1 lista_param_f PAR2 DOSPUNTOS tipos_dato_var FINCADENA BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionFuncion(a, b, c, d,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_param_f ::= lista_param_f FINCADENA lista_params_id DOSPUNTOS tipos_dato_var 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = a;
                    // Recorrer la lista de identificadores (b) y asignarles el tipo (c)
                    for (String id : b) {
                        var hm2 = new HashMap<String, Object>();
                        hm2.put("id", id);
                        hm2.put("tipo", c);
                        RESULT.add(hm2);
                    }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_param_f",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_param_f ::= lista_params_id DOSPUNTOS tipos_dato_var 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new LinkedList<HashMap>(); 
                    // Recorrer la lista de identificadores (a) y asignarles el tipo (b)
                    for (String id : a) {
                        var hm = new HashMap<String, Object>();
                        hm.put("id", id);
                        hm.put("tipo", b);
                        RESULT.add(hm);
                    }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_param_f",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_params_id ::= lista_params_id COMA tipo_id_f 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                                    RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_params_id",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_params_id ::= tipo_id_f 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<String>(); 
                                                    RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_params_id",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_id_f ::= VAR ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_id_f",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_id_f ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_id_f",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaraciones_tipos ::= declaraciones_tipos declaracion_tipo 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaraciones_tipos ::= declaracion_tipo 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion_tipo ::= listado_id IGUAL tipos_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipos(a, b,aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion_tipo ::= listado_id IGUAL expresion PUNTO PUNTO PUNTO expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipoSubRango(a, b,c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_tipo ::= listado_id IGUAL ARRAY CORCHETE1 expresion PUNTO PUNTO expresion CORCHETE2 OF tipos_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipoArreglo(a,b,c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion_tipo ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion_tipo ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracion_constantes ::= declaracion_constantes ID IGUAL expresion FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;  
                                    RESULT.add(new DeclaracionConstante(false, b,c, new Tipo(TipoDato.INTEGER),bleft, bright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracion_constantes ::= ID IGUAL expresion FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(new DeclaracionConstante(false, b,c, new Tipo(TipoDato.INTEGER),bleft, bright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion_constantes ::= error FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion_constantes ::= error 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaraciones_variables ::= declaraciones_variables declaracion_variables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_variables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaraciones_variables ::= declaracion_variables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_variables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion_variables ::= listado_id DOSPUNTOS tipos_dato_var FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DeclaracionVariable(true, a,null, b,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion_variables ::= listado_id DOSPUNTOS expresion PUNTO PUNTO PUNTO expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVarSubrango(a, b,c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion_variables ::= listado_id DOSPUNTOS ARRAY CORCHETE1 expresion PUNTO PUNTO expresion CORCHETE2 OF tipos_dato_var FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVarArreglo(a,b,c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion_variables ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion_variables ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // listado_id ::= listado_id COMA ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                                    RESULT.add(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listado_id",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listado_id ::= ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<String>(); 
                                                    RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listado_id",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipos_variable ::= INTEGER 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("integer",TipoDato.INTEGER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipos_variable ::= REAL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("real",TipoDato.REAL);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipos_variable ::= STRING 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("string",TipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipos_variable ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("char",TipoDato.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tipos_variable ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("boolean",TipoDato.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipos_variable ::= VOID 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("void",TipoDato.VOID);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipos_dato_var ::= INTEGER 
            {
              String RESULT =null;
		   RESULT="integer";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipos_dato_var ::= REAL 
            {
              String RESULT =null;
		   RESULT="real";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipos_dato_var ::= STRING 
            {
              String RESULT =null;
		   RESULT="string";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipos_dato_var ::= CHAR 
            {
              String RESULT =null;
		   RESULT="char";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipos_dato_var ::= BOOL 
            {
              String RESULT =null;
		   RESULT="boolean";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipos_dato_var ::= VOID 
            {
              String RESULT =null;
		   RESULT="void";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipos_dato_var ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // writeln ::= IMPRIMIR PAR1 expresion_conca PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Writeln(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion_conca ::= expresion_conca COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                                    RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_conca",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion_conca ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); 
                                                    RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_conca",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // asignacion_variable ::= ID DOSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // asignacion_array ::= ID CORCHETE1 expresion CORCHETE2 DOSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVarArreglo(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_array",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia_if ::= IF expresion THEN instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new SentenciaIf(a, new LinkedList<>(Collections.singletonList(b)), aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia_if ::= IF expresion THEN BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaIf(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia_if ::= IF expresion THEN BEGIN instrucciones END ELSE instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaIfElse(a, b,new LinkedList<>(Collections.singletonList(c)) , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia_if ::= IF expresion THEN instruccion_fin ELSE instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new SentenciaIfElse(a, new LinkedList<>(Collections.singletonList(b)), new LinkedList<>(Collections.singletonList(c)), aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia_if ::= IF expresion THEN instruccion_fin ELSE BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaIfElse(a, new LinkedList<>(Collections.singletonList(b)),c , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia_if ::= IF expresion THEN BEGIN instrucciones END ELSE BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaIfElse(a, b,c , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia_case ::= CASE expresion OF casos_case ELSE BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<CasoCase> b = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = new SentenciaCase(a, b, c, aleft, aright);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencia_case ::= CASE expresion OF casos_case ELSE instruccion END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<CasoCase> b = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = new SentenciaCase(a, b, new LinkedList<>(Collections.singletonList(c)), aleft, aright);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // casos_case ::= casos_case caso_case 
            {
              LinkedList<CasoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoCase> a = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoCase b = (CasoCase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_case",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // casos_case ::= caso_case 
            {
              LinkedList<CasoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoCase a = (CasoCase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_case",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // caso_case ::= expresiones_case DOSPUNTOS BEGIN instrucciones END FINCADENA 
            {
              CasoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new CasoCase(a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_case",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // caso_case ::= expresiones_case DOSPUNTOS instruccion 
            {
              CasoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CasoCase(a, new LinkedList<>(Collections.singletonList(b))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_case",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresiones_case ::= expresiones_case COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_case",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresiones_case ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_case",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencia_while ::= WHILE expresion DO BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencia_while ::= WHILE expresion DO instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaWhile(a,new LinkedList<>(Collections.singletonList(b)), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencia_for ::= FOR ID DOSPUNTOS IGUAL expresion TO expresion DO instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentenciaFor(new AsignacionVariable(a, b, aleft, aright), c, new AccesoVariable(a, aleft, aright) , new LinkedList<>(Collections.singletonList(d)),new AsignacionVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo("integer",TipoDato.INTEGER), aleft, aright) , aleft, aright), aleft, aright),aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencia_for ::= FOR ID DOSPUNTOS IGUAL expresion TO expresion DO BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  		   RESULT = new SentenciaFor(new AsignacionVariable(a, b, aleft, aright), c, new AccesoVariable(a, aleft, aright) , d,new AsignacionVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo("integer",TipoDato.INTEGER), aleft, aright) , aleft, aright), aleft, aright),aleft, aright);   
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentencia_repeat ::= REPEAT instrucciones UNTIL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaRepeat(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_repeat",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // transferencia_break ::= BREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = new SentenciaBreak(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_break",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // transferencia_continue ::= CONTINUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = new SentenciaContinue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_continue",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= expresionAritmetica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= expresionRelacional 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= expresionLogica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo("integer",TipoDato.INTEGER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo("real",TipoDato.REAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo("string",TipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo("char",TipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= BOOLEAN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo("boolean",TipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= ID CORCHETE1 expresion CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVarArreglo(a, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresionAritmetica ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionNegacionU(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresionAritmetica ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionSuma(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresionAritmetica ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionResta(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresionAritmetica ::= expresion MULT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionMultiplicacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresionAritmetica ::= expresion DIV expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDivision (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresionAritmetica ::= expresion DIVE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDiv(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresionAritmetica ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionModulo (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresionAritmetica ::= PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresionRelacional ::= expresion IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Igualacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expresionRelacional ::= expresion DIFERENTE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Diferenciacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresionRelacional ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresionRelacional ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expresionRelacional ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresionRelacional ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresionLogica ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorNot(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresionLogica ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAnd(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresionLogica ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOr(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresionLogica ::= expresion AND THEN expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAndThen(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresionLogica ::= expresion OR ELSE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOrThen(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
