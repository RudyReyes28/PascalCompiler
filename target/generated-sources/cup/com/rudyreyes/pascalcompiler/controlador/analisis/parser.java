
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.rudyreyes.pascalcompiler.controlador.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.rudyreyes.pascalcompiler.modelo.abstracto.Instruccion;
import com.rudyreyes.pascalcompiler.modelo.simbolo.*;
import java.util.HashMap;
import java.util.Collections;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.writeln.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.variables.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.arrays.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.sentenciasControl.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.tipos.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.ciclos.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.sentenciaTransferencia.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.funciones.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.nativo.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.aritmeticas.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.relacionales.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.logicas.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.variables.*;
import com.rudyreyes.pascalcompiler.modelo.errores.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\227\000\002\002\004\000\002\004\004\000\002\004" +
    "\003\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\003\000\002\002\003\000\002\002\006\000" +
    "\002\003\004\000\002\003\003\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\041" +
    "\016\000\002\041\014\000\002\041\015\000\002\041\013" +
    "\000\002\040\020\000\002\040\016\000\002\040\017\000" +
    "\002\040\015\000\002\042\007\000\002\042\005\000\002" +
    "\043\005\000\002\043\003\000\002\044\004\000\002\044" +
    "\003\000\002\047\006\000\002\047\005\000\002\046\006" +
    "\000\002\046\005\000\002\045\005\000\002\045\003\000" +
    "\002\007\004\000\002\007\003\000\002\011\006\000\002" +
    "\011\012\000\002\011\016\000\002\011\013\000\002\011" +
    "\003\000\002\011\004\000\002\011\003\000\002\050\010" +
    "\000\002\053\006\000\002\053\005\000\002\054\004\000" +
    "\002\054\010\000\002\054\014\000\002\054\011\000\002" +
    "\054\004\000\002\005\007\000\002\005\006\000\002\005" +
    "\004\000\002\005\003\000\002\010\004\000\002\010\003" +
    "\000\002\012\006\000\002\012\012\000\002\012\016\000" +
    "\002\012\013\000\002\012\003\000\002\012\004\000\002" +
    "\012\003\000\002\051\010\000\002\024\005\000\002\024" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\025\006\000\002\023\005\000\002\023\003" +
    "\000\002\026\006\000\002\031\010\000\002\030\011\000" +
    "\002\027\006\000\002\027\011\000\002\027\012\000\002" +
    "\027\010\000\002\027\013\000\002\027\015\000\002\032" +
    "\013\000\002\032\012\000\002\056\004\000\002\056\003" +
    "\000\002\055\010\000\002\055\005\000\002\057\005\000" +
    "\002\057\003\000\002\033\011\000\002\033\006\000\002" +
    "\034\013\000\002\034\016\000\002\035\007\000\002\036" +
    "\003\000\002\037\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\006\000\002\020" +
    "\004\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\022\004\000\002\022\005\000\002\022\005" +
    "\000\002\022\006\000\002\022\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u018e\000\016\012\013\015\006\016\015\021\007\076" +
    "\011\077\004\001\002\000\004\007\u0176\001\002\000\020" +
    "\002\ufffb\012\ufffb\015\ufffb\016\ufffb\021\ufffb\076\ufffb\077" +
    "\ufffb\001\002\000\006\003\357\007\355\001\002\000\006" +
    "\003\u0153\007\355\001\002\000\020\002\uffff\012\uffff\015" +
    "\uffff\016\uffff\021\uffff\076\uffff\077\uffff\001\002\000\004" +
    "\007\326\001\002\000\020\002\324\012\013\015\006\016" +
    "\015\021\007\076\011\077\004\001\002\000\026\003\150" +
    "\007\137\011\134\060\135\061\147\063\131\065\152\067" +
    "\153\071\144\072\125\001\002\000\020\002\ufffa\012\ufffa" +
    "\015\ufffa\016\ufffa\021\ufffa\076\ufffa\077\ufffa\001\002\000" +
    "\006\003\017\007\016\001\002\000\004\046\121\001\002" +
    "\000\024\002\uffbd\007\uffbd\010\120\012\uffbd\015\uffbd\016" +
    "\uffbd\021\uffbd\076\uffbd\077\uffbd\001\002\000\022\002\ufffd" +
    "\007\021\012\ufffd\015\ufffd\016\ufffd\021\ufffd\076\ufffd\077" +
    "\ufffd\001\002\000\004\046\022\001\002\000\024\004\025" +
    "\005\030\006\026\007\034\030\033\033\027\047\037\056" +
    "\031\057\040\001\002\000\064\010\uff88\014\uff88\017\uff88" +
    "\020\uff88\031\uff88\032\uff88\033\uff88\035\uff88\036\uff88\037" +
    "\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88" +
    "\046\uff88\050\uff88\051\uff88\052\uff88\053\uff88\062\uff88\064" +
    "\uff88\066\uff88\075\uff88\001\002\000\064\010\uff86\014\uff86" +
    "\017\uff86\020\uff86\031\uff86\032\uff86\033\uff86\035\uff86\036" +
    "\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86" +
    "\045\uff86\046\uff86\050\uff86\051\uff86\052\uff86\053\uff86\062" +
    "\uff86\064\uff86\066\uff86\075\uff86\001\002\000\064\010\uff82" +
    "\014\uff82\017\uff82\020\uff82\031\uff82\032\uff82\033\uff82\035" +
    "\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82" +
    "\044\uff82\045\uff82\046\uff82\050\uff82\051\uff82\052\uff82\053" +
    "\uff82\062\uff82\064\uff82\066\uff82\075\uff82\001\002\000\064" +
    "\010\uff83\014\uff83\017\uff83\020\uff83\031\uff83\032\uff83\033" +
    "\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83" +
    "\043\uff83\044\uff83\045\uff83\046\uff83\050\uff83\051\uff83\052" +
    "\uff83\053\uff83\062\uff83\064\uff83\066\uff83\075\uff83\001\002" +
    "\000\024\004\025\005\030\006\026\007\034\030\033\033" +
    "\027\047\037\056\031\057\040\001\002\000\064\010\uff84" +
    "\014\uff84\017\uff84\020\uff84\031\uff84\032\uff84\033\uff84\035" +
    "\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84" +
    "\044\uff84\045\uff84\046\uff84\050\uff84\051\uff84\052\uff84\053" +
    "\uff84\062\uff84\064\uff84\066\uff84\075\uff84\001\002\000\064" +
    "\010\uff80\014\uff80\017\uff80\020\uff80\031\uff80\032\uff80\033" +
    "\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80" +
    "\043\uff80\044\uff80\045\uff80\046\uff80\050\uff80\051\uff80\052" +
    "\uff80\053\uff80\062\uff80\064\uff80\066\uff80\075\uff80\001\002" +
    "\000\040\010\116\032\051\033\044\035\047\036\054\037" +
    "\046\040\050\041\056\042\045\043\043\044\053\045\052" +
    "\046\055\050\042\053\057\001\002\000\024\004\025\005" +
    "\030\006\026\007\034\030\033\033\027\047\037\056\031" +
    "\057\040\001\002\000\070\010\uff7f\014\uff7f\017\uff7f\020" +
    "\uff7f\030\103\031\uff7f\032\uff7f\033\uff7f\035\uff7f\036\uff7f" +
    "\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045" +
    "\uff7f\046\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\062\uff7f" +
    "\064\uff7f\066\uff7f\074\102\075\uff7f\001\002\000\064\010" +
    "\uff85\014\uff85\017\uff85\020\uff85\031\uff85\032\uff85\033\uff85" +
    "\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043" +
    "\uff85\044\uff85\045\uff85\046\uff85\050\uff85\051\uff85\052\uff85" +
    "\053\uff85\062\uff85\064\uff85\066\uff85\075\uff85\001\002\000" +
    "\064\010\uff87\014\uff87\017\uff87\020\uff87\031\uff87\032\uff87" +
    "\033\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042" +
    "\uff87\043\uff87\044\uff87\045\uff87\046\uff87\050\uff87\051\uff87" +
    "\052\uff87\053\uff87\062\uff87\064\uff87\066\uff87\075\uff87\001" +
    "\002\000\024\004\025\005\030\006\026\007\034\030\033" +
    "\033\027\047\037\056\031\057\040\001\002\000\064\010" +
    "\uff81\014\uff81\017\uff81\020\uff81\031\uff81\032\uff81\033\uff81" +
    "\035\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043" +
    "\uff81\044\uff81\045\uff81\046\uff81\050\uff81\051\uff81\052\uff81" +
    "\053\uff81\062\uff81\064\uff81\066\uff81\075\uff81\001\002\000" +
    "\064\010\uff6f\014\uff6f\017\uff6f\020\uff6f\031\uff6f\032\051" +
    "\033\044\035\047\036\054\037\046\040\050\041\056\042" +
    "\045\043\043\044\053\045\052\046\055\050\uff6f\051\uff6f" +
    "\052\uff6f\053\uff6f\062\uff6f\064\uff6f\066\uff6f\075\uff6f\001" +
    "\002\000\026\004\025\005\030\006\026\007\034\030\033" +
    "\033\027\047\037\051\077\056\031\057\040\001\002\000" +
    "\024\004\025\005\030\006\026\007\034\030\033\033\027" +
    "\047\037\056\031\057\040\001\002\000\024\004\025\005" +
    "\030\006\026\007\034\030\033\033\027\047\037\056\031" +
    "\057\040\001\002\000\024\004\025\005\030\006\026\007" +
    "\034\030\033\033\027\047\037\056\031\057\040\001\002" +
    "\000\024\004\025\005\030\006\026\007\034\030\033\033" +
    "\027\047\037\056\031\057\040\001\002\000\024\004\025" +
    "\005\030\006\026\007\034\030\033\033\027\047\037\056" +
    "\031\057\040\001\002\000\024\004\025\005\030\006\026" +
    "\007\034\030\033\033\027\047\037\056\031\057\040\001" +
    "\002\000\024\004\025\005\030\006\026\007\034\030\033" +
    "\033\027\047\037\056\031\057\040\001\002\000\024\004" +
    "\025\005\030\006\026\007\034\030\033\033\027\047\037" +
    "\056\031\057\040\001\002\000\024\004\025\005\030\006" +
    "\026\007\034\030\033\033\027\047\037\056\031\057\040" +
    "\001\002\000\024\004\025\005\030\006\026\007\034\030" +
    "\033\033\027\047\037\056\031\057\040\001\002\000\024" +
    "\004\025\005\030\006\026\007\034\030\033\033\027\047" +
    "\037\056\031\057\040\001\002\000\024\004\025\005\030" +
    "\006\026\007\034\030\033\033\027\047\037\056\031\057" +
    "\040\001\002\000\026\004\025\005\030\006\026\007\034" +
    "\030\033\033\027\047\037\052\061\056\031\057\040\001" +
    "\002\000\064\010\uff6d\014\uff6d\017\uff6d\020\uff6d\031\uff6d" +
    "\032\051\033\044\035\047\036\054\037\046\040\050\041" +
    "\056\042\045\043\043\044\053\045\052\046\055\050\042" +
    "\051\uff6d\052\uff6d\053\uff6d\062\uff6d\064\uff6d\066\uff6d\075" +
    "\uff6d\001\002\000\024\004\025\005\030\006\026\007\034" +
    "\030\033\033\027\047\037\056\031\057\040\001\002\000" +
    "\064\010\uff6b\014\uff6b\017\uff6b\020\uff6b\031\uff6b\032\051" +
    "\033\044\035\047\036\054\037\046\040\050\041\056\042" +
    "\045\043\043\044\053\045\052\046\055\050\042\051\uff6b" +
    "\052\uff6b\053\057\062\uff6b\064\uff6b\066\uff6b\075\uff6b\001" +
    "\002\000\064\010\uff74\014\uff74\017\uff74\020\uff74\031\uff74" +
    "\032\051\033\044\035\047\036\054\037\046\040\050\041" +
    "\uff74\042\uff74\043\uff74\044\uff74\045\uff74\046\uff74\050\uff74" +
    "\051\uff74\052\uff74\053\uff74\062\uff74\064\uff74\066\uff74\075" +
    "\uff74\001\002\000\064\010\uff75\014\uff75\017\uff75\020\uff75" +
    "\031\uff75\032\051\033\044\035\047\036\054\037\046\040" +
    "\050\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046\uff75" +
    "\050\uff75\051\uff75\052\uff75\053\uff75\062\uff75\064\uff75\066" +
    "\uff75\075\uff75\001\002\000\064\010\uff79\014\uff79\017\uff79" +
    "\020\uff79\031\uff79\032\uff79\033\uff79\035\uff79\036\uff79\037" +
    "\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\045\uff79" +
    "\046\uff79\050\uff79\051\uff79\052\uff79\053\uff79\062\uff79\064" +
    "\uff79\066\uff79\075\uff79\001\002\000\064\010\uff71\014\uff71" +
    "\017\uff71\020\uff71\031\uff71\032\051\033\044\035\047\036" +
    "\054\037\046\040\050\041\uff71\042\uff71\043\uff71\044\uff71" +
    "\045\uff71\046\uff71\050\uff71\051\uff71\052\uff71\053\uff71\062" +
    "\uff71\064\uff71\066\uff71\075\uff71\001\002\000\064\010\uff70" +
    "\014\uff70\017\uff70\020\uff70\031\uff70\032\051\033\044\035" +
    "\047\036\054\037\046\040\050\041\uff70\042\uff70\043\uff70" +
    "\044\uff70\045\uff70\046\uff70\050\uff70\051\uff70\052\uff70\053" +
    "\uff70\062\uff70\064\uff70\066\uff70\075\uff70\001\002\000\064" +
    "\010\uff7c\014\uff7c\017\uff7c\020\uff7c\031\uff7c\032\uff7c\033" +
    "\uff7c\035\047\036\054\037\046\040\050\041\uff7c\042\uff7c" +
    "\043\uff7c\044\uff7c\045\uff7c\046\uff7c\050\uff7c\051\uff7c\052" +
    "\uff7c\053\uff7c\062\uff7c\064\uff7c\066\uff7c\075\uff7c\001\002" +
    "\000\064\010\uff77\014\uff77\017\uff77\020\uff77\031\uff77\032" +
    "\uff77\033\uff77\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77" +
    "\042\uff77\043\uff77\044\uff77\045\uff77\046\uff77\050\uff77\051" +
    "\uff77\052\uff77\053\uff77\062\uff77\064\uff77\066\uff77\075\uff77" +
    "\001\002\000\064\010\uff7a\014\uff7a\017\uff7a\020\uff7a\031" +
    "\uff7a\032\uff7a\033\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a" +
    "\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\050" +
    "\uff7a\051\uff7a\052\uff7a\053\uff7a\062\uff7a\064\uff7a\066\uff7a" +
    "\075\uff7a\001\002\000\064\010\uff78\014\uff78\017\uff78\020" +
    "\uff78\031\uff78\032\uff78\033\uff78\035\uff78\036\uff78\037\uff78" +
    "\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\045\uff78\046" +
    "\uff78\050\uff78\051\uff78\052\uff78\053\uff78\062\uff78\064\uff78" +
    "\066\uff78\075\uff78\001\002\000\064\010\uff73\014\uff73\017" +
    "\uff73\020\uff73\031\uff73\032\051\033\044\035\047\036\054" +
    "\037\046\040\050\041\uff73\042\uff73\043\uff73\044\uff73\045" +
    "\uff73\046\uff73\050\uff73\051\uff73\052\uff73\053\uff73\062\uff73" +
    "\064\uff73\066\uff73\075\uff73\001\002\000\064\010\uff7b\014" +
    "\uff7b\017\uff7b\020\uff7b\031\uff7b\032\uff7b\033\uff7b\035\047" +
    "\036\054\037\046\040\050\041\uff7b\042\uff7b\043\uff7b\044" +
    "\uff7b\045\uff7b\046\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b" +
    "\062\uff7b\064\uff7b\066\uff7b\075\uff7b\001\002\000\064\010" +
    "\uff72\014\uff72\017\uff72\020\uff72\031\uff72\032\051\033\044" +
    "\035\047\036\054\037\046\040\050\041\uff72\042\uff72\043" +
    "\uff72\044\uff72\045\uff72\046\uff72\050\uff72\051\uff72\052\uff72" +
    "\053\uff72\062\uff72\064\uff72\066\uff72\075\uff72\001\002\000" +
    "\024\004\025\005\030\006\026\007\034\030\033\033\027" +
    "\047\037\056\031\057\040\001\002\000\064\010\uff6e\014" +
    "\uff6e\017\uff6e\020\uff6e\031\uff6e\032\051\033\044\035\047" +
    "\036\054\037\046\040\050\041\056\042\045\043\043\044" +
    "\053\045\052\046\055\050\uff6e\051\uff6e\052\uff6e\053\uff6e" +
    "\062\uff6e\064\uff6e\066\uff6e\075\uff6e\001\002\000\064\010" +
    "\uff6c\014\uff6c\017\uff6c\020\uff6c\031\uff6c\032\051\033\044" +
    "\035\047\036\054\037\046\040\050\041\056\042\045\043" +
    "\043\044\053\045\052\046\055\050\042\051\uff6c\052\uff6c" +
    "\053\057\062\uff6c\064\uff6c\066\uff6c\075\uff6c\001\002\000" +
    "\024\004\025\005\030\006\026\007\034\030\033\033\027" +
    "\047\037\056\031\057\040\001\002\000\026\004\025\005" +
    "\030\006\026\007\034\030\033\031\105\033\027\047\037" +
    "\056\031\057\040\001\002\000\006\020\107\031\110\001" +
    "\002\000\064\010\uffd4\014\uffd4\017\uffd4\020\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\050\uffd4" +
    "\051\uffd4\052\uffd4\053\uffd4\062\uffd4\064\uffd4\066\uffd4\075" +
    "\uffd4\001\002\000\042\020\uffd2\031\uffd2\032\051\033\044" +
    "\035\047\036\054\037\046\040\050\041\056\042\045\043" +
    "\043\044\053\045\052\046\055\050\042\053\057\001\002" +
    "\000\024\004\025\005\030\006\026\007\034\030\033\033" +
    "\027\047\037\056\031\057\040\001\002\000\064\010\uffd5" +
    "\014\uffd5\017\uffd5\020\uffd5\031\uffd5\032\uffd5\033\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\050\uffd5\051\uffd5\052\uffd5\053" +
    "\uffd5\062\uffd5\064\uffd5\066\uffd5\075\uffd5\001\002\000\042" +
    "\020\uffd3\031\uffd3\032\051\033\044\035\047\036\054\037" +
    "\046\040\050\041\056\042\045\043\043\044\053\045\052" +
    "\046\055\050\042\053\057\001\002\000\040\032\051\033" +
    "\044\035\047\036\054\037\046\040\050\041\056\042\045" +
    "\043\043\044\053\045\052\046\055\050\042\053\057\075" +
    "\113\001\002\000\064\010\uff7e\014\uff7e\017\uff7e\020\uff7e" +
    "\031\uff7e\032\uff7e\033\uff7e\035\uff7e\036\uff7e\037\uff7e\040" +
    "\uff7e\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e" +
    "\050\uff7e\051\uff7e\052\uff7e\053\uff7e\062\uff7e\064\uff7e\066" +
    "\uff7e\075\uff7e\001\002\000\040\031\115\032\051\033\044" +
    "\035\047\036\054\037\046\040\050\041\056\042\045\043" +
    "\043\044\053\045\052\046\055\050\042\053\057\001\002" +
    "\000\064\010\uff76\014\uff76\017\uff76\020\uff76\031\uff76\032" +
    "\uff76\033\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76" +
    "\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76\050\uff76\051" +
    "\uff76\052\uff76\053\uff76\062\uff76\064\uff76\066\uff76\075\uff76" +
    "\001\002\000\022\002\uffc0\007\uffc0\012\uffc0\015\uffc0\016" +
    "\uffc0\021\uffc0\076\uffc0\077\uffc0\001\002\000\064\010\uff7d" +
    "\014\uff7d\017\uff7d\020\uff7d\031\uff7d\032\uff7d\033\uff7d\035" +
    "\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d" +
    "\044\uff7d\045\uff7d\046\uff7d\050\uff7d\051\uff7d\052\uff7d\053" +
    "\uff7d\062\uff7d\064\uff7d\066\uff7d\075\uff7d\001\002\000\022" +
    "\002\uffbe\007\uffbe\012\uffbe\015\uffbe\016\uffbe\021\uffbe\076" +
    "\uffbe\077\uffbe\001\002\000\024\004\025\005\030\006\026" +
    "\007\034\030\033\033\027\047\037\056\031\057\040\001" +
    "\002\000\040\010\123\032\051\033\044\035\047\036\054" +
    "\037\046\040\050\041\056\042\045\043\043\044\053\045" +
    "\052\046\055\050\042\053\057\001\002\000\022\002\uffbf" +
    "\007\uffbf\012\uffbf\015\uffbf\016\uffbf\021\uffbf\076\uffbf\077" +
    "\uffbf\001\002\000\030\003\150\007\137\011\134\013\322" +
    "\060\135\061\147\063\131\065\152\067\153\071\144\072" +
    "\125\001\002\000\004\010\uff89\001\002\000\004\010\321" +
    "\001\002\000\004\010\303\001\002\000\004\010\302\001" +
    "\002\000\024\004\025\005\030\006\026\007\034\030\033" +
    "\033\027\047\037\056\031\057\040\001\002\000\054\003" +
    "\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1\013\ufff1" +
    "\030\ufff1\033\ufff1\047\ufff1\052\ufff1\056\ufff1\057\ufff1\060" +
    "\ufff1\061\ufff1\063\ufff1\065\ufff1\067\ufff1\070\ufff1\071\ufff1" +
    "\072\ufff1\001\002\000\032\003\ufff7\007\ufff7\011\ufff7\013" +
    "\ufff7\060\ufff7\061\ufff7\063\ufff7\065\ufff7\067\ufff7\070\ufff7" +
    "\071\ufff7\072\ufff7\001\002\000\004\030\304\001\002\000" +
    "\024\004\025\005\030\006\026\007\034\030\033\033\027" +
    "\047\037\056\031\057\040\001\002\000\004\010\252\001" +
    "\002\000\012\014\231\017\232\030\233\074\230\001\002" +
    "\000\004\010\227\001\002\000\004\010\226\001\002\000" +
    "\054\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\011\ufff0" +
    "\013\ufff0\030\ufff0\033\ufff0\047\ufff0\052\ufff0\056\ufff0\057" +
    "\ufff0\060\ufff0\061\ufff0\063\ufff0\065\ufff0\067\ufff0\070\ufff0" +
    "\071\ufff0\072\ufff0\001\002\000\054\003\uffee\004\uffee\005" +
    "\uffee\006\uffee\007\uffee\011\uffee\013\uffee\030\uffee\033\uffee" +
    "\047\uffee\052\uffee\056\uffee\057\uffee\060\uffee\061\uffee\063" +
    "\uffee\065\uffee\067\uffee\070\uffee\071\uffee\072\uffee\001\002" +
    "\000\004\010\uff8a\001\002\000\054\003\uffed\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\011\uffed\013\uffed\030\uffed\033\uffed" +
    "\047\uffed\052\uffed\056\uffed\057\uffed\060\uffed\061\uffed\063" +
    "\uffed\065\uffed\067\uffed\070\uffed\071\uffed\072\uffed\001\002" +
    "\000\004\010\225\001\002\000\024\004\025\005\030\006" +
    "\026\007\034\030\033\033\027\047\037\056\031\057\040" +
    "\001\002\000\056\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\175\011\uffe9\013\uffe9\030\uffe9\033\uffe9\047\uffe9" +
    "\052\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\063\uffe9\065" +
    "\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9\001\002\000\054" +
    "\003\uffef\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef\013" +
    "\uffef\030\uffef\033\uffef\047\uffef\052\uffef\056\uffef\057\uffef" +
    "\060\uffef\061\uffef\063\uffef\065\uffef\067\uffef\070\uffef\071" +
    "\uffef\072\uffef\001\002\000\004\007\161\001\002\000\026" +
    "\003\150\007\137\011\134\060\135\061\147\063\131\065" +
    "\152\067\153\071\144\072\125\001\002\000\030\003\150" +
    "\007\137\011\134\060\135\061\147\063\131\065\152\067" +
    "\153\070\156\071\144\072\125\001\002\000\032\003\ufff8" +
    "\007\ufff8\011\ufff8\013\ufff8\060\ufff8\061\ufff8\063\ufff8\065" +
    "\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\001\002\000\024" +
    "\004\025\005\030\006\026\007\034\030\033\033\027\047" +
    "\037\056\031\057\040\001\002\000\040\010\160\032\051" +
    "\033\044\035\047\036\054\037\046\040\050\041\056\042" +
    "\045\043\043\044\053\045\052\046\055\050\042\053\057" +
    "\001\002\000\054\003\uff8b\004\uff8b\005\uff8b\006\uff8b\007" +
    "\uff8b\011\uff8b\013\uff8b\030\uff8b\033\uff8b\047\uff8b\052\uff8b" +
    "\056\uff8b\057\uff8b\060\uff8b\061\uff8b\063\uff8b\065\uff8b\067" +
    "\uff8b\070\uff8b\071\uff8b\072\uff8b\001\002\000\004\017\162" +
    "\001\002\000\004\046\163\001\002\000\024\004\025\005" +
    "\030\006\026\007\034\030\033\033\027\047\037\056\031" +
    "\057\040\001\002\000\040\032\051\033\044\035\047\036" +
    "\054\037\046\040\050\041\056\042\045\043\043\044\053" +
    "\045\052\046\055\050\042\053\057\066\165\001\002\000" +
    "\024\004\025\005\030\006\026\007\034\030\033\033\027" +
    "\047\037\056\031\057\040\001\002\000\040\032\051\033" +
    "\044\035\047\036\054\037\046\040\050\041\056\042\045" +
    "\043\043\044\053\045\052\046\055\050\042\053\057\064" +
    "\167\001\002\000\030\003\150\007\137\011\134\012\171" +
    "\060\135\061\147\063\131\065\152\067\153\071\144\072" +
    "\125\001\002\000\054\003\uff8d\004\uff8d\005\uff8d\006\uff8d" +
    "\007\uff8d\011\uff8d\013\uff8d\030\uff8d\033\uff8d\047\uff8d\052" +
    "\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\063\uff8d\065\uff8d" +
    "\067\uff8d\070\uff8d\071\uff8d\072\uff8d\001\002\000\026\003" +
    "\150\007\137\011\134\060\135\061\147\063\131\065\152" +
    "\067\153\071\144\072\125\001\002\000\030\003\150\007" +
    "\137\011\134\013\173\060\135\061\147\063\131\065\152" +
    "\067\153\071\144\072\125\001\002\000\004\010\174\001" +
    "\002\000\054\003\uff8c\004\uff8c\005\uff8c\006\uff8c\007\uff8c" +
    "\011\uff8c\013\uff8c\030\uff8c\033\uff8c\047\uff8c\052\uff8c\056" +
    "\uff8c\057\uff8c\060\uff8c\061\uff8c\063\uff8c\065\uff8c\067\uff8c" +
    "\070\uff8c\071\uff8c\072\uff8c\001\002\000\054\003\uffea\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\011\uffea\013\uffea\030\uffea" +
    "\033\uffea\047\uffea\052\uffea\056\uffea\057\uffea\060\uffea\061" +
    "\uffea\063\uffea\065\uffea\067\uffea\070\uffea\071\uffea\072\uffea" +
    "\001\002\000\040\032\051\033\044\035\047\036\054\037" +
    "\046\040\050\041\056\042\045\043\043\044\053\045\052" +
    "\046\055\050\042\053\057\062\177\001\002\000\024\004" +
    "\025\005\030\006\026\007\034\030\033\033\027\047\037" +
    "\056\031\057\040\001\002\000\026\004\025\005\030\006" +
    "\026\007\034\030\033\033\027\047\037\052\215\056\031" +
    "\057\040\001\002\000\006\017\205\020\204\001\002\000" +
    "\026\004\uff94\005\uff94\006\uff94\007\uff94\030\uff94\033\uff94" +
    "\047\uff94\052\uff94\056\uff94\057\uff94\001\002\000\042\017" +
    "\uff90\020\uff90\032\051\033\044\035\047\036\054\037\046" +
    "\040\050\041\056\042\045\043\043\044\053\045\052\046" +
    "\055\050\042\053\057\001\002\000\024\004\025\005\030" +
    "\006\026\007\034\030\033\033\027\047\037\056\031\057" +
    "\040\001\002\000\030\003\150\007\137\011\134\012\207" +
    "\060\135\061\147\063\131\065\152\067\153\071\144\072" +
    "\125\001\002\000\026\004\uff92\005\uff92\006\uff92\007\uff92" +
    "\030\uff92\033\uff92\047\uff92\052\uff92\056\uff92\057\uff92\001" +
    "\002\000\026\003\150\007\137\011\134\060\135\061\147" +
    "\063\131\065\152\067\153\071\144\072\125\001\002\000" +
    "\030\003\150\007\137\011\134\013\211\060\135\061\147" +
    "\063\131\065\152\067\153\071\144\072\125\001\002\000" +
    "\004\010\212\001\002\000\026\004\uff93\005\uff93\006\uff93" +
    "\007\uff93\030\uff93\033\uff93\047\uff93\052\uff93\056\uff93\057" +
    "\uff93\001\002\000\042\017\uff91\020\uff91\032\051\033\044" +
    "\035\047\036\054\037\046\040\050\041\056\042\045\043" +
    "\043\044\053\045\052\046\055\050\042\053\057\001\002" +
    "\000\026\004\uff95\005\uff95\006\uff95\007\uff95\030\uff95\033" +
    "\uff95\047\uff95\052\uff95\056\uff95\057\uff95\001\002\000\030" +
    "\003\150\007\137\011\134\012\217\060\135\061\147\063" +
    "\131\065\152\067\153\071\144\072\125\001\002\000\004" +
    "\013\223\001\002\000\026\003\150\007\137\011\134\060" +
    "\135\061\147\063\131\065\152\067\153\071\144\072\125" +
    "\001\002\000\030\003\150\007\137\011\134\013\221\060" +
    "\135\061\147\063\131\065\152\067\153\071\144\072\125" +
    "\001\002\000\004\010\222\001\002\000\054\003\uff97\004" +
    "\uff97\005\uff97\006\uff97\007\uff97\011\uff97\013\uff97\030\uff97" +
    "\033\uff97\047\uff97\052\uff97\056\uff97\057\uff97\060\uff97\061" +
    "\uff97\063\uff97\065\uff97\067\uff97\070\uff97\071\uff97\072\uff97" +
    "\001\002\000\004\010\224\001\002\000\054\003\uff96\004" +
    "\uff96\005\uff96\006\uff96\007\uff96\011\uff96\013\uff96\030\uff96" +
    "\033\uff96\047\uff96\052\uff96\056\uff96\057\uff96\060\uff96\061" +
    "\uff96\063\uff96\065\uff96\067\uff96\070\uff96\071\uff96\072\uff96" +
    "\001\002\000\054\003\uffec\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\011\uffec\013\uffec\030\uffec\033\uffec\047\uffec\052\uffec" +
    "\056\uffec\057\uffec\060\uffec\061\uffec\063\uffec\065\uffec\067" +
    "\uffec\070\uffec\071\uffec\072\uffec\001\002\000\054\003\ufff5" +
    "\004\ufff5\005\ufff5\006\ufff5\007\ufff5\011\ufff5\013\ufff5\030" +
    "\ufff5\033\ufff5\047\ufff5\052\ufff5\056\ufff5\057\ufff5\060\ufff5" +
    "\061\ufff5\063\ufff5\065\ufff5\067\ufff5\070\ufff5\071\ufff5\072" +
    "\ufff5\001\002\000\054\003\uffeb\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\011\uffeb\013\uffeb\030\uffeb\033\uffeb\047\uffeb\052" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\063\uffeb\065\uffeb" +
    "\067\uffeb\070\uffeb\071\uffeb\072\uffeb\001\002\000\024\004" +
    "\025\005\030\006\026\007\034\030\033\033\027\047\037" +
    "\056\031\057\040\001\002\000\004\007\241\001\002\000" +
    "\004\046\237\001\002\000\026\004\025\005\030\006\026" +
    "\007\034\030\033\031\235\033\027\047\037\056\031\057" +
    "\040\001\002\000\006\020\107\031\236\001\002\000\004" +
    "\010\uffd6\001\002\000\004\010\uffd7\001\002\000\024\004" +
    "\025\005\030\006\026\007\034\030\033\033\027\047\037" +
    "\056\031\057\040\001\002\000\042\010\uffa0\032\051\033" +
    "\044\035\047\036\054\037\046\040\050\041\056\042\045" +
    "\043\043\044\053\045\052\046\055\050\042\052\uffa0\053" +
    "\057\001\002\000\004\017\242\001\002\000\004\046\243" +
    "\001\002\000\024\004\025\005\030\006\026\007\034\030" +
    "\033\033\027\047\037\056\031\057\040\001\002\000\040" +
    "\010\uff9f\032\051\033\044\035\047\036\054\037\046\040" +
    "\050\041\056\042\045\043\043\044\053\045\052\046\055" +
    "\050\042\053\057\001\002\000\040\032\051\033\044\035" +
    "\047\036\054\037\046\040\050\041\056\042\045\043\043" +
    "\044\053\045\052\046\055\050\042\053\057\075\246\001" +
    "\002\000\004\017\247\001\002\000\004\046\250\001\002" +
    "\000\024\004\025\005\030\006\026\007\034\030\033\033" +
    "\027\047\037\056\031\057\040\001\002\000\042\010\uff9e" +
    "\032\051\033\044\035\047\036\054\037\046\040\050\041" +
    "\056\042\045\043\043\044\053\045\052\046\055\050\042" +
    "\052\uff9e\053\057\001\002\000\054\003\ufff3\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\011\ufff3\013\ufff3\030\ufff3\033\ufff3" +
    "\047\ufff3\052\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\063" +
    "\ufff3\065\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3\001\002" +
    "\000\040\032\051\033\044\035\047\036\054\037\046\040" +
    "\050\041\056\042\045\043\043\044\053\045\052\046\055" +
    "\050\042\051\254\053\057\001\002\000\030\003\150\007" +
    "\137\011\134\012\261\060\135\061\147\063\131\065\152" +
    "\067\153\071\144\072\125\001\002\000\006\010\303\052" +
    "\uffe6\001\002\000\006\010\302\052\uffe8\001\002\000\054" +
    "\003\uff9d\004\uff9d\005\uff9d\006\uff9d\007\uff9d\011\uff9d\013" +
    "\uff9d\030\uff9d\033\uff9d\047\uff9d\052\uff9d\056\uff9d\057\uff9d" +
    "\060\uff9d\061\uff9d\063\uff9d\065\uff9d\067\uff9d\070\uff9d\071" +
    "\uff9d\072\uff9d\001\002\000\006\010\226\052\uffe7\001\002" +
    "\000\026\003\150\007\137\011\134\060\135\061\147\063" +
    "\131\065\152\067\153\071\144\072\125\001\002\000\004" +
    "\052\263\001\002\000\030\003\150\007\137\011\134\012" +
    "\265\060\135\061\147\063\131\065\152\067\153\071\144" +
    "\072\125\001\002\000\054\003\uff9a\004\uff9a\005\uff9a\006" +
    "\uff9a\007\uff9a\011\uff9a\013\uff9a\030\uff9a\033\uff9a\047\uff9a" +
    "\052\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\063\uff9a\065" +
    "\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\001\002\000\026" +
    "\003\150\007\137\011\134\060\135\061\147\063\131\065" +
    "\152\067\153\071\144\072\125\001\002\000\030\003\150" +
    "\007\137\011\134\013\267\060\135\061\147\063\131\065" +
    "\152\067\153\071\144\072\125\001\002\000\004\010\270" +
    "\001\002\000\054\003\uff99\004\uff99\005\uff99\006\uff99\007" +
    "\uff99\011\uff99\013\uff99\030\uff99\033\uff99\047\uff99\052\uff99" +
    "\056\uff99\057\uff99\060\uff99\061\uff99\063\uff99\065\uff99\067" +
    "\uff99\070\uff99\071\uff99\072\uff99\001\002\000\030\003\150" +
    "\007\137\011\134\013\272\060\135\061\147\063\131\065" +
    "\152\067\153\071\144\072\125\001\002\000\006\010\273" +
    "\052\274\001\002\000\054\003\uff9c\004\uff9c\005\uff9c\006" +
    "\uff9c\007\uff9c\011\uff9c\013\uff9c\030\uff9c\033\uff9c\047\uff9c" +
    "\052\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\063\uff9c\065" +
    "\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\001\002\000\030" +
    "\003\150\007\137\011\134\012\276\060\135\061\147\063" +
    "\131\065\152\067\153\071\144\072\125\001\002\000\054" +
    "\003\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\011\uff9b\013" +
    "\uff9b\030\uff9b\033\uff9b\047\uff9b\052\uff9b\056\uff9b\057\uff9b" +
    "\060\uff9b\061\uff9b\063\uff9b\065\uff9b\067\uff9b\070\uff9b\071" +
    "\uff9b\072\uff9b\001\002\000\026\003\150\007\137\011\134" +
    "\060\135\061\147\063\131\065\152\067\153\071\144\072" +
    "\125\001\002\000\030\003\150\007\137\011\134\013\300" +
    "\060\135\061\147\063\131\065\152\067\153\071\144\072" +
    "\125\001\002\000\004\010\301\001\002\000\054\003\uff98" +
    "\004\uff98\005\uff98\006\uff98\007\uff98\011\uff98\013\uff98\030" +
    "\uff98\033\uff98\047\uff98\052\uff98\056\uff98\057\uff98\060\uff98" +
    "\061\uff98\063\uff98\065\uff98\067\uff98\070\uff98\071\uff98\072" +
    "\uff98\001\002\000\054\003\ufff6\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\011\ufff6\013\ufff6\030\ufff6\033\ufff6\047\ufff6\052" +
    "\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\063\ufff6\065\ufff6" +
    "\067\ufff6\070\ufff6\071\ufff6\072\ufff6\001\002\000\054\003" +
    "\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4\013\ufff4" +
    "\030\ufff4\033\ufff4\047\ufff4\052\ufff4\056\ufff4\057\ufff4\060" +
    "\ufff4\061\ufff4\063\ufff4\065\ufff4\067\ufff4\070\ufff4\071\ufff4" +
    "\072\ufff4\001\002\000\024\004\025\005\030\006\026\007" +
    "\034\030\033\033\027\047\037\056\031\057\040\001\002" +
    "\000\042\020\uffa1\031\uffa1\032\051\033\044\035\047\036" +
    "\054\037\046\040\050\041\056\042\045\043\043\044\053" +
    "\045\052\046\055\050\042\053\057\001\002\000\006\020" +
    "\307\031\310\001\002\000\024\004\025\005\030\006\026" +
    "\007\034\030\033\033\027\047\037\056\031\057\040\001" +
    "\002\000\006\010\uffa3\052\uffa3\001\002\000\042\020\uffa2" +
    "\031\uffa2\032\051\033\044\035\047\036\054\037\046\040" +
    "\050\041\056\042\045\043\043\044\053\045\052\046\055" +
    "\050\042\053\057\001\002\000\040\032\051\033\044\035" +
    "\047\036\054\037\046\040\050\041\056\042\045\043\043" +
    "\044\053\045\052\046\055\050\042\053\057\064\313\001" +
    "\002\000\030\003\150\007\137\011\134\012\315\060\135" +
    "\061\147\063\131\065\152\067\153\071\144\072\125\001" +
    "\002\000\054\003\uff8e\004\uff8e\005\uff8e\006\uff8e\007\uff8e" +
    "\011\uff8e\013\uff8e\030\uff8e\033\uff8e\047\uff8e\052\uff8e\056" +
    "\uff8e\057\uff8e\060\uff8e\061\uff8e\063\uff8e\065\uff8e\067\uff8e" +
    "\070\uff8e\071\uff8e\072\uff8e\001\002\000\026\003\150\007" +
    "\137\011\134\060\135\061\147\063\131\065\152\067\153" +
    "\071\144\072\125\001\002\000\030\003\150\007\137\011" +
    "\134\013\317\060\135\061\147\063\131\065\152\067\153" +
    "\071\144\072\125\001\002\000\004\010\320\001\002\000" +
    "\054\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f\011\uff8f" +
    "\013\uff8f\030\uff8f\033\uff8f\047\uff8f\052\uff8f\056\uff8f\057" +
    "\uff8f\060\uff8f\061\uff8f\063\uff8f\065\uff8f\067\uff8f\070\uff8f" +
    "\071\uff8f\072\uff8f\001\002\000\054\003\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\011\ufff2\013\ufff2\030\ufff2\033\ufff2" +
    "\047\ufff2\052\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\063" +
    "\ufff2\065\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\001\002" +
    "\000\004\014\323\001\002\000\020\002\ufff9\012\ufff9\015" +
    "\ufff9\016\ufff9\021\ufff9\076\ufff9\077\ufff9\001\002\000\004" +
    "\002\001\001\002\000\020\002\000\012\000\015\000\016" +
    "\000\021\000\076\000\077\000\001\002\000\004\030\327" +
    "\001\002\000\010\007\330\015\331\031\335\001\002\000" +
    "\006\017\uffd8\020\uffd8\001\002\000\004\007\u0152\001\002" +
    "\000\006\017\u0150\020\u014c\001\002\000\006\010\u013c\031" +
    "\u013d\001\002\000\006\017\uffda\020\uffda\001\002\000\004" +
    "\017\336\001\002\000\020\007\340\022\337\023\342\024" +
    "\345\025\344\026\341\027\346\001\002\000\006\010\uffaa" +
    "\031\uffaa\001\002\000\006\010\uffa4\031\uffa4\001\002\000" +
    "\006\010\uffa8\031\uffa8\001\002\000\006\010\uffa9\031\uffa9" +
    "\001\002\000\004\010\347\001\002\000\006\010\uffa6\031" +
    "\uffa6\001\002\000\006\010\uffa5\031\uffa5\001\002\000\006" +
    "\010\uffa7\031\uffa7\001\002\000\006\012\351\015\350\001" +
    "\002\000\006\003\357\007\355\001\002\000\026\003\150" +
    "\007\137\011\134\060\135\061\147\063\131\065\152\067" +
    "\153\071\144\072\125\001\002\000\030\003\150\007\137" +
    "\011\134\013\353\060\135\061\147\063\131\065\152\067" +
    "\153\071\144\072\125\001\002\000\004\010\354\001\002" +
    "\000\020\002\uffde\012\uffde\015\uffde\016\uffde\021\uffde\076" +
    "\uffde\077\uffde\001\002\000\010\017\uffb1\020\uffb1\046\uffb1" +
    "\001\002\000\024\002\uffbb\003\uffbb\007\uffbb\012\uffbb\015" +
    "\uffbb\016\uffbb\021\uffbb\076\uffbb\077\uffbb\001\002\000\026" +
    "\002\uffb4\003\uffb4\007\uffb4\010\u013b\012\uffb4\015\uffb4\016" +
    "\uffb4\021\uffb4\076\uffb4\077\uffb4\001\002\000\010\017\372" +
    "\020\370\046\371\001\002\000\010\003\357\007\355\012" +
    "\364\001\002\000\024\002\uffb6\003\uffb6\007\uffb6\012\uffb6" +
    "\015\uffb6\016\uffb6\021\uffb6\076\uffb6\077\uffb6\001\002\000" +
    "\024\002\uffbc\003\uffbc\007\uffbc\012\uffbc\015\uffbc\016\uffbc" +
    "\021\uffbc\076\uffbc\077\uffbc\001\002\000\026\003\150\007" +
    "\137\011\134\060\135\061\147\063\131\065\152\067\153" +
    "\071\144\072\125\001\002\000\030\003\150\007\137\011" +
    "\134\013\366\060\135\061\147\063\131\065\152\067\153" +
    "\071\144\072\125\001\002\000\004\010\367\001\002\000" +
    "\020\002\uffdf\012\uffdf\015\uffdf\016\uffdf\021\uffdf\076\uffdf" +
    "\077\uffdf\001\002\000\004\007\u013a\001\002\000\004\100" +
    "\u0112\001\002\000\042\004\025\005\030\006\026\007\374" +
    "\022\337\023\342\024\345\025\344\026\341\027\346\030" +
    "\033\033\027\047\037\056\031\057\040\073\376\001\002" +
    "\000\040\014\u010d\032\051\033\044\035\047\036\054\037" +
    "\046\040\050\041\056\042\045\043\043\044\053\045\052" +
    "\046\055\050\042\053\057\001\002\000\046\010\uffa4\014" +
    "\uff7f\030\103\032\uff7f\033\uff7f\035\uff7f\036\uff7f\037\uff7f" +
    "\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046" +
    "\uff7f\050\uff7f\053\uff7f\074\102\001\002\000\004\010\u010c" +
    "\001\002\000\004\074\377\001\002\000\024\004\025\005" +
    "\030\006\026\007\034\030\033\033\027\047\037\056\031" +
    "\057\040\001\002\000\042\014\u0101\032\051\033\044\035" +
    "\047\036\054\037\046\040\050\041\056\042\045\043\043" +
    "\044\053\045\052\046\055\050\042\053\057\075\u0102\001" +
    "\002\000\004\014\u0106\001\002\000\004\062\u0103\001\002" +
    "\000\020\007\340\022\337\023\342\024\345\025\344\026" +
    "\341\027\346\001\002\000\004\010\u0105\001\002\000\024" +
    "\002\uffb7\003\uffb7\007\uffb7\012\uffb7\015\uffb7\016\uffb7\021" +
    "\uffb7\076\uffb7\077\uffb7\001\002\000\024\004\025\005\030" +
    "\006\026\007\034\030\033\033\027\047\037\056\031\057" +
    "\040\001\002\000\040\032\051\033\044\035\047\036\054" +
    "\037\046\040\050\041\056\042\045\043\043\044\053\045" +
    "\052\046\055\050\042\053\057\075\u0108\001\002\000\004" +
    "\062\u0109\001\002\000\020\007\340\022\337\023\342\024" +
    "\345\025\344\026\341\027\346\001\002\000\004\010\u010b" +
    "\001\002\000\024\002\uffb8\003\uffb8\007\uffb8\012\uffb8\015" +
    "\uffb8\016\uffb8\021\uffb8\076\uffb8\077\uffb8\001\002\000\024" +
    "\002\uffba\003\uffba\007\uffba\012\uffba\015\uffba\016\uffba\021" +
    "\uffba\076\uffba\077\uffba\001\002\000\004\014\u010e\001\002" +
    "\000\004\014\u010f\001\002\000\024\004\025\005\030\006" +
    "\026\007\034\030\033\033\027\047\037\056\031\057\040" +
    "\001\002\000\040\010\u0111\032\051\033\044\035\047\036" +
    "\054\037\046\040\050\041\056\042\045\043\043\044\053" +
    "\045\052\046\055\050\042\053\057\001\002\000\024\002" +
    "\uffb9\003\uffb9\007\uffb9\012\uffb9\015\uffb9\016\uffb9\021\uffb9" +
    "\076\uffb9\077\uffb9\001\002\000\004\007\u0113\001\002\000" +
    "\004\017\u0138\001\002\000\006\007\u0115\013\u0116\001\002" +
    "\000\004\017\u0118\001\002\000\004\010\u0117\001\002\000" +
    "\024\002\uffb3\003\uffb3\007\uffb3\012\uffb3\015\uffb3\016\uffb3" +
    "\021\uffb3\076\uffb3\077\uffb3\001\002\000\042\004\025\005" +
    "\030\006\026\007\u011c\022\u011f\023\u0120\024\u0121\025\u011e" +
    "\026\u011d\027\u0119\030\033\033\027\047\037\056\031\057" +
    "\040\073\u0122\001\002\000\004\010\uffad\001\002\000\040" +
    "\014\u0133\032\051\033\044\035\047\036\054\037\046\040" +
    "\050\041\056\042\045\043\043\044\053\045\052\046\055" +
    "\050\042\053\057\001\002\000\004\010\u0132\001\002\000" +
    "\046\010\u0131\014\uff7f\030\103\032\uff7f\033\uff7f\035\uff7f" +
    "\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044" +
    "\uff7f\045\uff7f\046\uff7f\050\uff7f\053\uff7f\074\102\001\002" +
    "\000\004\010\uffae\001\002\000\004\010\uffac\001\002\000" +
    "\004\010\uffb0\001\002\000\004\010\uffaf\001\002\000\004" +
    "\010\uffab\001\002\000\004\074\u0124\001\002\000\006\007" +
    "\uffc7\013\uffc7\001\002\000\024\004\025\005\030\006\026" +
    "\007\034\030\033\033\027\047\037\056\031\057\040\001" +
    "\002\000\042\014\u0126\032\051\033\044\035\047\036\054" +
    "\037\046\040\050\041\056\042\045\043\043\044\053\045" +
    "\052\046\055\050\042\053\057\075\u0127\001\002\000\004" +
    "\014\u012b\001\002\000\004\062\u0128\001\002\000\016\022" +
    "\u011f\023\u0120\024\u0121\025\u011e\026\u011d\027\u0119\001\002" +
    "\000\004\010\u012a\001\002\000\006\007\uffc2\013\uffc2\001" +
    "\002\000\024\004\025\005\030\006\026\007\034\030\033" +
    "\033\027\047\037\056\031\057\040\001\002\000\040\032" +
    "\051\033\044\035\047\036\054\037\046\040\050\041\056" +
    "\042\045\043\043\044\053\045\052\046\055\050\042\053" +
    "\057\075\u012d\001\002\000\004\062\u012e\001\002\000\016" +
    "\022\u011f\023\u0120\024\u0121\025\u011e\026\u011d\027\u0119\001" +
    "\002\000\004\010\u0130\001\002\000\006\007\uffc3\013\uffc3" +
    "\001\002\000\006\007\uffc1\013\uffc1\001\002\000\006\007" +
    "\uffc5\013\uffc5\001\002\000\004\014\u0134\001\002\000\004" +
    "\014\u0135\001\002\000\024\004\025\005\030\006\026\007" +
    "\034\030\033\033\027\047\037\056\031\057\040\001\002" +
    "\000\040\010\u0137\032\051\033\044\035\047\036\054\037" +
    "\046\040\050\041\056\042\045\043\043\044\053\045\052" +
    "\046\055\050\042\053\057\001\002\000\006\007\uffc4\013" +
    "\uffc4\001\002\000\042\004\025\005\030\006\026\007\u011c" +
    "\022\u011f\023\u0120\024\u0121\025\u011e\026\u011d\027\u0119\030" +
    "\033\033\027\047\037\056\031\057\040\073\u0122\001\002" +
    "\000\006\007\uffc6\013\uffc6\001\002\000\010\017\uffb2\020" +
    "\uffb2\046\uffb2\001\002\000\024\002\uffb5\003\uffb5\007\uffb5" +
    "\012\uffb5\015\uffb5\016\uffb5\021\uffb5\076\uffb5\077\uffb5\001" +
    "\002\000\006\007\330\015\331\001\002\000\004\017\u013e" +
    "\001\002\000\020\007\340\022\337\023\342\024\345\025" +
    "\344\026\341\027\346\001\002\000\004\010\u0140\001\002" +
    "\000\006\012\u0142\015\u0141\001\002\000\006\003\357\007" +
    "\355\001\002\000\026\003\150\007\137\011\134\060\135" +
    "\061\147\063\131\065\152\067\153\071\144\072\125\001" +
    "\002\000\030\003\150\007\137\011\134\013\u0144\060\135" +
    "\061\147\063\131\065\152\067\153\071\144\072\125\001" +
    "\002\000\004\010\u0145\001\002\000\020\002\uffe0\012\uffe0" +
    "\015\uffe0\016\uffe0\021\uffe0\076\uffe0\077\uffe0\001\002\000" +
    "\010\003\357\007\355\012\u0147\001\002\000\026\003\150" +
    "\007\137\011\134\060\135\061\147\063\131\065\152\067" +
    "\153\071\144\072\125\001\002\000\030\003\150\007\137" +
    "\011\134\013\u0149\060\135\061\147\063\131\065\152\067" +
    "\153\071\144\072\125\001\002\000\004\010\u014a\001\002" +
    "\000\020\002\uffe1\012\uffe1\015\uffe1\016\uffe1\021\uffe1\076" +
    "\uffe1\077\uffe1\001\002\000\006\017\u014d\020\u014c\001\002" +
    "\000\006\007\330\015\331\001\002\000\020\007\340\022" +
    "\337\023\342\024\345\025\344\026\341\027\346\001\002" +
    "\000\006\010\uffdd\031\uffdd\001\002\000\006\017\uffdb\020" +
    "\uffdb\001\002\000\020\007\340\022\337\023\342\024\345" +
    "\025\344\026\341\027\346\001\002\000\006\010\uffdc\031" +
    "\uffdc\001\002\000\006\017\uffd9\020\uffd9\001\002\000\026" +
    "\002\uffc9\003\uffc9\007\uffc9\010\u0174\012\uffc9\015\uffc9\016" +
    "\uffc9\021\uffc9\076\uffc9\077\uffc9\001\002\000\006\020\370" +
    "\046\u0159\001\002\000\024\002\uffd0\003\uffd0\007\uffd0\012" +
    "\uffd0\015\uffd0\016\uffd0\021\uffd0\076\uffd0\077\uffd0\001\002" +
    "\000\024\002\ufffe\003\u0153\007\355\012\ufffe\015\ufffe\016" +
    "\ufffe\021\ufffe\076\ufffe\077\ufffe\001\002\000\024\002\uffcb" +
    "\003\uffcb\007\uffcb\012\uffcb\015\uffcb\016\uffcb\021\uffcb\076" +
    "\uffcb\077\uffcb\001\002\000\024\002\uffd1\003\uffd1\007\uffd1" +
    "\012\uffd1\015\uffd1\016\uffd1\021\uffd1\076\uffd1\077\uffd1\001" +
    "\002\000\044\004\025\005\030\006\026\007\034\022\u011f" +
    "\023\u0120\024\u0121\025\u011e\026\u011d\027\u0119\030\033\033" +
    "\027\047\037\056\031\057\040\073\u015d\100\u015c\001\002" +
    "\000\040\014\u016f\032\051\033\044\035\047\036\054\037" +
    "\046\040\050\041\056\042\045\043\043\044\053\045\052" +
    "\046\055\050\042\053\057\001\002\000\004\010\u016e\001" +
    "\002\000\004\007\u0113\001\002\000\004\074\u015e\001\002" +
    "\000\024\004\025\005\030\006\026\007\034\030\033\033" +
    "\027\047\037\056\031\057\040\001\002\000\042\014\u0160" +
    "\032\051\033\044\035\047\036\054\037\046\040\050\041" +
    "\056\042\045\043\043\044\053\045\052\046\055\050\042" +
    "\053\057\075\u0161\001\002\000\004\014\u0165\001\002\000" +
    "\004\062\u0162\001\002\000\016\022\u011f\023\u0120\024\u0121" +
    "\025\u011e\026\u011d\027\u0119\001\002\000\004\010\u0164\001" +
    "\002\000\024\002\uffcc\003\uffcc\007\uffcc\012\uffcc\015\uffcc" +
    "\016\uffcc\021\uffcc\076\uffcc\077\uffcc\001\002\000\024\004" +
    "\025\005\030\006\026\007\034\030\033\033\027\047\037" +
    "\056\031\057\040\001\002\000\040\032\051\033\044\035" +
    "\047\036\054\037\046\040\050\041\056\042\045\043\043" +
    "\044\053\045\052\046\055\050\042\053\057\075\u0167\001" +
    "\002\000\004\062\u0168\001\002\000\016\022\u011f\023\u0120" +
    "\024\u0121\025\u011e\026\u011d\027\u0119\001\002\000\004\010" +
    "\u016a\001\002\000\024\002\uffcd\003\uffcd\007\uffcd\012\uffcd" +
    "\015\uffcd\016\uffcd\021\uffcd\076\uffcd\077\uffcd\001\002\000" +
    "\006\007\u0115\013\u016c\001\002\000\004\010\u016d\001\002" +
    "\000\024\002\uffc8\003\uffc8\007\uffc8\012\uffc8\015\uffc8\016" +
    "\uffc8\021\uffc8\076\uffc8\077\uffc8\001\002\000\024\002\uffcf" +
    "\003\uffcf\007\uffcf\012\uffcf\015\uffcf\016\uffcf\021\uffcf\076" +
    "\uffcf\077\uffcf\001\002\000\004\014\u0170\001\002\000\004" +
    "\014\u0171\001\002\000\024\004\025\005\030\006\026\007" +
    "\034\030\033\033\027\047\037\056\031\057\040\001\002" +
    "\000\040\010\u0173\032\051\033\044\035\047\036\054\037" +
    "\046\040\050\041\056\042\045\043\043\044\053\045\052" +
    "\046\055\050\042\053\057\001\002\000\024\002\uffce\003" +
    "\uffce\007\uffce\012\uffce\015\uffce\016\uffce\021\uffce\076\uffce" +
    "\077\uffce\001\002\000\024\002\uffca\003\uffca\007\uffca\012" +
    "\uffca\015\uffca\016\uffca\021\uffca\076\uffca\077\uffca\001\002" +
    "\000\024\002\ufffc\003\357\007\355\012\ufffc\015\ufffc\016" +
    "\ufffc\021\ufffc\076\ufffc\077\ufffc\001\002\000\004\030\u0177" +
    "\001\002\000\010\007\330\015\331\031\u0179\001\002\000" +
    "\006\010\u013c\031\u0185\001\002\000\004\010\u017a\001\002" +
    "\000\006\012\u017c\015\u017b\001\002\000\006\003\357\007" +
    "\355\001\002\000\026\003\150\007\137\011\134\060\135" +
    "\061\147\063\131\065\152\067\153\071\144\072\125\001" +
    "\002\000\030\003\150\007\137\011\134\013\u017e\060\135" +
    "\061\147\063\131\065\152\067\153\071\144\072\125\001" +
    "\002\000\004\010\u017f\001\002\000\020\002\uffe2\012\uffe2" +
    "\015\uffe2\016\uffe2\021\uffe2\076\uffe2\077\uffe2\001\002\000" +
    "\010\003\357\007\355\012\u0181\001\002\000\026\003\150" +
    "\007\137\011\134\060\135\061\147\063\131\065\152\067" +
    "\153\071\144\072\125\001\002\000\030\003\150\007\137" +
    "\011\134\013\u0183\060\135\061\147\063\131\065\152\067" +
    "\153\071\144\072\125\001\002\000\004\010\u0184\001\002" +
    "\000\020\002\uffe3\012\uffe3\015\uffe3\016\uffe3\021\uffe3\076" +
    "\uffe3\077\uffe3\001\002\000\004\010\u0186\001\002\000\006" +
    "\012\u0188\015\u0187\001\002\000\006\003\357\007\355\001" +
    "\002\000\026\003\150\007\137\011\134\060\135\061\147" +
    "\063\131\065\152\067\153\071\144\072\125\001\002\000" +
    "\030\003\150\007\137\011\134\013\u018a\060\135\061\147" +
    "\063\131\065\152\067\153\071\144\072\125\001\002\000" +
    "\004\010\u018b\001\002\000\020\002\uffe4\012\uffe4\015\uffe4" +
    "\016\uffe4\021\uffe4\076\uffe4\077\uffe4\001\002\000\010\003" +
    "\357\007\355\012\u018d\001\002\000\026\003\150\007\137" +
    "\011\134\060\135\061\147\063\131\065\152\067\153\071" +
    "\144\072\125\001\002\000\030\003\150\007\137\011\134" +
    "\013\u018f\060\135\061\147\063\131\065\152\067\153\071" +
    "\144\072\125\001\002\000\004\010\u0190\001\002\000\020" +
    "\002\uffe5\012\uffe5\015\uffe5\016\uffe5\021\uffe5\076\uffe5\077" +
    "\uffe5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u018e\000\012\002\007\004\011\040\004\041\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\u0174" +
    "\012\355\024\357\051\361\001\001\000\012\007\u0155\011" +
    "\u0154\024\u0153\050\u0156\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\324\040\004\041\013\001\001\000" +
    "\036\003\123\015\132\025\127\026\140\027\131\030\126" +
    "\031\135\032\141\033\150\034\142\035\144\036\145\037" +
    "\137\047\125\001\001\000\002\001\001\000\004\005\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\031\020\022\021\035" +
    "\022\023\046\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\116" +
    "\020\022\021\035\022\023\046\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\113" +
    "\020\022\021\035\022\023\046\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\040" +
    "\020\022\021\035\022\023\046\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\077\020\022\021\035" +
    "\022\023\046\034\001\001\000\014\017\075\020\022\021" +
    "\035\022\023\046\034\001\001\000\014\017\074\020\022" +
    "\021\035\022\023\046\034\001\001\000\014\017\073\020" +
    "\022\021\035\022\023\046\034\001\001\000\014\017\072" +
    "\020\022\021\035\022\023\046\034\001\001\000\014\017" +
    "\071\020\022\021\035\022\023\046\034\001\001\000\014" +
    "\017\070\020\022\021\035\022\023\046\034\001\001\000" +
    "\014\017\067\020\022\021\035\022\023\046\034\001\001" +
    "\000\014\017\066\020\022\021\035\022\023\046\034\001" +
    "\001\000\014\017\065\020\022\021\035\022\023\046\034" +
    "\001\001\000\014\017\064\020\022\021\035\022\023\046" +
    "\034\001\001\000\014\017\063\020\022\021\035\022\023" +
    "\046\034\001\001\000\014\017\062\020\022\021\035\022" +
    "\023\046\034\001\001\000\014\017\057\020\022\021\035" +
    "\022\023\046\034\001\001\000\002\001\001\000\014\017" +
    "\061\020\022\021\035\022\023\046\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\100\020\022\021\035\022\023\046\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\017\111\020\022" +
    "\021\035\022\023\046\034\001\001\000\016\017\105\020" +
    "\022\021\035\022\023\045\103\046\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\110\020\022\021\035\022\023\046\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\121\020" +
    "\022\021\035\022\023\046\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\015\154\025\127\026\140\027" +
    "\131\030\126\031\135\032\141\033\150\034\142\035\144" +
    "\036\145\037\137\047\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\311\020\022\021\035\022\023\046\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\252\020\022\021\035\022\023\046\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\175" +
    "\020\022\021\035\022\023\046\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\153" +
    "\015\132\025\127\026\140\027\131\030\126\031\135\032" +
    "\141\033\150\034\142\035\144\036\145\037\137\047\125" +
    "\001\001\000\034\015\154\025\127\026\140\027\131\030" +
    "\126\031\135\032\141\033\150\034\142\035\144\036\145" +
    "\037\137\047\125\001\001\000\002\001\001\000\014\017" +
    "\156\020\022\021\035\022\023\046\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\163\020\022\021\035\022\023\046\034" +
    "\001\001\000\002\001\001\000\014\017\165\020\022\021" +
    "\035\022\023\046\034\001\001\000\002\001\001\000\034" +
    "\015\167\025\127\026\140\027\131\030\126\031\135\032" +
    "\141\033\150\034\142\035\144\036\145\037\137\047\125" +
    "\001\001\000\002\001\001\000\036\003\171\015\132\025" +
    "\127\026\140\027\131\030\126\031\135\032\141\033\150" +
    "\034\142\035\144\036\145\037\137\047\125\001\001\000" +
    "\034\015\154\025\127\026\140\027\131\030\126\031\135" +
    "\032\141\033\150\034\142\035\144\036\145\037\137\047" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\017\202\020\022\021" +
    "\035\022\023\046\034\055\201\056\177\057\200\001\001" +
    "\000\020\017\202\020\022\021\035\022\023\046\034\055" +
    "\213\057\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\212\020\022\021\035\022" +
    "\023\046\034\001\001\000\034\015\205\025\127\026\140" +
    "\027\131\030\126\031\135\032\141\033\150\034\142\035" +
    "\144\036\145\037\137\047\125\001\001\000\002\001\001" +
    "\000\036\003\207\015\132\025\127\026\140\027\131\030" +
    "\126\031\135\032\141\033\150\034\142\035\144\036\145" +
    "\037\137\047\125\001\001\000\034\015\154\025\127\026" +
    "\140\027\131\030\126\031\135\032\141\033\150\034\142" +
    "\035\144\036\145\037\137\047\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\015\215\025\127\026\140\027\131\030\126\031" +
    "\135\032\141\033\150\034\142\035\144\036\145\037\137" +
    "\047\125\001\001\000\002\001\001\000\036\003\217\015" +
    "\132\025\127\026\140\027\131\030\126\031\135\032\141" +
    "\033\150\034\142\035\144\036\145\037\137\047\125\001" +
    "\001\000\034\015\154\025\127\026\140\027\131\030\126" +
    "\031\135\032\141\033\150\034\142\035\144\036\145\037" +
    "\137\047\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\017\244\020\022" +
    "\021\035\022\023\046\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\017\105\020\022\021\035\022\023" +
    "\045\233\046\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\237\020\022\021\035" +
    "\022\023\046\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\243\020\022\021\035" +
    "\022\023\046\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\250" +
    "\020\022\021\035\022\023\046\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\015\256" +
    "\016\261\025\255\026\257\027\131\030\254\031\135\032" +
    "\141\033\150\034\142\035\144\036\145\037\137\047\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\270\015\132\025\127" +
    "\026\140\027\131\030\126\031\135\032\141\033\150\034" +
    "\142\035\144\036\145\037\137\047\125\001\001\000\002" +
    "\001\001\000\034\015\263\025\127\026\140\027\131\030" +
    "\126\031\135\032\141\033\150\034\142\035\144\036\145" +
    "\037\137\047\125\001\001\000\002\001\001\000\036\003" +
    "\265\015\132\025\127\026\140\027\131\030\126\031\135" +
    "\032\141\033\150\034\142\035\144\036\145\037\137\047" +
    "\125\001\001\000\034\015\154\025\127\026\140\027\131" +
    "\030\126\031\135\032\141\033\150\034\142\035\144\036" +
    "\145\037\137\047\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\015\154\025\127\026\140\027\131\030" +
    "\126\031\135\032\141\033\150\034\142\035\144\036\145" +
    "\037\137\047\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\015\274\025\127\026\140\027\131\030\126" +
    "\031\135\032\141\033\150\034\142\035\144\036\145\037" +
    "\137\047\125\001\001\000\002\001\001\000\036\003\276" +
    "\015\132\025\127\026\140\027\131\030\126\031\135\032" +
    "\141\033\150\034\142\035\144\036\145\037\137\047\125" +
    "\001\001\000\034\015\154\025\127\026\140\027\131\030" +
    "\126\031\135\032\141\033\150\034\142\035\144\036\145" +
    "\037\137\047\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\304" +
    "\020\022\021\035\022\023\023\305\046\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\017\310\020\022" +
    "\021\035\022\023\046\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\015\313\025\127" +
    "\026\140\027\131\030\126\031\135\032\141\033\150\034" +
    "\142\035\144\036\145\037\137\047\125\001\001\000\002" +
    "\001\001\000\036\003\315\015\132\025\127\026\140\027" +
    "\131\030\126\031\135\032\141\033\150\034\142\035\144" +
    "\036\145\037\137\047\125\001\001\000\034\015\154\025" +
    "\127\026\140\027\131\030\126\031\135\032\141\033\150" +
    "\034\142\035\144\036\145\037\137\047\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\042\332\043\331\044\333" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\342\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\360\012\355\024\357\051\361" +
    "\001\001\000\036\003\351\015\132\025\127\026\140\027" +
    "\131\030\126\031\135\032\141\033\150\034\142\035\144" +
    "\036\145\037\137\047\125\001\001\000\034\015\154\025" +
    "\127\026\140\027\131\030\126\031\135\032\141\033\150" +
    "\034\142\035\144\036\145\037\137\047\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\362\024\357\051\361\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\364\015\132\025\127\026\140\027" +
    "\131\030\126\031\135\032\141\033\150\034\142\035\144" +
    "\036\145\037\137\047\125\001\001\000\034\015\154\025" +
    "\127\026\140\027\131\030\126\031\135\032\141\033\150" +
    "\034\142\035\144\036\145\037\137\047\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\374\017\372\020\022\021\035\022" +
    "\023\046\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\377\020" +
    "\022\021\035\022\023\046\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\u0103\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\u0106" +
    "\020\022\021\035\022\023\046\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\u0109\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\u010f\020\022\021\035" +
    "\022\023\046\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\u0113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\013\u011a\017\u0119\020\022\021\035\022\023" +
    "\046\034\054\u0122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\u0124\020\022\021\035\022\023\046\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u0128\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\u012b\020\022\021\035\022\023\046\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u012e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\u0135\020\022\021\035\022\023\046\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\013\u011a\017" +
    "\u0119\020\022\021\035\022\023\046\034\054\u0138\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\u014a\044\333\001\001\000\002\001\001\000\004" +
    "\014\u013e\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\u0145\012\355\024\357\051\361\001\001\000\036" +
    "\003\u0142\015\132\025\127\026\140\027\131\030\126\031" +
    "\135\032\141\033\150\034\142\035\144\036\145\037\137" +
    "\047\125\001\001\000\034\015\154\025\127\026\140\027" +
    "\131\030\126\031\135\032\141\033\150\034\142\035\144" +
    "\036\145\037\137\047\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\362\024\357\051\361\001\001" +
    "\000\036\003\u0147\015\132\025\127\026\140\027\131\030" +
    "\126\031\135\032\141\033\150\034\142\035\144\036\145" +
    "\037\137\047\125\001\001\000\034\015\154\025\127\026" +
    "\140\027\131\030\126\031\135\032\141\033\150\034\142" +
    "\035\144\036\145\037\137\047\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\u014e" +
    "\001\001\000\004\014\u014d\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u0150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\u0157\024\u0153\050\u0156\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\u015a\017" +
    "\u0159\020\022\021\035\022\023\046\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\u016a\001\001\000" +
    "\002\001\001\000\014\017\u015e\020\022\021\035\022\023" +
    "\046\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0162\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\u0165\020\022\021\035\022" +
    "\023\046\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0168\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\u0171\020\022\021\035\022\023\046\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\362\024\357\051\361\001\001\000\002\001\001" +
    "\000\010\042\u0177\043\331\044\333\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\u017f" +
    "\012\355\024\357\051\361\001\001\000\036\003\u017c\015" +
    "\132\025\127\026\140\027\131\030\126\031\135\032\141" +
    "\033\150\034\142\035\144\036\145\037\137\047\125\001" +
    "\001\000\034\015\154\025\127\026\140\027\131\030\126" +
    "\031\135\032\141\033\150\034\142\035\144\036\145\037" +
    "\137\047\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\362\024\357\051\361\001\001\000\036\003" +
    "\u0181\015\132\025\127\026\140\027\131\030\126\031\135" +
    "\032\141\033\150\034\142\035\144\036\145\037\137\047" +
    "\125\001\001\000\034\015\154\025\127\026\140\027\131" +
    "\030\126\031\135\032\141\033\150\034\142\035\144\036" +
    "\145\037\137\047\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\u018b\012\355\024\357\051\361\001\001\000\036\003\u0188" +
    "\015\132\025\127\026\140\027\131\030\126\031\135\032" +
    "\141\033\150\034\142\035\144\036\145\037\137\047\125" +
    "\001\001\000\034\015\154\025\127\026\140\027\131\030" +
    "\126\031\135\032\141\033\150\034\142\035\144\036\145" +
    "\037\137\047\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\362\024\357\051\361\001\001\000\036" +
    "\003\u018d\015\132\025\127\026\140\027\131\030\126\031" +
    "\135\032\141\033\150\034\142\035\144\036\145\037\137" +
    "\047\125\001\001\000\034\015\154\025\127\026\140\027" +
    "\131\030\126\031\135\032\141\033\150\034\142\035\144" +
    "\036\145\037\137\047\125\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= cuerpo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // cuerpo ::= cuerpo estructura 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.addAll(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo ::= estructura 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>();  RESULT.addAll(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // estructura ::= TYPE declaraciones_tipos 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // estructura ::= CONST declaracion_constantes 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // estructura ::= VAR declaraciones_variables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // estructura ::= declaracion_funcion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(Collections.singletonList(a)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // estructura ::= declaracion_procedimiento 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(Collections.singletonList(a)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // estructura ::= BEGIN instrucciones END PUNTO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= writeln FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= asignacion_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= asignacion_array FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= asignacion_record FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= llamada_metodo FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= sentencia_case 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= sentencia_while 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= sentencia_for 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= sentencia_repeat 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= transferencia_break FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= transferencia_continue FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion_fin ::= writeln 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion_fin ::= asignacion_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion_fin ::= asignacion_array 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion_procedimiento ::= PROCEDURE ID PAR1 lista_param_f PAR2 FINCADENA VAR declaraciones_variables BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		          LinkedList<Instruccion> cuerpo = new LinkedList<>();
            cuerpo.addAll(d); // d es LinkedList<Instruccion>
            cuerpo.addAll(e);  
        RESULT = new DeclaracionFuncion(a, b, "void", cuerpo, aleft, aright); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion_procedimiento ::= PROCEDURE ID PAR1 lista_param_f PAR2 FINCADENA BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionFuncion(a, b, "void", d,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion_procedimiento ::= PROCEDURE ID PAR1 PAR2 FINCADENA VAR declaraciones_variables BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		          LinkedList<Instruccion> cuerpo = new LinkedList<>();
            cuerpo.addAll(d); // d es LinkedList<Instruccion>
            cuerpo.addAll(e);  
        RESULT = new DeclaracionFuncion(a, new LinkedList<HashMap>(),"void", cuerpo, aleft, aright); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion_procedimiento ::= PROCEDURE ID PAR1 PAR2 FINCADENA BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionFuncion(a, new LinkedList<HashMap>(), "void", d,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion_funcion ::= FUNCTION ID PAR1 lista_param_f PAR2 DOSPUNTOS tipos_dato_var FINCADENA VAR declaraciones_variables BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		          LinkedList<Instruccion> cuerpo = new LinkedList<>();
            cuerpo.addAll(d); // d es LinkedList<Instruccion>
            cuerpo.addAll(e);  
        RESULT = new DeclaracionFuncion(a, b, c, cuerpo, aleft, aright); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion_funcion ::= FUNCTION ID PAR1 lista_param_f PAR2 DOSPUNTOS tipos_dato_var FINCADENA BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionFuncion(a, b, c, d,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion_funcion ::= FUNCTION ID PAR1 PAR2 DOSPUNTOS tipos_dato_var FINCADENA VAR declaraciones_variables BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		          LinkedList<Instruccion> cuerpo = new LinkedList<>();
            cuerpo.addAll(d); // d es LinkedList<Instruccion>
            cuerpo.addAll(e);  
        RESULT = new DeclaracionFuncion(a, new LinkedList<HashMap>(), c, cuerpo, aleft, aright); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion_funcion ::= FUNCTION ID PAR1 PAR2 DOSPUNTOS tipos_dato_var FINCADENA BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionFuncion(a, new LinkedList<HashMap>(), c, d,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_param_f ::= lista_param_f FINCADENA lista_params_id DOSPUNTOS tipos_dato_var 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = a;
                    // Recorrer la lista de identificadores (b) y asignarles el tipo (c)
                    for (String id : b) {
                        var hm2 = new HashMap<String, Object>();
                        hm2.put("id", id);
                        hm2.put("tipo", c);
                        RESULT.add(hm2);
                    }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_param_f",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_param_f ::= lista_params_id DOSPUNTOS tipos_dato_var 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new LinkedList<HashMap>(); 
                    // Recorrer la lista de identificadores (a) y asignarles el tipo (b)
                    for (String id : a) {
                        var hm = new HashMap<String, Object>();
                        hm.put("id", id);
                        hm.put("tipo", b);
                        RESULT.add(hm);
                    }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_param_f",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // lista_params_id ::= lista_params_id COMA tipo_id_f 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                                    RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_params_id",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lista_params_id ::= tipo_id_f 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<String>(); 
                                                    RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_params_id",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo_id_f ::= VAR ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_id_f",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo_id_f ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_id_f",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // llamada_metodo ::= ID PAR1 parametros_llamada PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new LlamadoFuncion(a,b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metodo",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // llamada_metodo ::= ID PAR1 PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT= new LlamadoFuncion(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metodo",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // llamada_funcion ::= ID PAR1 parametros_llamada PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new LlamadoFuncion(a,b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // llamada_funcion ::= ID PAR1 PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT= new LlamadoFuncion(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros_llamada ::= parametros_llamada COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros_llamada ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaraciones_tipos ::= declaraciones_tipos declaracion_tipo 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaraciones_tipos ::= declaracion_tipo 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion_tipo ::= listado_id IGUAL tipos_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipos(a, b,aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaracion_tipo ::= listado_id IGUAL expresion PUNTO PUNTO PUNTO expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipoSubRango(a, b,c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaracion_tipo ::= listado_id IGUAL ARRAY CORCHETE1 expresion PUNTO PUNTO expresion CORCHETE2 OF tipos_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipoArreglo(a,b,c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracion_tipo ::= listado_id IGUAL ARRAY CORCHETE1 expresion CORCHETE2 OF tipos_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipoArreglo(a,new Nativo(0, new Tipo("integer",TipoDato.INTEGER), aleft, aright ),c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion_tipo ::= declaracion_record 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion_tipo ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion_tipo ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion_record ::= listado_id IGUAL RECORD lista_record END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionTipoRecord(a.getFirst(),b,  aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_record",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_record ::= lista_record ID DOSPUNTOS tipo_record 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", b);
                                            hm2.put("tipo", c);
                                            hm2.put ("valor", null);
                                            RESULT.add(hm2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_record",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_record ::= ID DOSPUNTOS tipo_record 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",a);
                                            hm.put("tipo", b);
                                            hm.put ("valor", null);
                                            RESULT.add(hm);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_record",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipo_record ::= tipos_variable FINCADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_record",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipo_record ::= expresion PUNTO PUNTO PUNTO expresion FINCADENA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Tipo("integer", TipoDato.INTEGER,  "subrange"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_record",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipo_record ::= ARRAY CORCHETE1 expresion PUNTO PUNTO expresion CORCHETE2 OF tipos_variable FINCADENA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Tipo(d.getNombre(), d.getTipo(), "array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_record",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipo_record ::= ARRAY CORCHETE1 expresion CORCHETE2 OF tipos_variable FINCADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Tipo (d.getNombre(), d.getTipo(), "array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_record",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipo_record ::= ID FINCADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_record",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaracion_constantes ::= declaracion_constantes ID IGUAL expresion FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;  
                                    RESULT.add(new DeclaracionConstante(false, b,c, new Tipo(TipoDato.INTEGER),bleft, bright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaracion_constantes ::= ID IGUAL expresion FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(new DeclaracionConstante(false, b,c, new Tipo(TipoDato.INTEGER),bleft, bright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaracion_constantes ::= error FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaracion_constantes ::= error 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaraciones_variables ::= declaraciones_variables declaracion_variables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_variables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaraciones_variables ::= declaracion_variables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_variables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracion_variables ::= listado_id DOSPUNTOS tipos_dato_var FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DeclaracionVariable(true, a,null, b,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracion_variables ::= listado_id DOSPUNTOS expresion PUNTO PUNTO PUNTO expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVarSubrango(a, b,c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracion_variables ::= listado_id DOSPUNTOS ARRAY CORCHETE1 expresion PUNTO PUNTO expresion CORCHETE2 OF tipos_dato_var FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVarArreglo(a,b,c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaracion_variables ::= listado_id DOSPUNTOS ARRAY CORCHETE1 expresion CORCHETE2 OF tipos_dato_var FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVarArreglo(a,new Nativo(0, new Tipo("integer",TipoDato.INTEGER), aleft, aright ),c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaracion_variables ::= declaracion_var_record 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaracion_variables ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaracion_variables ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declaracion_var_record ::= listado_id IGUAL RECORD lista_record END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionVarRecord(a.getFirst(),b,  aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_var_record",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // listado_id ::= listado_id COMA ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                                    RESULT.add(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listado_id",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // listado_id ::= ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<String>(); 
                                                    RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listado_id",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipos_variable ::= INTEGER 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("integer",TipoDato.INTEGER, "integer");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipos_variable ::= REAL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("real",TipoDato.REAL, "real");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tipos_variable ::= STRING 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("string",TipoDato.CADENA, "string");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipos_variable ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("char",TipoDato.CARACTER, "char");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipos_variable ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("boolean",TipoDato.BOOLEANO, "boolean");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tipos_variable ::= VOID 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("void",TipoDato.VOID, "void");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tipos_dato_var ::= INTEGER 
            {
              String RESULT =null;
		   RESULT="integer";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tipos_dato_var ::= REAL 
            {
              String RESULT =null;
		   RESULT="real";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tipos_dato_var ::= STRING 
            {
              String RESULT =null;
		   RESULT="string";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tipos_dato_var ::= CHAR 
            {
              String RESULT =null;
		   RESULT="char";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tipos_dato_var ::= BOOL 
            {
              String RESULT =null;
		   RESULT="boolean";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipos_dato_var ::= VOID 
            {
              String RESULT =null;
		   RESULT="void";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipos_dato_var ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // writeln ::= IMPRIMIR PAR1 expresion_conca PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Writeln(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion_conca ::= expresion_conca COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                                    RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_conca",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion_conca ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); 
                                                    RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_conca",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // asignacion_variable ::= ID DOSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // asignacion_record ::= ID PUNTO ID DOSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVarRecord(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_record",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // asignacion_array ::= ID CORCHETE1 expresion CORCHETE2 DOSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVarArreglo(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_array",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentencia_if ::= IF expresion THEN instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new SentenciaIf(a, new LinkedList<>(Collections.singletonList(b)), aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentencia_if ::= IF expresion THEN BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaIf(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentencia_if ::= IF expresion THEN BEGIN instrucciones END ELSE instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaIfElse(a, b,new LinkedList<>(Collections.singletonList(c)) , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentencia_if ::= IF expresion THEN instruccion_fin ELSE instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new SentenciaIfElse(a, new LinkedList<>(Collections.singletonList(b)), new LinkedList<>(Collections.singletonList(c)), aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencia_if ::= IF expresion THEN instruccion_fin ELSE BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaIfElse(a, new LinkedList<>(Collections.singletonList(b)),c , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentencia_if ::= IF expresion THEN BEGIN instrucciones END ELSE BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaIfElse(a, b,c , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentencia_case ::= CASE expresion OF casos_case ELSE BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<CasoCase> b = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = new SentenciaCase(a, b, c, aleft, aright);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentencia_case ::= CASE expresion OF casos_case ELSE instruccion END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<CasoCase> b = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = new SentenciaCase(a, b, new LinkedList<>(Collections.singletonList(c)), aleft, aright);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // casos_case ::= casos_case caso_case 
            {
              LinkedList<CasoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoCase> a = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoCase b = (CasoCase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_case",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // casos_case ::= caso_case 
            {
              LinkedList<CasoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoCase a = (CasoCase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_case",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // caso_case ::= expresiones_case DOSPUNTOS BEGIN instrucciones END FINCADENA 
            {
              CasoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new CasoCase(a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_case",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // caso_case ::= expresiones_case DOSPUNTOS instruccion 
            {
              CasoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CasoCase(a, new LinkedList<>(Collections.singletonList(b))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_case",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expresiones_case ::= expresiones_case COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_case",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expresiones_case ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_case",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentencia_while ::= WHILE expresion DO BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentencia_while ::= WHILE expresion DO instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaWhile(a,new LinkedList<>(Collections.singletonList(b)), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentencia_for ::= FOR ID DOSPUNTOS IGUAL expresion TO expresion DO instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentenciaFor(new AsignacionVariable(a, b, aleft, aright), c, new AccesoVariable(a, aleft, aright) , new LinkedList<>(Collections.singletonList(d)),new AsignacionVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo("integer",TipoDato.INTEGER), aleft, aright) , aleft, aright), aleft, aright),aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentencia_for ::= FOR ID DOSPUNTOS IGUAL expresion TO expresion DO BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  		   RESULT = new SentenciaFor(new AsignacionVariable(a, b, aleft, aright), c, new AccesoVariable(a, aleft, aright) , d,new AsignacionVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo("integer",TipoDato.INTEGER), aleft, aright) , aleft, aright), aleft, aright),aleft, aright);   
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencia_repeat ::= REPEAT instrucciones UNTIL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaRepeat(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_repeat",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // transferencia_break ::= BREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = new SentenciaBreak(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_break",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // transferencia_continue ::= CONTINUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = new SentenciaContinue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_continue",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresion ::= expresionAritmetica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expresion ::= expresionRelacional 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expresion ::= expresionLogica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresion ::= llamada_funcion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo("integer",TipoDato.INTEGER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo("real",TipoDato.REAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo("string",TipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo("char",TipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expresion ::= BOOLEAN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo("boolean",TipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expresion ::= ID CORCHETE1 expresion CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVarArreglo(a, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expresionAritmetica ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionNegacionU(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expresionAritmetica ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionSuma(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expresionAritmetica ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionResta(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expresionAritmetica ::= expresion MULT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionMultiplicacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expresionAritmetica ::= expresion DIV expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDivision (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expresionAritmetica ::= expresion DIVE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDiv(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expresionAritmetica ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionModulo (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expresionAritmetica ::= PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expresionRelacional ::= expresion IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Igualacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expresionRelacional ::= expresion DIFERENTE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Diferenciacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expresionRelacional ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expresionRelacional ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expresionRelacional ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expresionRelacional ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expresionLogica ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorNot(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expresionLogica ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAnd(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expresionLogica ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOr(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expresionLogica ::= expresion AND THEN expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAndThen(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expresionLogica ::= expresion OR ELSE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOrThen(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
