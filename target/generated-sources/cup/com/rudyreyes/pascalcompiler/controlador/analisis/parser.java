
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.rudyreyes.pascalcompiler.controlador.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.rudyreyes.pascalcompiler.modelo.abstracto.Instruccion;
import com.rudyreyes.pascalcompiler.modelo.simbolo.*;
import java.util.HashMap;
import java.util.Collections;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.writeln.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.variables.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.sentenciasControl.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.tipos.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.ciclos.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.sentenciaTransferencia.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.nativo.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.aritmeticas.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.relacionales.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.logicas.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.variables.*;
import com.rudyreyes.pascalcompiler.modelo.errores.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\004\004\000\002\004" +
    "\003\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\006\000\002\003\004\000\002\003\003\000" +
    "\002\011\004\000\002\011\004\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\004" +
    "\000\002\011\003\000\002\007\007\000\002\007\006\000" +
    "\002\007\004\000\002\007\003\000\002\006\007\000\002" +
    "\006\006\000\002\006\004\000\002\006\003\000\002\005" +
    "\007\000\002\005\006\000\002\005\004\000\002\005\003" +
    "\000\002\017\005\000\002\017\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\020\006\000\002\021" +
    "\006\000\002\022\010\000\002\022\013\000\002\025\015" +
    "\000\002\025\014\000\002\034\004\000\002\034\003\000" +
    "\002\033\010\000\002\033\005\000\002\035\005\000\002" +
    "\035\003\000\002\026\013\000\002\026\010\000\002\027" +
    "\013\000\002\027\016\000\002\030\007\000\002\031\004" +
    "\000\002\032\004\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\014\004\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\016\004\000\002\016\005" +
    "\000\002\016\005\000\002\016\006\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\012\012\007\015\005\016\004\021\011\001" +
    "\002\000\006\003\272\007\271\001\002\000\006\003\257" +
    "\007\012\001\002\000\014\002\254\012\007\015\005\016" +
    "\004\021\011\001\002\000\026\003\057\007\046\011\044" +
    "\060\045\061\056\063\041\065\061\067\062\071\053\072" +
    "\037\001\002\000\014\002\uffff\012\uffff\015\uffff\016\uffff" +
    "\021\uffff\001\002\000\006\003\014\007\012\001\002\000" +
    "\010\017\uffe0\020\uffe0\046\uffe0\001\002\000\016\002\ufffe" +
    "\007\012\012\ufffe\015\ufffe\016\ufffe\021\ufffe\001\002\000" +
    "\020\002\uffea\007\uffea\010\031\012\uffea\015\uffea\016\uffea" +
    "\021\uffea\001\002\000\006\020\016\046\017\001\002\000" +
    "\004\007\030\001\002\000\016\022\020\023\022\024\025" +
    "\025\023\026\021\027\026\001\002\000\004\010\uffdf\001" +
    "\002\000\004\010\uffdd\001\002\000\004\010\uffde\001\002" +
    "\000\004\010\uffdb\001\002\000\004\010\027\001\002\000" +
    "\004\010\uffda\001\002\000\004\010\uffdc\001\002\000\016" +
    "\002\uffec\007\uffec\012\uffec\015\uffec\016\uffec\021\uffec\001" +
    "\002\000\010\017\uffe1\020\uffe1\046\uffe1\001\002\000\016" +
    "\002\uffeb\007\uffeb\012\uffeb\015\uffeb\016\uffeb\021\uffeb\001" +
    "\002\000\006\020\016\046\033\001\002\000\016\022\020" +
    "\023\022\024\025\025\023\026\021\027\026\001\002\000" +
    "\004\010\035\001\002\000\016\002\uffed\007\uffed\012\uffed" +
    "\015\uffed\016\uffed\021\uffed\001\002\000\030\003\057\007" +
    "\046\011\044\013\252\060\045\061\056\063\041\065\061" +
    "\067\062\071\053\072\037\001\002\000\004\010\251\001" +
    "\002\000\004\010\250\001\002\000\004\030\237\001\002" +
    "\000\054\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\011" +
    "\ufff6\013\ufff6\030\ufff6\033\ufff6\047\ufff6\052\ufff6\056\ufff6" +
    "\057\ufff6\060\ufff6\061\ufff6\063\ufff6\065\ufff6\067\ufff6\070" +
    "\ufff6\071\ufff6\072\ufff6\001\002\000\032\003\ufff9\007\ufff9" +
    "\011\ufff9\013\ufff9\060\ufff9\061\ufff9\063\ufff9\065\ufff9\067" +
    "\ufff9\070\ufff9\071\ufff9\072\ufff9\001\002\000\004\030\234" +
    "\001\002\000\004\030\223\001\002\000\004\017\220\001" +
    "\002\000\054\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\011\ufff0\013\ufff0\030\ufff0\033\ufff0\047\ufff0\052\ufff0\056" +
    "\ufff0\057\ufff0\060\ufff0\061\ufff0\063\ufff0\065\ufff0\067\ufff0" +
    "\070\ufff0\071\ufff0\072\ufff0\001\002\000\004\010\217\001" +
    "\002\000\054\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\011\ufff5\013\ufff5\030\ufff5\033\ufff5\047\ufff5\052\ufff5\056" +
    "\ufff5\057\ufff5\060\ufff5\061\ufff5\063\ufff5\065\ufff5\067\ufff5" +
    "\070\ufff5\071\ufff5\072\ufff5\001\002\000\054\003\ufff3\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\013\ufff3\030\ufff3" +
    "\033\ufff3\047\ufff3\052\ufff3\056\ufff3\057\ufff3\060\ufff3\061" +
    "\ufff3\063\ufff3\065\ufff3\067\ufff3\070\ufff3\071\ufff3\072\ufff3" +
    "\001\002\000\004\010\216\001\002\000\054\003\ufff2\004" +
    "\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\013\ufff2\030\ufff2" +
    "\033\ufff2\047\ufff2\052\ufff2\056\ufff2\057\ufff2\060\ufff2\061" +
    "\ufff2\063\ufff2\065\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2" +
    "\001\002\000\054\003\ufff1\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\011\ufff1\013\ufff1\030\ufff1\033\ufff1\047\ufff1\052\ufff1" +
    "\056\ufff1\057\ufff1\060\ufff1\061\ufff1\063\ufff1\065\ufff1\067" +
    "\ufff1\070\ufff1\071\ufff1\072\ufff1\001\002\000\004\030\165" +
    "\001\002\000\056\003\uffee\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\164\011\uffee\013\uffee\030\uffee\033\uffee\047\uffee" +
    "\052\uffee\056\uffee\057\uffee\060\uffee\061\uffee\063\uffee\065" +
    "\uffee\067\uffee\070\uffee\071\uffee\072\uffee\001\002\000\054" +
    "\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4\013" +
    "\ufff4\030\ufff4\033\ufff4\047\ufff4\052\ufff4\056\ufff4\057\ufff4" +
    "\060\ufff4\061\ufff4\063\ufff4\065\ufff4\067\ufff4\070\ufff4\071" +
    "\ufff4\072\ufff4\001\002\000\004\007\150\001\002\000\026" +
    "\003\057\007\046\011\044\060\045\061\056\063\041\065" +
    "\061\067\062\071\053\072\037\001\002\000\030\003\057" +
    "\007\046\011\044\060\045\061\056\063\041\065\061\067" +
    "\062\070\065\071\053\072\037\001\002\000\032\003\ufffa" +
    "\007\ufffa\011\ufffa\013\ufffa\060\ufffa\061\ufffa\063\ufffa\065" +
    "\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\001\002\000\024" +
    "\004\066\005\074\006\071\007\077\030\076\033\072\047" +
    "\101\056\073\057\102\001\002\000\052\010\uffc1\017\uffc1" +
    "\020\uffc1\031\uffc1\032\uffc1\033\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\050\uffc1\053\uffc1\064\uffc1\066\uffc1\001\002\000" +
    "\052\010\uffc6\017\uffc6\020\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\050\uffc6\053\uffc6\064\uffc6" +
    "\066\uffc6\001\002\000\052\010\uffc4\017\uffc4\020\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\050" +
    "\uffc4\053\uffc4\064\uffc4\066\uffc4\001\002\000\052\010\uffc2" +
    "\017\uffc2\020\uffc2\031\uffc2\032\uffc2\033\uffc2\035\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2" +
    "\045\uffc2\046\uffc2\050\uffc2\053\uffc2\064\uffc2\066\uffc2\001" +
    "\002\000\024\004\066\005\074\006\071\007\077\030\076" +
    "\033\072\047\101\056\073\057\102\001\002\000\052\010" +
    "\uffbf\017\uffbf\020\uffbf\031\uffbf\032\uffbf\033\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\046\uffbf\050\uffbf\053\uffbf\064\uffbf\066\uffbf" +
    "\001\002\000\052\010\uffc3\017\uffc3\020\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\050\uffc3\053" +
    "\uffc3\064\uffc3\066\uffc3\001\002\000\040\010\146\032\113" +
    "\033\106\035\111\036\115\037\110\040\112\041\120\042" +
    "\107\043\105\044\116\045\114\046\117\050\104\053\121" +
    "\001\002\000\024\004\066\005\074\006\071\007\077\030" +
    "\076\033\072\047\101\056\073\057\102\001\002\000\052" +
    "\010\uffbe\017\uffbe\020\uffbe\031\uffbe\032\uffbe\033\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\050\uffbe\053\uffbe\064\uffbe\066" +
    "\uffbe\001\002\000\052\010\uffc5\017\uffc5\020\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\050\uffc5" +
    "\053\uffc5\064\uffc5\066\uffc5\001\002\000\024\004\066\005" +
    "\074\006\071\007\077\030\076\033\072\047\101\056\073" +
    "\057\102\001\002\000\052\010\uffc0\017\uffc0\020\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\050" +
    "\uffc0\053\uffc0\064\uffc0\066\uffc0\001\002\000\052\010\uffaf" +
    "\017\uffaf\020\uffaf\031\uffaf\032\113\033\106\035\111\036" +
    "\115\037\110\040\112\041\120\042\107\043\105\044\116" +
    "\045\114\046\117\050\uffaf\053\uffaf\064\uffaf\066\uffaf\001" +
    "\002\000\026\004\066\005\074\006\071\007\077\030\076" +
    "\033\072\047\101\051\141\056\073\057\102\001\002\000" +
    "\024\004\066\005\074\006\071\007\077\030\076\033\072" +
    "\047\101\056\073\057\102\001\002\000\024\004\066\005" +
    "\074\006\071\007\077\030\076\033\072\047\101\056\073" +
    "\057\102\001\002\000\024\004\066\005\074\006\071\007" +
    "\077\030\076\033\072\047\101\056\073\057\102\001\002" +
    "\000\024\004\066\005\074\006\071\007\077\030\076\033" +
    "\072\047\101\056\073\057\102\001\002\000\024\004\066" +
    "\005\074\006\071\007\077\030\076\033\072\047\101\056" +
    "\073\057\102\001\002\000\024\004\066\005\074\006\071" +
    "\007\077\030\076\033\072\047\101\056\073\057\102\001" +
    "\002\000\024\004\066\005\074\006\071\007\077\030\076" +
    "\033\072\047\101\056\073\057\102\001\002\000\024\004" +
    "\066\005\074\006\071\007\077\030\076\033\072\047\101" +
    "\056\073\057\102\001\002\000\024\004\066\005\074\006" +
    "\071\007\077\030\076\033\072\047\101\056\073\057\102" +
    "\001\002\000\024\004\066\005\074\006\071\007\077\030" +
    "\076\033\072\047\101\056\073\057\102\001\002\000\024" +
    "\004\066\005\074\006\071\007\077\030\076\033\072\047" +
    "\101\056\073\057\102\001\002\000\024\004\066\005\074" +
    "\006\071\007\077\030\076\033\072\047\101\056\073\057" +
    "\102\001\002\000\026\004\066\005\074\006\071\007\077" +
    "\030\076\033\072\047\101\052\123\056\073\057\102\001" +
    "\002\000\052\010\uffad\017\uffad\020\uffad\031\uffad\032\113" +
    "\033\106\035\111\036\115\037\110\040\112\041\120\042" +
    "\107\043\105\044\116\045\114\046\117\050\104\053\uffad" +
    "\064\uffad\066\uffad\001\002\000\024\004\066\005\074\006" +
    "\071\007\077\030\076\033\072\047\101\056\073\057\102" +
    "\001\002\000\052\010\uffab\017\uffab\020\uffab\031\uffab\032" +
    "\113\033\106\035\111\036\115\037\110\040\112\041\120" +
    "\042\107\043\105\044\116\045\114\046\117\050\104\053" +
    "\121\064\uffab\066\uffab\001\002\000\052\010\uffb4\017\uffb4" +
    "\020\uffb4\031\uffb4\032\113\033\106\035\111\036\115\037" +
    "\110\040\112\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\050\uffb4\053\uffb4\064\uffb4\066\uffb4\001\002\000" +
    "\052\010\uffb5\017\uffb5\020\uffb5\031\uffb5\032\113\033\106" +
    "\035\111\036\115\037\110\040\112\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\046\uffb5\050\uffb5\053\uffb5\064\uffb5" +
    "\066\uffb5\001\002\000\052\010\uffb1\017\uffb1\020\uffb1\031" +
    "\uffb1\032\113\033\106\035\111\036\115\037\110\040\112" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\050" +
    "\uffb1\053\uffb1\064\uffb1\066\uffb1\001\002\000\052\010\uffb9" +
    "\017\uffb9\020\uffb9\031\uffb9\032\uffb9\033\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\050\uffb9\053\uffb9\064\uffb9\066\uffb9\001" +
    "\002\000\052\010\uffb0\017\uffb0\020\uffb0\031\uffb0\032\113" +
    "\033\106\035\111\036\115\037\110\040\112\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\050\uffb0\053\uffb0" +
    "\064\uffb0\066\uffb0\001\002\000\052\010\uffbc\017\uffbc\020" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\035\111\036\115\037\110" +
    "\040\112\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\050\uffbc\053\uffbc\064\uffbc\066\uffbc\001\002\000\052" +
    "\010\uffb7\017\uffb7\020\uffb7\031\uffb7\032\uffb7\033\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\044\uffb7\045\uffb7\046\uffb7\050\uffb7\053\uffb7\064\uffb7\066" +
    "\uffb7\001\002\000\052\010\uffba\017\uffba\020\uffba\031\uffba" +
    "\032\uffba\033\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\050\uffba" +
    "\053\uffba\064\uffba\066\uffba\001\002\000\052\010\uffb8\017" +
    "\uffb8\020\uffb8\031\uffb8\032\uffb8\033\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045" +
    "\uffb8\046\uffb8\050\uffb8\053\uffb8\064\uffb8\066\uffb8\001\002" +
    "\000\052\010\uffb3\017\uffb3\020\uffb3\031\uffb3\032\113\033" +
    "\106\035\111\036\115\037\110\040\112\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\046\uffb3\050\uffb3\053\uffb3\064" +
    "\uffb3\066\uffb3\001\002\000\052\010\uffbb\017\uffbb\020\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\035\111\036\115\037\110\040" +
    "\112\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb" +
    "\050\uffbb\053\uffbb\064\uffbb\066\uffbb\001\002\000\052\010" +
    "\uffb2\017\uffb2\020\uffb2\031\uffb2\032\113\033\106\035\111" +
    "\036\115\037\110\040\112\041\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\046\uffb2\050\uffb2\053\uffb2\064\uffb2\066\uffb2" +
    "\001\002\000\024\004\066\005\074\006\071\007\077\030" +
    "\076\033\072\047\101\056\073\057\102\001\002\000\052" +
    "\010\uffae\017\uffae\020\uffae\031\uffae\032\113\033\106\035" +
    "\111\036\115\037\110\040\112\041\120\042\107\043\105" +
    "\044\116\045\114\046\117\050\uffae\053\uffae\064\uffae\066" +
    "\uffae\001\002\000\052\010\uffac\017\uffac\020\uffac\031\uffac" +
    "\032\113\033\106\035\111\036\115\037\110\040\112\041" +
    "\120\042\107\043\105\044\116\045\114\046\117\050\104" +
    "\053\121\064\uffac\066\uffac\001\002\000\040\031\145\032" +
    "\113\033\106\035\111\036\115\037\110\040\112\041\120" +
    "\042\107\043\105\044\116\045\114\046\117\050\104\053" +
    "\121\001\002\000\052\010\uffb6\017\uffb6\020\uffb6\031\uffb6" +
    "\032\uffb6\033\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\050\uffb6" +
    "\053\uffb6\064\uffb6\066\uffb6\001\002\000\054\003\uffc9\004" +
    "\uffc9\005\uffc9\006\uffc9\007\uffc9\011\uffc9\013\uffc9\030\uffc9" +
    "\033\uffc9\047\uffc9\052\uffc9\056\uffc9\057\uffc9\060\uffc9\061" +
    "\uffc9\063\uffc9\065\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9" +
    "\001\002\000\052\010\uffbd\017\uffbd\020\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\050\uffbd\053" +
    "\uffbd\064\uffbd\066\uffbd\001\002\000\004\017\151\001\002" +
    "\000\004\046\152\001\002\000\024\004\066\005\074\006" +
    "\071\007\077\030\076\033\072\047\101\056\073\057\102" +
    "\001\002\000\040\032\113\033\106\035\111\036\115\037" +
    "\110\040\112\041\120\042\107\043\105\044\116\045\114" +
    "\046\117\050\104\053\121\066\154\001\002\000\024\004" +
    "\066\005\074\006\071\007\077\030\076\033\072\047\101" +
    "\056\073\057\102\001\002\000\040\032\113\033\106\035" +
    "\111\036\115\037\110\040\112\041\120\042\107\043\105" +
    "\044\116\045\114\046\117\050\104\053\121\064\156\001" +
    "\002\000\030\003\057\007\046\011\044\012\160\060\045" +
    "\061\056\063\041\065\061\067\062\071\053\072\037\001" +
    "\002\000\054\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb" +
    "\011\uffcb\013\uffcb\030\uffcb\033\uffcb\047\uffcb\052\uffcb\056" +
    "\uffcb\057\uffcb\060\uffcb\061\uffcb\063\uffcb\065\uffcb\067\uffcb" +
    "\070\uffcb\071\uffcb\072\uffcb\001\002\000\026\003\057\007" +
    "\046\011\044\060\045\061\056\063\041\065\061\067\062" +
    "\071\053\072\037\001\002\000\030\003\057\007\046\011" +
    "\044\013\162\060\045\061\056\063\041\065\061\067\062" +
    "\071\053\072\037\001\002\000\004\010\163\001\002\000" +
    "\054\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca\011\uffca" +
    "\013\uffca\030\uffca\033\uffca\047\uffca\052\uffca\056\uffca\057" +
    "\uffca\060\uffca\061\uffca\063\uffca\065\uffca\067\uffca\070\uffca" +
    "\071\uffca\072\uffca\001\002\000\054\003\uffef\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\011\uffef\013\uffef\030\uffef\033\uffef" +
    "\047\uffef\052\uffef\056\uffef\057\uffef\060\uffef\061\uffef\063" +
    "\uffef\065\uffef\067\uffef\070\uffef\071\uffef\072\uffef\001\002" +
    "\000\024\004\066\005\074\006\071\007\077\030\076\033" +
    "\072\047\101\056\073\057\102\001\002\000\040\031\167" +
    "\032\113\033\106\035\111\036\115\037\110\040\112\041" +
    "\120\042\107\043\105\044\116\045\114\046\117\050\104" +
    "\053\121\001\002\000\004\062\170\001\002\000\024\004" +
    "\066\005\074\006\071\007\077\030\076\033\072\047\101" +
    "\056\073\057\102\001\002\000\026\004\066\005\074\006" +
    "\071\007\077\030\076\033\072\047\101\052\206\056\073" +
    "\057\102\001\002\000\006\017\176\020\175\001\002\000" +
    "\026\004\uffd2\005\uffd2\006\uffd2\007\uffd2\030\uffd2\033\uffd2" +
    "\047\uffd2\052\uffd2\056\uffd2\057\uffd2\001\002\000\042\017" +
    "\uffce\020\uffce\032\113\033\106\035\111\036\115\037\110" +
    "\040\112\041\120\042\107\043\105\044\116\045\114\046" +
    "\117\050\104\053\121\001\002\000\024\004\066\005\074" +
    "\006\071\007\077\030\076\033\072\047\101\056\073\057" +
    "\102\001\002\000\030\003\057\007\046\011\044\012\200" +
    "\060\045\061\056\063\041\065\061\067\062\071\053\072" +
    "\037\001\002\000\026\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\030\uffd0\033\uffd0\047\uffd0\052\uffd0\056\uffd0\057\uffd0\001" +
    "\002\000\026\003\057\007\046\011\044\060\045\061\056" +
    "\063\041\065\061\067\062\071\053\072\037\001\002\000" +
    "\030\003\057\007\046\011\044\013\202\060\045\061\056" +
    "\063\041\065\061\067\062\071\053\072\037\001\002\000" +
    "\004\010\203\001\002\000\026\004\uffd1\005\uffd1\006\uffd1" +
    "\007\uffd1\030\uffd1\033\uffd1\047\uffd1\052\uffd1\056\uffd1\057" +
    "\uffd1\001\002\000\042\017\uffcf\020\uffcf\032\113\033\106" +
    "\035\111\036\115\037\110\040\112\041\120\042\107\043" +
    "\105\044\116\045\114\046\117\050\104\053\121\001\002" +
    "\000\026\004\uffd3\005\uffd3\006\uffd3\007\uffd3\030\uffd3\033" +
    "\uffd3\047\uffd3\052\uffd3\056\uffd3\057\uffd3\001\002\000\030" +
    "\003\057\007\046\011\044\012\210\060\045\061\056\063" +
    "\041\065\061\067\062\071\053\072\037\001\002\000\004" +
    "\013\214\001\002\000\026\003\057\007\046\011\044\060" +
    "\045\061\056\063\041\065\061\067\062\071\053\072\037" +
    "\001\002\000\030\003\057\007\046\011\044\013\212\060" +
    "\045\061\056\063\041\065\061\067\062\071\053\072\037" +
    "\001\002\000\004\010\213\001\002\000\054\003\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\011\uffd5\013\uffd5\030\uffd5" +
    "\033\uffd5\047\uffd5\052\uffd5\056\uffd5\057\uffd5\060\uffd5\061" +
    "\uffd5\063\uffd5\065\uffd5\067\uffd5\070\uffd5\071\uffd5\072\uffd5" +
    "\001\002\000\004\010\215\001\002\000\054\003\uffd4\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\011\uffd4\013\uffd4\030\uffd4" +
    "\033\uffd4\047\uffd4\052\uffd4\056\uffd4\057\uffd4\060\uffd4\061" +
    "\uffd4\063\uffd4\065\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4" +
    "\001\002\000\054\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\011\uffc8\013\uffc8\030\uffc8\033\uffc8\047\uffc8\052\uffc8" +
    "\056\uffc8\057\uffc8\060\uffc8\061\uffc8\063\uffc8\065\uffc8\067" +
    "\uffc8\070\uffc8\071\uffc8\072\uffc8\001\002\000\054\003\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\011\ufff7\013\ufff7\030" +
    "\ufff7\033\ufff7\047\ufff7\052\ufff7\056\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\063\ufff7\065\ufff7\067\ufff7\070\ufff7\071\ufff7\072" +
    "\ufff7\001\002\000\004\046\221\001\002\000\024\004\066" +
    "\005\074\006\071\007\077\030\076\033\072\047\101\056" +
    "\073\057\102\001\002\000\040\010\uffd8\032\113\033\106" +
    "\035\111\036\115\037\110\040\112\041\120\042\107\043" +
    "\105\044\116\045\114\046\117\050\104\053\121\001\002" +
    "\000\024\004\066\005\074\006\071\007\077\030\076\033" +
    "\072\047\101\056\073\057\102\001\002\000\040\031\225" +
    "\032\113\033\106\035\111\036\115\037\110\040\112\041" +
    "\120\042\107\043\105\044\116\045\114\046\117\050\104" +
    "\053\121\001\002\000\004\051\226\001\002\000\030\003" +
    "\057\007\046\011\044\012\230\060\045\061\056\063\041" +
    "\065\061\067\062\071\053\072\037\001\002\000\054\003" +
    "\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\011\uffd7\013\uffd7" +
    "\030\uffd7\033\uffd7\047\uffd7\052\uffd7\056\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\063\uffd7\065\uffd7\067\uffd7\070\uffd7\071\uffd7" +
    "\072\uffd7\001\002\000\026\003\057\007\046\011\044\060" +
    "\045\061\056\063\041\065\061\067\062\071\053\072\037" +
    "\001\002\000\030\003\057\007\046\011\044\013\232\060" +
    "\045\061\056\063\041\065\061\067\062\071\053\072\037" +
    "\001\002\000\004\010\233\001\002\000\054\003\uffd6\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\011\uffd6\013\uffd6\030\uffd6" +
    "\033\uffd6\047\uffd6\052\uffd6\056\uffd6\057\uffd6\060\uffd6\061" +
    "\uffd6\063\uffd6\065\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6" +
    "\001\002\000\024\004\066\005\074\006\071\007\077\030" +
    "\076\033\072\047\101\056\073\057\102\001\002\000\040" +
    "\031\236\032\113\033\106\035\111\036\115\037\110\040" +
    "\112\041\120\042\107\043\105\044\116\045\114\046\117" +
    "\050\104\053\121\001\002\000\004\010\uffd9\001\002\000" +
    "\024\004\066\005\074\006\071\007\077\030\076\033\072" +
    "\047\101\056\073\057\102\001\002\000\040\031\241\032" +
    "\113\033\106\035\111\036\115\037\110\040\112\041\120" +
    "\042\107\043\105\044\116\045\114\046\117\050\104\053" +
    "\121\001\002\000\004\064\242\001\002\000\030\003\057" +
    "\007\046\011\044\012\244\060\045\061\056\063\041\065" +
    "\061\067\062\071\053\072\037\001\002\000\054\003\uffcc" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\013\uffcc\030" +
    "\uffcc\033\uffcc\047\uffcc\052\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\063\uffcc\065\uffcc\067\uffcc\070\uffcc\071\uffcc\072" +
    "\uffcc\001\002\000\026\003\057\007\046\011\044\060\045" +
    "\061\056\063\041\065\061\067\062\071\053\072\037\001" +
    "\002\000\030\003\057\007\046\011\044\013\246\060\045" +
    "\061\056\063\041\065\061\067\062\071\053\072\037\001" +
    "\002\000\004\010\247\001\002\000\054\003\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\011\uffcd\013\uffcd\030\uffcd\033" +
    "\uffcd\047\uffcd\052\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd" +
    "\063\uffcd\065\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\001" +
    "\002\000\054\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\011\ufff8\013\ufff8\030\ufff8\033\ufff8\047\ufff8\052\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\063\ufff8\065\ufff8\067\ufff8" +
    "\070\ufff8\071\ufff8\072\ufff8\001\002\000\054\003\uffc7\004" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\011\uffc7\013\uffc7\030\uffc7" +
    "\033\uffc7\047\uffc7\052\uffc7\056\uffc7\057\uffc7\060\uffc7\061" +
    "\uffc7\063\uffc7\065\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7" +
    "\001\002\000\004\014\253\001\002\000\014\002\ufffb\012" +
    "\ufffb\015\ufffb\016\ufffb\021\ufffb\001\002\000\004\002\001" +
    "\001\002\000\014\002\000\012\000\015\000\016\000\021" +
    "\000\001\002\000\016\002\ufffc\007\012\012\ufffc\015\ufffc" +
    "\016\ufffc\021\ufffc\001\002\000\020\002\uffe2\007\uffe2\010" +
    "\264\012\uffe2\015\uffe2\016\uffe2\021\uffe2\001\002\000\006" +
    "\017\261\020\016\001\002\000\016\022\020\023\022\024" +
    "\025\025\023\026\021\027\026\001\002\000\004\010\263" +
    "\001\002\000\016\002\uffe4\007\uffe4\012\uffe4\015\uffe4\016" +
    "\uffe4\021\uffe4\001\002\000\016\002\uffe3\007\uffe3\012\uffe3" +
    "\015\uffe3\016\uffe3\021\uffe3\001\002\000\006\017\266\020" +
    "\016\001\002\000\016\022\020\023\022\024\025\025\023" +
    "\026\021\027\026\001\002\000\004\010\270\001\002\000" +
    "\016\002\uffe5\007\uffe5\012\uffe5\015\uffe5\016\uffe5\021\uffe5" +
    "\001\002\000\004\046\301\001\002\000\020\002\uffe6\007" +
    "\uffe6\010\300\012\uffe6\015\uffe6\016\uffe6\021\uffe6\001\002" +
    "\000\016\002\ufffd\007\274\012\ufffd\015\ufffd\016\ufffd\021" +
    "\ufffd\001\002\000\004\046\275\001\002\000\024\004\066" +
    "\005\074\006\071\007\077\030\076\033\072\047\101\056" +
    "\073\057\102\001\002\000\040\010\277\032\113\033\106" +
    "\035\111\036\115\037\110\040\112\041\120\042\107\043" +
    "\105\044\116\045\114\046\117\050\104\053\121\001\002" +
    "\000\016\002\uffe9\007\uffe9\012\uffe9\015\uffe9\016\uffe9\021" +
    "\uffe9\001\002\000\016\002\uffe7\007\uffe7\012\uffe7\015\uffe7" +
    "\016\uffe7\021\uffe7\001\002\000\024\004\066\005\074\006" +
    "\071\007\077\030\076\033\072\047\101\056\073\057\102" +
    "\001\002\000\040\010\303\032\113\033\106\035\111\036" +
    "\115\037\110\040\112\041\120\042\107\043\105\044\116" +
    "\045\114\046\117\050\104\053\121\001\002\000\016\002" +
    "\uffe8\007\uffe8\012\uffe8\015\uffe8\016\uffe8\021\uffe8\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\006\002\007\004\005\001\001\000\004\006" +
    "\272\001\001\000\006\005\255\017\257\001\001\000\004" +
    "\002\254\001\001\000\030\003\035\011\042\020\037\021" +
    "\047\022\041\025\050\026\057\027\051\030\053\031\054" +
    "\032\046\001\001\000\002\001\001\000\006\007\012\017" +
    "\014\001\001\000\002\001\001\000\004\017\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\011\063\020\037\021\047\022\041\025\050\026\057\027" +
    "\051\030\053\031\054\032\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\062\011\042" +
    "\020\037\021\047\022\041\025\050\026\057\027\051\030" +
    "\053\031\054\032\046\001\001\000\026\011\063\020\037" +
    "\021\047\022\041\025\050\026\057\027\051\030\053\031" +
    "\054\032\046\001\001\000\002\001\001\000\012\013\074" +
    "\014\066\015\077\016\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\146\014\066\015\077\016\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\143" +
    "\014\066\015\077\016\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\102\014\066\015\077\016\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\141\014\066\015\077\016\067\001\001\000\012\013\137" +
    "\014\066\015\077\016\067\001\001\000\012\013\136\014" +
    "\066\015\077\016\067\001\001\000\012\013\135\014\066" +
    "\015\077\016\067\001\001\000\012\013\134\014\066\015" +
    "\077\016\067\001\001\000\012\013\133\014\066\015\077" +
    "\016\067\001\001\000\012\013\132\014\066\015\077\016" +
    "\067\001\001\000\012\013\131\014\066\015\077\016\067" +
    "\001\001\000\012\013\130\014\066\015\077\016\067\001" +
    "\001\000\012\013\127\014\066\015\077\016\067\001\001" +
    "\000\012\013\126\014\066\015\077\016\067\001\001\000" +
    "\012\013\125\014\066\015\077\016\067\001\001\000\012" +
    "\013\124\014\066\015\077\016\067\001\001\000\012\013" +
    "\121\014\066\015\077\016\067\001\001\000\002\001\001" +
    "\000\012\013\123\014\066\015\077\016\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\142\014\066\015\077\016\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\152\014\066\015\077\016" +
    "\067\001\001\000\002\001\001\000\012\013\154\014\066" +
    "\015\077\016\067\001\001\000\002\001\001\000\026\011" +
    "\156\020\037\021\047\022\041\025\050\026\057\027\051" +
    "\030\053\031\054\032\046\001\001\000\002\001\001\000" +
    "\030\003\160\011\042\020\037\021\047\022\041\025\050" +
    "\026\057\027\051\030\053\031\054\032\046\001\001\000" +
    "\026\011\063\020\037\021\047\022\041\025\050\026\057" +
    "\027\051\030\053\031\054\032\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\165" +
    "\014\066\015\077\016\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\173\014\066\015\077\016\067" +
    "\033\172\034\170\035\171\001\001\000\016\013\173\014" +
    "\066\015\077\016\067\033\204\035\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\203\014\066\015\077\016\067\001\001\000\026\011\176" +
    "\020\037\021\047\022\041\025\050\026\057\027\051\030" +
    "\053\031\054\032\046\001\001\000\002\001\001\000\030" +
    "\003\200\011\042\020\037\021\047\022\041\025\050\026" +
    "\057\027\051\030\053\031\054\032\046\001\001\000\026" +
    "\011\063\020\037\021\047\022\041\025\050\026\057\027" +
    "\051\030\053\031\054\032\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\011\206\020\037\021\047\022\041\025\050\026\057" +
    "\027\051\030\053\031\054\032\046\001\001\000\002\001" +
    "\001\000\030\003\210\011\042\020\037\021\047\022\041" +
    "\025\050\026\057\027\051\030\053\031\054\032\046\001" +
    "\001\000\026\011\063\020\037\021\047\022\041\025\050" +
    "\026\057\027\051\030\053\031\054\032\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\221\014\066\015\077\016\067\001\001" +
    "\000\002\001\001\000\012\013\223\014\066\015\077\016" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\011\226\020\037\021\047\022\041\025\050\026\057\027" +
    "\051\030\053\031\054\032\046\001\001\000\002\001\001" +
    "\000\030\003\230\011\042\020\037\021\047\022\041\025" +
    "\050\026\057\027\051\030\053\031\054\032\046\001\001" +
    "\000\026\011\063\020\037\021\047\022\041\025\050\026" +
    "\057\027\051\030\053\031\054\032\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\234\014\066\015" +
    "\077\016\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\237\014\066\015\077\016\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\011\242\020\037" +
    "\021\047\022\041\025\050\026\057\027\051\030\053\031" +
    "\054\032\046\001\001\000\002\001\001\000\030\003\244" +
    "\011\042\020\037\021\047\022\041\025\050\026\057\027" +
    "\051\030\053\031\054\032\046\001\001\000\026\011\063" +
    "\020\037\021\047\022\041\025\050\026\057\027\051\030" +
    "\053\031\054\032\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\275\014\066\015\077\016\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\301\014\066\015\077\016\067\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= cuerpo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // cuerpo ::= cuerpo estructura 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.addAll(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo ::= estructura 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>();  RESULT.addAll(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // estructura ::= TYPE declaracion_tipos 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // estructura ::= CONST declaracion_constantes 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // estructura ::= VAR declaracion_variables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // estructura ::= BEGIN instrucciones END PUNTO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= writeln FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= asignacion_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= sentencia_case 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= sentencia_while 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= sentencia_for 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= sentencia_repeat 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= transferencia_break 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= transferencia_continue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracion_tipos ::= declaracion_tipos listado_id IGUAL tipos_variable FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =a ; RESULT.add(new DeclaracionTipos(b,c,aleft, aright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion_tipos ::= listado_id IGUAL tipos_variable FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(new DeclaracionTipos(a, b,aleft, aright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion_tipos ::= error FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion_tipos ::= error 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion_constantes ::= declaracion_constantes ID IGUAL expresion FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;  
                                    RESULT.add(new DeclaracionConstante(false, b,c, new Tipo(TipoDato.INTEGER),bleft, bright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_constantes ::= ID IGUAL expresion FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(new DeclaracionConstante(false, b,c, new Tipo(TipoDato.INTEGER),bleft, bright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion_constantes ::= error FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion_constantes ::= error 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion_variables ::= declaracion_variables listado_id DOSPUNTOS tipos_variable FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =a ; RESULT.add(new DeclaracionVariable(true, b,null, c,aleft, aright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion_variables ::= listado_id DOSPUNTOS tipos_variable FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(new DeclaracionVariable(true, a,null, b,aleft, aright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion_variables ::= error FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion_variables ::= error 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listado_id ::= listado_id COMA ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                                    RESULT.add(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listado_id",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listado_id ::= ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<String>(); 
                                                    RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listado_id",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipos_variable ::= INTEGER 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("integer",TipoDato.INTEGER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipos_variable ::= REAL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("real",TipoDato.REAL);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipos_variable ::= STRING 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("string",TipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipos_variable ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("char",TipoDato.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipos_variable ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("boolean",TipoDato.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipos_variable ::= VOID 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("void",TipoDato.VOID);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // writeln ::= IMPRIMIR PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Writeln(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // asignacion_variable ::= ID DOSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentencia_if ::= IF PAR1 expresion PAR2 THEN instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new SentenciaIf(a, new LinkedList<>(Collections.singletonList(b)), aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sentencia_if ::= IF PAR1 expresion PAR2 THEN BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaIf(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia_case ::= CASE PAR1 expresion PAR2 OF casos_case ELSE BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<CasoCase> b = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = new SentenciaCase(a, b, c, aleft, aright);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia_case ::= CASE PAR1 expresion PAR2 OF casos_case ELSE instruccion END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<CasoCase> b = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = new SentenciaCase(a, b, new LinkedList<>(Collections.singletonList(c)), aleft, aright);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // casos_case ::= casos_case caso_case 
            {
              LinkedList<CasoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoCase> a = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoCase b = (CasoCase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_case",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // casos_case ::= caso_case 
            {
              LinkedList<CasoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoCase a = (CasoCase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_case",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // caso_case ::= expresiones_case DOSPUNTOS BEGIN instrucciones END FINCADENA 
            {
              CasoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new CasoCase(a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_case",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // caso_case ::= expresiones_case DOSPUNTOS instruccion 
            {
              CasoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CasoCase(a, new LinkedList<>(Collections.singletonList(b))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_case",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresiones_case ::= expresiones_case COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_case",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresiones_case ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_case",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia_while ::= WHILE PAR1 expresion PAR2 DO BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencia_while ::= WHILE PAR1 expresion PAR2 DO instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaWhile(a,new LinkedList<>(Collections.singletonList(b)), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia_for ::= FOR ID DOSPUNTOS IGUAL expresion TO expresion DO instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentenciaFor(new AsignacionVariable(a, b, aleft, aright), c, new AccesoVariable(a, aleft, aright) , new LinkedList<>(Collections.singletonList(d)),new AsignacionVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo("integer",TipoDato.INTEGER), aleft, aright) , aleft, aright), aleft, aright),aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia_for ::= FOR ID DOSPUNTOS IGUAL expresion TO expresion DO BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  		   RESULT = new SentenciaFor(new AsignacionVariable(a, b, aleft, aright), c, new AccesoVariable(a, aleft, aright) , d,new AsignacionVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo("integer",TipoDato.INTEGER), aleft, aright) , aleft, aright), aleft, aright),aleft, aright);   
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia_repeat ::= REPEAT instrucciones UNTIL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaRepeat(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_repeat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // transferencia_break ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new SentenciaBreak(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_break",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // transferencia_continue ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new SentenciaContinue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_continue",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= expresionAritmetica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= expresionRelacional 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= expresionLogica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo("integer",TipoDato.INTEGER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo("real",TipoDato.REAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo("string",TipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo("char",TipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= BOOLEAN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo("boolean",TipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresionAritmetica ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionNegacionU(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresionAritmetica ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionSuma(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresionAritmetica ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionResta(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresionAritmetica ::= expresion MULT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionMultiplicacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresionAritmetica ::= expresion DIV expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDivision (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresionAritmetica ::= expresion DIVE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDiv(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresionAritmetica ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionModulo (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresionAritmetica ::= PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresionRelacional ::= expresion IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Igualacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresionRelacional ::= expresion DIFERENTE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Diferenciacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresionRelacional ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresionRelacional ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresionRelacional ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresionRelacional ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresionLogica ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorNot(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresionLogica ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAnd(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresionLogica ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOr(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresionLogica ::= expresion AND THEN expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAndThen(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresionLogica ::= expresion OR ELSE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOrThen(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
