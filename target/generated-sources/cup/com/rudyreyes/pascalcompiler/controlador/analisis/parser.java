
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.rudyreyes.pascalcompiler.controlador.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.rudyreyes.pascalcompiler.modelo.abstracto.Instruccion;
import com.rudyreyes.pascalcompiler.modelo.simbolo.*;
import java.util.HashMap;
import java.util.Collections;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.writeln.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.variables.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.arrays.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.sentenciasControl.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.tipos.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.ciclos.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.sentenciaTransferencia.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.nativo.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.aritmeticas.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.relacionales.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.logicas.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.variables.*;
import com.rudyreyes.pascalcompiler.modelo.errores.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\004\004\000\002\004" +
    "\003\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\006\000\002\003\004\000\002\003\003\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\004\000\002\014\003\000\002\006\004\000" +
    "\002\006\003\000\002\010\006\000\002\010\012\000\002" +
    "\010\016\000\002\010\004\000\002\010\003\000\002\005" +
    "\007\000\002\005\006\000\002\005\004\000\002\005\003" +
    "\000\002\007\004\000\002\007\003\000\002\011\006\000" +
    "\002\011\012\000\002\011\016\000\002\011\004\000\002" +
    "\011\003\000\002\023\005\000\002\023\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\024" +
    "\006\000\002\022\005\000\002\022\003\000\002\025\006" +
    "\000\002\031\011\000\002\026\006\000\002\026\011\000" +
    "\002\032\015\000\002\032\014\000\002\041\004\000\002" +
    "\041\003\000\002\040\010\000\002\040\005\000\002\042" +
    "\005\000\002\042\003\000\002\033\011\000\002\033\006" +
    "\000\002\034\013\000\002\034\016\000\002\035\007\000" +
    "\002\036\004\000\002\037\004\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\006\000\002\017\004\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\021\004\000\002\021\005\000\002\021\005\000\002" +
    "\021\006\000\002\021\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\012\012\007\015\005\016\004\021\011\001" +
    "\002\000\006\003\350\007\347\001\002\000\006\003\307" +
    "\007\012\001\002\000\014\002\304\012\007\015\005\016" +
    "\004\021\011\001\002\000\026\003\161\007\150\011\146" +
    "\060\147\061\160\063\143\065\163\067\164\071\155\072" +
    "\140\001\002\000\014\002\uffff\012\uffff\015\uffff\016\uffff" +
    "\021\uffff\001\002\000\006\003\013\007\012\001\002\000" +
    "\010\017\uffd9\020\uffd9\046\uffd9\001\002\000\022\002\uffe6" +
    "\003\uffe6\007\uffe6\010\136\012\uffe6\015\uffe6\016\uffe6\021" +
    "\uffe6\001\002\000\006\020\020\046\021\001\002\000\020" +
    "\002\uffeb\003\uffeb\007\uffeb\012\uffeb\015\uffeb\016\uffeb\021" +
    "\uffeb\001\002\000\020\002\ufffe\003\013\007\012\012\ufffe" +
    "\015\ufffe\016\ufffe\021\ufffe\001\002\000\020\002\uffec\003" +
    "\uffec\007\uffec\012\uffec\015\uffec\016\uffec\021\uffec\001\002" +
    "\000\004\007\135\001\002\000\042\004\025\005\043\006" +
    "\027\007\034\022\042\023\044\024\045\025\041\026\037" +
    "\027\026\030\040\033\023\047\031\056\036\057\035\073" +
    "\046\001\002\000\060\010\uffb4\014\uffb4\017\uffb4\020\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\035\uffb4\036\uffb4\037\uffb4\040" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\050\uffb4\051\uffb4\053\uffb4\064\uffb4\066\uffb4\075\uffb4\001" +
    "\002\000\024\004\025\005\043\006\027\007\034\030\040" +
    "\033\023\047\031\056\036\057\035\001\002\000\060\010" +
    "\uffb3\014\uffb3\017\uffb3\020\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\050\uffb3\051\uffb3\053\uffb3" +
    "\064\uffb3\066\uffb3\075\uffb3\001\002\000\060\010\uffb0\014" +
    "\uffb0\017\uffb0\020\uffb0\031\uffb0\032\uffb0\033\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\050\uffb0\051\uffb0\053\uffb0\064\uffb0" +
    "\066\uffb0\075\uffb0\001\002\000\004\010\uffd5\001\002\000" +
    "\060\010\uffb1\014\uffb1\017\uffb1\020\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\050\uffb1\051\uffb1" +
    "\053\uffb1\064\uffb1\066\uffb1\075\uffb1\001\002\000\040\014" +
    "\127\032\061\033\053\035\057\036\064\037\056\040\060" +
    "\041\066\042\055\043\052\044\063\045\062\046\065\050" +
    "\051\053\067\001\002\000\024\004\025\005\043\006\027" +
    "\007\034\030\040\033\023\047\031\056\036\057\035\001" +
    "\002\000\004\010\125\001\002\000\060\010\uffb5\014\uffb5" +
    "\017\uffb5\020\uffb5\031\uffb5\032\uffb5\033\uffb5\035\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5" +
    "\045\uffb5\046\uffb5\050\uffb5\051\uffb5\053\uffb5\064\uffb5\066" +
    "\uffb5\075\uffb5\001\002\000\062\010\uffad\014\uffad\017\uffad" +
    "\020\uffad\031\uffad\032\uffad\033\uffad\035\uffad\036\uffad\037" +
    "\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\050\uffad\051\uffad\053\uffad\064\uffad\066\uffad\074" +
    "\122\075\uffad\001\002\000\060\010\uffaf\014\uffaf\017\uffaf" +
    "\020\uffaf\031\uffaf\032\uffaf\033\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\050\uffaf\051\uffaf\053\uffaf\064\uffaf\066\uffaf\075" +
    "\uffaf\001\002\000\060\010\uffae\014\uffae\017\uffae\020\uffae" +
    "\031\uffae\032\uffae\033\uffae\035\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae" +
    "\050\uffae\051\uffae\053\uffae\064\uffae\066\uffae\075\uffae\001" +
    "\002\000\004\010\uffd6\001\002\000\024\004\025\005\043" +
    "\006\027\007\034\030\040\033\023\047\031\056\036\057" +
    "\035\001\002\000\004\010\uffd4\001\002\000\004\010\uffd8" +
    "\001\002\000\060\010\uffb2\014\uffb2\017\uffb2\020\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\050" +
    "\uffb2\051\uffb2\053\uffb2\064\uffb2\066\uffb2\075\uffb2\001\002" +
    "\000\004\010\uffd7\001\002\000\004\010\uffd3\001\002\000" +
    "\004\074\047\001\002\000\024\004\025\005\043\006\027" +
    "\007\034\030\040\033\023\047\031\056\036\057\035\001" +
    "\002\000\040\014\054\032\061\033\053\035\057\036\064" +
    "\037\056\040\060\041\066\042\055\043\052\044\063\045" +
    "\062\046\065\050\051\053\067\001\002\000\026\004\025" +
    "\005\043\006\027\007\034\030\040\033\023\047\031\051" +
    "\115\056\036\057\035\001\002\000\024\004\025\005\043" +
    "\006\027\007\034\030\040\033\023\047\031\056\036\057" +
    "\035\001\002\000\024\004\025\005\043\006\027\007\034" +
    "\030\040\033\023\047\031\056\036\057\035\001\002\000" +
    "\004\014\105\001\002\000\024\004\025\005\043\006\027" +
    "\007\034\030\040\033\023\047\031\056\036\057\035\001" +
    "\002\000\024\004\025\005\043\006\027\007\034\030\040" +
    "\033\023\047\031\056\036\057\035\001\002\000\024\004" +
    "\025\005\043\006\027\007\034\030\040\033\023\047\031" +
    "\056\036\057\035\001\002\000\024\004\025\005\043\006" +
    "\027\007\034\030\040\033\023\047\031\056\036\057\035" +
    "\001\002\000\024\004\025\005\043\006\027\007\034\030" +
    "\040\033\023\047\031\056\036\057\035\001\002\000\024" +
    "\004\025\005\043\006\027\007\034\030\040\033\023\047" +
    "\031\056\036\057\035\001\002\000\024\004\025\005\043" +
    "\006\027\007\034\030\040\033\023\047\031\056\036\057" +
    "\035\001\002\000\024\004\025\005\043\006\027\007\034" +
    "\030\040\033\023\047\031\056\036\057\035\001\002\000" +
    "\024\004\025\005\043\006\027\007\034\030\040\033\023" +
    "\047\031\056\036\057\035\001\002\000\024\004\025\005" +
    "\043\006\027\007\034\030\040\033\023\047\031\056\036" +
    "\057\035\001\002\000\026\004\025\005\043\006\027\007" +
    "\034\030\040\033\023\047\031\052\071\056\036\057\035" +
    "\001\002\000\060\010\uff9b\014\uff9b\017\uff9b\020\uff9b\031" +
    "\uff9b\032\061\033\053\035\057\036\064\037\056\040\060" +
    "\041\066\042\055\043\052\044\063\045\062\046\065\050" +
    "\051\051\uff9b\053\uff9b\064\uff9b\066\uff9b\075\uff9b\001\002" +
    "\000\024\004\025\005\043\006\027\007\034\030\040\033" +
    "\023\047\031\056\036\057\035\001\002\000\060\010\uff99" +
    "\014\uff99\017\uff99\020\uff99\031\uff99\032\061\033\053\035" +
    "\057\036\064\037\056\040\060\041\066\042\055\043\052" +
    "\044\063\045\062\046\065\050\051\051\uff99\053\067\064" +
    "\uff99\066\uff99\075\uff99\001\002\000\060\010\uffa2\014\uffa2" +
    "\017\uffa2\020\uffa2\031\uffa2\032\061\033\053\035\057\036" +
    "\064\037\056\040\060\041\uffa2\042\uffa2\043\uffa2\044\uffa2" +
    "\045\uffa2\046\uffa2\050\uffa2\051\uffa2\053\uffa2\064\uffa2\066" +
    "\uffa2\075\uffa2\001\002\000\060\010\uffa3\014\uffa3\017\uffa3" +
    "\020\uffa3\031\uffa3\032\061\033\053\035\057\036\064\037" +
    "\056\040\060\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3" +
    "\046\uffa3\050\uffa3\051\uffa3\053\uffa3\064\uffa3\066\uffa3\075" +
    "\uffa3\001\002\000\060\010\uffa7\014\uffa7\017\uffa7\020\uffa7" +
    "\031\uffa7\032\uffa7\033\uffa7\035\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\050\uffa7\051\uffa7\053\uffa7\064\uffa7\066\uffa7\075\uffa7\001" +
    "\002\000\060\010\uff9f\014\uff9f\017\uff9f\020\uff9f\031\uff9f" +
    "\032\061\033\053\035\057\036\064\037\056\040\060\041" +
    "\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\050\uff9f" +
    "\051\uff9f\053\uff9f\064\uff9f\066\uff9f\075\uff9f\001\002\000" +
    "\060\010\uff9e\014\uff9e\017\uff9e\020\uff9e\031\uff9e\032\061" +
    "\033\053\035\057\036\064\037\056\040\060\041\uff9e\042" +
    "\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\050\uff9e\051\uff9e" +
    "\053\uff9e\064\uff9e\066\uff9e\075\uff9e\001\002\000\060\010" +
    "\uffaa\014\uffaa\017\uffaa\020\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\035\057\036\064\037\056\040\060\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\045\uffaa\046\uffaa\050\uffaa\051\uffaa\053\uffaa" +
    "\064\uffaa\066\uffaa\075\uffaa\001\002\000\060\010\uffa5\014" +
    "\uffa5\017\uffa5\020\uffa5\031\uffa5\032\uffa5\033\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\046\uffa5\050\uffa5\051\uffa5\053\uffa5\064\uffa5" +
    "\066\uffa5\075\uffa5\001\002\000\060\010\uffa8\014\uffa8\017" +
    "\uffa8\020\uffa8\031\uffa8\032\uffa8\033\uffa8\035\uffa8\036\uffa8" +
    "\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045" +
    "\uffa8\046\uffa8\050\uffa8\051\uffa8\053\uffa8\064\uffa8\066\uffa8" +
    "\075\uffa8\001\002\000\060\010\uffa6\014\uffa6\017\uffa6\020" +
    "\uffa6\031\uffa6\032\uffa6\033\uffa6\035\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\050\uffa6\051\uffa6\053\uffa6\064\uffa6\066\uffa6\075\uffa6" +
    "\001\002\000\060\010\uffa1\014\uffa1\017\uffa1\020\uffa1\031" +
    "\uffa1\032\061\033\053\035\057\036\064\037\056\040\060" +
    "\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\050" +
    "\uffa1\051\uffa1\053\uffa1\064\uffa1\066\uffa1\075\uffa1\001\002" +
    "\000\024\004\025\005\043\006\027\007\034\030\040\033" +
    "\023\047\031\056\036\057\035\001\002\000\040\032\061" +
    "\033\053\035\057\036\064\037\056\040\060\041\066\042" +
    "\055\043\052\044\063\045\062\046\065\050\051\053\067" +
    "\075\107\001\002\000\004\062\110\001\002\000\016\022" +
    "\042\023\044\024\045\025\041\026\037\027\026\001\002" +
    "\000\004\010\112\001\002\000\020\002\uffe8\003\uffe8\007" +
    "\uffe8\012\uffe8\015\uffe8\016\uffe8\021\uffe8\001\002\000\060" +
    "\010\uffa9\014\uffa9\017\uffa9\020\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\035\057\036\064\037\056\040\060\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\046\uffa9\050\uffa9\051\uffa9\053" +
    "\uffa9\064\uffa9\066\uffa9\075\uffa9\001\002\000\060\010\uffa0" +
    "\014\uffa0\017\uffa0\020\uffa0\031\uffa0\032\061\033\053\035" +
    "\057\036\064\037\056\040\060\041\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\050\uffa0\051\uffa0\053\uffa0\064" +
    "\uffa0\066\uffa0\075\uffa0\001\002\000\024\004\025\005\043" +
    "\006\027\007\034\030\040\033\023\047\031\056\036\057" +
    "\035\001\002\000\060\010\uff9c\014\uff9c\017\uff9c\020\uff9c" +
    "\031\uff9c\032\061\033\053\035\057\036\064\037\056\040" +
    "\060\041\066\042\055\043\052\044\063\045\062\046\065" +
    "\050\uff9c\051\uff9c\053\uff9c\064\uff9c\066\uff9c\075\uff9c\001" +
    "\002\000\060\010\uff9a\014\uff9a\017\uff9a\020\uff9a\031\uff9a" +
    "\032\061\033\053\035\057\036\064\037\056\040\060\041" +
    "\066\042\055\043\052\044\063\045\062\046\065\050\051" +
    "\051\uff9a\053\067\064\uff9a\066\uff9a\075\uff9a\001\002\000" +
    "\040\031\121\032\061\033\053\035\057\036\064\037\056" +
    "\040\060\041\066\042\055\043\052\044\063\045\062\046" +
    "\065\050\051\053\067\001\002\000\060\010\uffa4\014\uffa4" +
    "\017\uffa4\020\uffa4\031\uffa4\032\uffa4\033\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\046\uffa4\050\uffa4\051\uffa4\053\uffa4\064\uffa4\066" +
    "\uffa4\075\uffa4\001\002\000\024\004\025\005\043\006\027" +
    "\007\034\030\040\033\023\047\031\056\036\057\035\001" +
    "\002\000\040\032\061\033\053\035\057\036\064\037\056" +
    "\040\060\041\066\042\055\043\052\044\063\045\062\046" +
    "\065\050\051\053\067\075\124\001\002\000\060\010\uffac" +
    "\014\uffac\017\uffac\020\uffac\031\uffac\032\uffac\033\uffac\035" +
    "\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac" +
    "\044\uffac\045\uffac\046\uffac\050\uffac\051\uffac\053\uffac\064" +
    "\uffac\066\uffac\075\uffac\001\002\000\020\002\uffea\003\uffea" +
    "\007\uffea\012\uffea\015\uffea\016\uffea\021\uffea\001\002\000" +
    "\060\010\uff9d\014\uff9d\017\uff9d\020\uff9d\031\uff9d\032\061" +
    "\033\053\035\057\036\064\037\056\040\060\041\066\042" +
    "\055\043\052\044\063\045\062\046\065\050\uff9d\051\uff9d" +
    "\053\uff9d\064\uff9d\066\uff9d\075\uff9d\001\002\000\004\014" +
    "\130\001\002\000\004\014\131\001\002\000\024\004\025" +
    "\005\043\006\027\007\034\030\040\033\023\047\031\056" +
    "\036\057\035\001\002\000\040\010\133\032\061\033\053" +
    "\035\057\036\064\037\056\040\060\041\066\042\055\043" +
    "\052\044\063\045\062\046\065\050\051\053\067\001\002" +
    "\000\020\002\uffe9\003\uffe9\007\uffe9\012\uffe9\015\uffe9\016" +
    "\uffe9\021\uffe9\001\002\000\060\010\uffab\014\uffab\017\uffab" +
    "\020\uffab\031\uffab\032\uffab\033\uffab\035\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab" +
    "\046\uffab\050\uffab\051\uffab\053\uffab\064\uffab\066\uffab\075" +
    "\uffab\001\002\000\010\017\uffda\020\uffda\046\uffda\001\002" +
    "\000\020\002\uffe7\003\uffe7\007\uffe7\012\uffe7\015\uffe7\016" +
    "\uffe7\021\uffe7\001\002\000\030\003\161\007\150\011\146" +
    "\013\302\060\147\061\160\063\143\065\163\067\164\071" +
    "\155\072\140\001\002\000\004\010\301\001\002\000\004" +
    "\010\300\001\002\000\004\010\277\001\002\000\024\004" +
    "\025\005\043\006\027\007\034\030\040\033\023\047\031" +
    "\056\036\057\035\001\002\000\054\003\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\011\ufff5\013\ufff5\030\ufff5\033\ufff5" +
    "\047\ufff5\052\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\063" +
    "\ufff5\065\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\001\002" +
    "\000\032\003\ufff9\007\ufff9\011\ufff9\013\ufff9\060\ufff9\061" +
    "\ufff9\063\ufff9\065\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9" +
    "\001\002\000\004\030\262\001\002\000\024\004\025\005" +
    "\043\006\027\007\034\030\040\033\023\047\031\056\036" +
    "\057\035\001\002\000\006\017\243\074\242\001\002\000" +
    "\004\010\241\001\002\000\054\003\uffef\004\uffef\005\uffef" +
    "\006\uffef\007\uffef\011\uffef\013\uffef\030\uffef\033\uffef\047" +
    "\uffef\052\uffef\056\uffef\057\uffef\060\uffef\061\uffef\063\uffef" +
    "\065\uffef\067\uffef\070\uffef\071\uffef\072\uffef\001\002\000" +
    "\054\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\011\ufff4" +
    "\013\ufff4\030\ufff4\033\ufff4\047\ufff4\052\ufff4\056\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\063\ufff4\065\ufff4\067\ufff4\070\ufff4" +
    "\071\ufff4\072\ufff4\001\002\000\054\003\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\011\ufff2\013\ufff2\030\ufff2\033\ufff2" +
    "\047\ufff2\052\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\063" +
    "\ufff2\065\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\001\002" +
    "\000\004\010\240\001\002\000\054\003\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\011\ufff1\013\ufff1\030\ufff1\033\ufff1" +
    "\047\ufff1\052\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\063" +
    "\ufff1\065\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\001\002" +
    "\000\054\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\011" +
    "\ufff0\013\ufff0\030\ufff0\033\ufff0\047\ufff0\052\ufff0\056\ufff0" +
    "\057\ufff0\060\ufff0\061\ufff0\063\ufff0\065\ufff0\067\ufff0\070" +
    "\ufff0\071\ufff0\072\ufff0\001\002\000\004\030\207\001\002" +
    "\000\056\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\206\011\uffed\013\uffed\030\uffed\033\uffed\047\uffed\052\uffed" +
    "\056\uffed\057\uffed\060\uffed\061\uffed\063\uffed\065\uffed\067" +
    "\uffed\070\uffed\071\uffed\072\uffed\001\002\000\054\003\ufff3" +
    "\004\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\013\ufff3\030" +
    "\ufff3\033\ufff3\047\ufff3\052\ufff3\056\ufff3\057\ufff3\060\ufff3" +
    "\061\ufff3\063\ufff3\065\ufff3\067\ufff3\070\ufff3\071\ufff3\072" +
    "\ufff3\001\002\000\004\007\172\001\002\000\026\003\161" +
    "\007\150\011\146\060\147\061\160\063\143\065\163\067" +
    "\164\071\155\072\140\001\002\000\030\003\161\007\150" +
    "\011\146\060\147\061\160\063\143\065\163\067\164\070" +
    "\167\071\155\072\140\001\002\000\032\003\ufffa\007\ufffa" +
    "\011\ufffa\013\ufffa\060\ufffa\061\ufffa\063\ufffa\065\ufffa\067" +
    "\ufffa\070\ufffa\071\ufffa\072\ufffa\001\002\000\024\004\025" +
    "\005\043\006\027\007\034\030\040\033\023\047\031\056" +
    "\036\057\035\001\002\000\040\010\171\032\061\033\053" +
    "\035\057\036\064\037\056\040\060\041\066\042\055\043" +
    "\052\044\063\045\062\046\065\050\051\053\067\001\002" +
    "\000\054\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\011" +
    "\uffb8\013\uffb8\030\uffb8\033\uffb8\047\uffb8\052\uffb8\056\uffb8" +
    "\057\uffb8\060\uffb8\061\uffb8\063\uffb8\065\uffb8\067\uffb8\070" +
    "\uffb8\071\uffb8\072\uffb8\001\002\000\004\017\173\001\002" +
    "\000\004\046\174\001\002\000\024\004\025\005\043\006" +
    "\027\007\034\030\040\033\023\047\031\056\036\057\035" +
    "\001\002\000\040\032\061\033\053\035\057\036\064\037" +
    "\056\040\060\041\066\042\055\043\052\044\063\045\062" +
    "\046\065\050\051\053\067\066\176\001\002\000\024\004" +
    "\025\005\043\006\027\007\034\030\040\033\023\047\031" +
    "\056\036\057\035\001\002\000\040\032\061\033\053\035" +
    "\057\036\064\037\056\040\060\041\066\042\055\043\052" +
    "\044\063\045\062\046\065\050\051\053\067\064\200\001" +
    "\002\000\030\003\161\007\150\011\146\012\202\060\147" +
    "\061\160\063\143\065\163\067\164\071\155\072\140\001" +
    "\002\000\054\003\uffba\004\uffba\005\uffba\006\uffba\007\uffba" +
    "\011\uffba\013\uffba\030\uffba\033\uffba\047\uffba\052\uffba\056" +
    "\uffba\057\uffba\060\uffba\061\uffba\063\uffba\065\uffba\067\uffba" +
    "\070\uffba\071\uffba\072\uffba\001\002\000\026\003\161\007" +
    "\150\011\146\060\147\061\160\063\143\065\163\067\164" +
    "\071\155\072\140\001\002\000\030\003\161\007\150\011" +
    "\146\013\204\060\147\061\160\063\143\065\163\067\164" +
    "\071\155\072\140\001\002\000\004\010\205\001\002\000" +
    "\054\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\011\uffb9" +
    "\013\uffb9\030\uffb9\033\uffb9\047\uffb9\052\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\061\uffb9\063\uffb9\065\uffb9\067\uffb9\070\uffb9" +
    "\071\uffb9\072\uffb9\001\002\000\054\003\uffee\004\uffee\005" +
    "\uffee\006\uffee\007\uffee\011\uffee\013\uffee\030\uffee\033\uffee" +
    "\047\uffee\052\uffee\056\uffee\057\uffee\060\uffee\061\uffee\063" +
    "\uffee\065\uffee\067\uffee\070\uffee\071\uffee\072\uffee\001\002" +
    "\000\024\004\025\005\043\006\027\007\034\030\040\033" +
    "\023\047\031\056\036\057\035\001\002\000\040\031\211" +
    "\032\061\033\053\035\057\036\064\037\056\040\060\041" +
    "\066\042\055\043\052\044\063\045\062\046\065\050\051" +
    "\053\067\001\002\000\004\062\212\001\002\000\024\004" +
    "\025\005\043\006\027\007\034\030\040\033\023\047\031" +
    "\056\036\057\035\001\002\000\026\004\025\005\043\006" +
    "\027\007\034\030\040\033\023\047\031\052\230\056\036" +
    "\057\035\001\002\000\006\017\220\020\217\001\002\000" +
    "\026\004\uffc1\005\uffc1\006\uffc1\007\uffc1\030\uffc1\033\uffc1" +
    "\047\uffc1\052\uffc1\056\uffc1\057\uffc1\001\002\000\042\017" +
    "\uffbd\020\uffbd\032\061\033\053\035\057\036\064\037\056" +
    "\040\060\041\066\042\055\043\052\044\063\045\062\046" +
    "\065\050\051\053\067\001\002\000\024\004\025\005\043" +
    "\006\027\007\034\030\040\033\023\047\031\056\036\057" +
    "\035\001\002\000\030\003\161\007\150\011\146\012\222" +
    "\060\147\061\160\063\143\065\163\067\164\071\155\072" +
    "\140\001\002\000\026\004\uffbf\005\uffbf\006\uffbf\007\uffbf" +
    "\030\uffbf\033\uffbf\047\uffbf\052\uffbf\056\uffbf\057\uffbf\001" +
    "\002\000\026\003\161\007\150\011\146\060\147\061\160" +
    "\063\143\065\163\067\164\071\155\072\140\001\002\000" +
    "\030\003\161\007\150\011\146\013\224\060\147\061\160" +
    "\063\143\065\163\067\164\071\155\072\140\001\002\000" +
    "\004\010\225\001\002\000\026\004\uffc0\005\uffc0\006\uffc0" +
    "\007\uffc0\030\uffc0\033\uffc0\047\uffc0\052\uffc0\056\uffc0\057" +
    "\uffc0\001\002\000\042\017\uffbe\020\uffbe\032\061\033\053" +
    "\035\057\036\064\037\056\040\060\041\066\042\055\043" +
    "\052\044\063\045\062\046\065\050\051\053\067\001\002" +
    "\000\026\004\uffc2\005\uffc2\006\uffc2\007\uffc2\030\uffc2\033" +
    "\uffc2\047\uffc2\052\uffc2\056\uffc2\057\uffc2\001\002\000\030" +
    "\003\161\007\150\011\146\012\232\060\147\061\160\063" +
    "\143\065\163\067\164\071\155\072\140\001\002\000\004" +
    "\013\236\001\002\000\026\003\161\007\150\011\146\060" +
    "\147\061\160\063\143\065\163\067\164\071\155\072\140" +
    "\001\002\000\030\003\161\007\150\011\146\013\234\060" +
    "\147\061\160\063\143\065\163\067\164\071\155\072\140" +
    "\001\002\000\004\010\235\001\002\000\054\003\uffc4\004" +
    "\uffc4\005\uffc4\006\uffc4\007\uffc4\011\uffc4\013\uffc4\030\uffc4" +
    "\033\uffc4\047\uffc4\052\uffc4\056\uffc4\057\uffc4\060\uffc4\061" +
    "\uffc4\063\uffc4\065\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4" +
    "\001\002\000\004\010\237\001\002\000\054\003\uffc3\004" +
    "\uffc3\005\uffc3\006\uffc3\007\uffc3\011\uffc3\013\uffc3\030\uffc3" +
    "\033\uffc3\047\uffc3\052\uffc3\056\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\063\uffc3\065\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3" +
    "\001\002\000\054\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\011\uffb7\013\uffb7\030\uffb7\033\uffb7\047\uffb7\052\uffb7" +
    "\056\uffb7\057\uffb7\060\uffb7\061\uffb7\063\uffb7\065\uffb7\067" +
    "\uffb7\070\uffb7\071\uffb7\072\uffb7\001\002\000\054\003\ufff7" +
    "\004\ufff7\005\ufff7\006\ufff7\007\ufff7\011\ufff7\013\ufff7\030" +
    "\ufff7\033\ufff7\047\ufff7\052\ufff7\056\ufff7\057\ufff7\060\ufff7" +
    "\061\ufff7\063\ufff7\065\ufff7\067\ufff7\070\ufff7\071\ufff7\072" +
    "\ufff7\001\002\000\024\004\025\005\043\006\027\007\034" +
    "\030\040\033\023\047\031\056\036\057\035\001\002\000" +
    "\004\046\244\001\002\000\024\004\025\005\043\006\027" +
    "\007\034\030\040\033\023\047\031\056\036\057\035\001" +
    "\002\000\040\010\uffc8\032\061\033\053\035\057\036\064" +
    "\037\056\040\060\041\066\042\055\043\052\044\063\045" +
    "\062\046\065\050\051\053\067\001\002\000\040\032\061" +
    "\033\053\035\057\036\064\037\056\040\060\041\066\042" +
    "\055\043\052\044\063\045\062\046\065\050\051\053\067" +
    "\075\247\001\002\000\004\017\250\001\002\000\004\046" +
    "\251\001\002\000\024\004\025\005\043\006\027\007\034" +
    "\030\040\033\023\047\031\056\036\057\035\001\002\000" +
    "\040\010\uffc7\032\061\033\053\035\057\036\064\037\056" +
    "\040\060\041\066\042\055\043\052\044\063\045\062\046" +
    "\065\050\051\053\067\001\002\000\040\032\061\033\053" +
    "\035\057\036\064\037\056\040\060\041\066\042\055\043" +
    "\052\044\063\045\062\046\065\050\051\051\254\053\067" +
    "\001\002\000\030\003\161\007\150\011\146\012\256\060" +
    "\147\061\160\063\143\065\163\067\164\071\155\072\140" +
    "\001\002\000\054\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\011\uffc6\013\uffc6\030\uffc6\033\uffc6\047\uffc6\052\uffc6" +
    "\056\uffc6\057\uffc6\060\uffc6\061\uffc6\063\uffc6\065\uffc6\067" +
    "\uffc6\070\uffc6\071\uffc6\072\uffc6\001\002\000\026\003\161" +
    "\007\150\011\146\060\147\061\160\063\143\065\163\067" +
    "\164\071\155\072\140\001\002\000\030\003\161\007\150" +
    "\011\146\013\260\060\147\061\160\063\143\065\163\067" +
    "\164\071\155\072\140\001\002\000\004\010\261\001\002" +
    "\000\054\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\011" +
    "\uffc5\013\uffc5\030\uffc5\033\uffc5\047\uffc5\052\uffc5\056\uffc5" +
    "\057\uffc5\060\uffc5\061\uffc5\063\uffc5\065\uffc5\067\uffc5\070" +
    "\uffc5\071\uffc5\072\uffc5\001\002\000\024\004\025\005\043" +
    "\006\027\007\034\030\040\033\023\047\031\056\036\057" +
    "\035\001\002\000\042\020\uffc9\031\uffc9\032\061\033\053" +
    "\035\057\036\064\037\056\040\060\041\066\042\055\043" +
    "\052\044\063\045\062\046\065\050\051\053\067\001\002" +
    "\000\006\020\265\031\266\001\002\000\024\004\025\005" +
    "\043\006\027\007\034\030\040\033\023\047\031\056\036" +
    "\057\035\001\002\000\004\010\uffcb\001\002\000\042\020" +
    "\uffca\031\uffca\032\061\033\053\035\057\036\064\037\056" +
    "\040\060\041\066\042\055\043\052\044\063\045\062\046" +
    "\065\050\051\053\067\001\002\000\040\032\061\033\053" +
    "\035\057\036\064\037\056\040\060\041\066\042\055\043" +
    "\052\044\063\045\062\046\065\050\051\053\067\064\271" +
    "\001\002\000\030\003\161\007\150\011\146\012\273\060" +
    "\147\061\160\063\143\065\163\067\164\071\155\072\140" +
    "\001\002\000\054\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\011\uffbb\013\uffbb\030\uffbb\033\uffbb\047\uffbb\052\uffbb" +
    "\056\uffbb\057\uffbb\060\uffbb\061\uffbb\063\uffbb\065\uffbb\067" +
    "\uffbb\070\uffbb\071\uffbb\072\uffbb\001\002\000\026\003\161" +
    "\007\150\011\146\060\147\061\160\063\143\065\163\067" +
    "\164\071\155\072\140\001\002\000\030\003\161\007\150" +
    "\011\146\013\275\060\147\061\160\063\143\065\163\067" +
    "\164\071\155\072\140\001\002\000\004\010\276\001\002" +
    "\000\054\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\011" +
    "\uffbc\013\uffbc\030\uffbc\033\uffbc\047\uffbc\052\uffbc\056\uffbc" +
    "\057\uffbc\060\uffbc\061\uffbc\063\uffbc\065\uffbc\067\uffbc\070" +
    "\uffbc\071\uffbc\072\uffbc\001\002\000\054\003\ufff6\004\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\011\ufff6\013\ufff6\030\ufff6\033" +
    "\ufff6\047\ufff6\052\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6" +
    "\063\ufff6\065\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\001" +
    "\002\000\054\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\011\ufff8\013\ufff8\030\ufff8\033\ufff8\047\ufff8\052\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\063\ufff8\065\ufff8\067\ufff8" +
    "\070\ufff8\071\ufff8\072\ufff8\001\002\000\054\003\uffb6\004" +
    "\uffb6\005\uffb6\006\uffb6\007\uffb6\011\uffb6\013\uffb6\030\uffb6" +
    "\033\uffb6\047\uffb6\052\uffb6\056\uffb6\057\uffb6\060\uffb6\061" +
    "\uffb6\063\uffb6\065\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6" +
    "\001\002\000\004\014\303\001\002\000\014\002\ufffb\012" +
    "\ufffb\015\ufffb\016\ufffb\021\ufffb\001\002\000\004\002\001" +
    "\001\002\000\014\002\000\012\000\015\000\016\000\021" +
    "\000\001\002\000\020\002\uffe0\003\uffe0\007\uffe0\012\uffe0" +
    "\015\uffe0\016\uffe0\021\uffe0\001\002\000\022\002\uffdb\003" +
    "\uffdb\007\uffdb\010\346\012\uffdb\015\uffdb\016\uffdb\021\uffdb" +
    "\001\002\000\006\017\313\020\020\001\002\000\020\002" +
    "\ufffc\003\307\007\012\012\ufffc\015\ufffc\016\ufffc\021\ufffc" +
    "\001\002\000\020\002\uffe1\003\uffe1\007\uffe1\012\uffe1\015" +
    "\uffe1\016\uffe1\021\uffe1\001\002\000\042\004\025\005\043" +
    "\006\027\007\316\022\322\023\323\024\325\025\321\026" +
    "\317\027\314\030\040\033\023\047\031\056\036\057\035" +
    "\073\324\001\002\000\004\010\uffcf\001\002\000\040\014" +
    "\341\032\061\033\053\035\057\036\064\037\056\040\060" +
    "\041\066\042\055\043\052\044\063\045\062\046\065\050" +
    "\051\053\067\001\002\000\044\010\uffcc\014\uffad\032\uffad" +
    "\033\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\044\uffad\045\uffad\046\uffad\050\uffad\053\uffad" +
    "\074\122\001\002\000\004\010\uffd0\001\002\000\004\010" +
    "\340\001\002\000\004\010\uffce\001\002\000\004\010\uffd2" +
    "\001\002\000\004\010\uffd1\001\002\000\004\074\326\001" +
    "\002\000\004\010\uffcd\001\002\000\024\004\025\005\043" +
    "\006\027\007\034\030\040\033\023\047\031\056\036\057" +
    "\035\001\002\000\040\014\330\032\061\033\053\035\057" +
    "\036\064\037\056\040\060\041\066\042\055\043\052\044" +
    "\063\045\062\046\065\050\051\053\067\001\002\000\004" +
    "\014\331\001\002\000\024\004\025\005\043\006\027\007" +
    "\034\030\040\033\023\047\031\056\036\057\035\001\002" +
    "\000\040\032\061\033\053\035\057\036\064\037\056\040" +
    "\060\041\066\042\055\043\052\044\063\045\062\046\065" +
    "\050\051\053\067\075\333\001\002\000\004\062\334\001" +
    "\002\000\020\007\335\022\322\023\323\024\325\025\321" +
    "\026\317\027\314\001\002\000\004\010\uffcc\001\002\000" +
    "\004\010\337\001\002\000\020\002\uffdd\003\uffdd\007\uffdd" +
    "\012\uffdd\015\uffdd\016\uffdd\021\uffdd\001\002\000\020\002" +
    "\uffdf\003\uffdf\007\uffdf\012\uffdf\015\uffdf\016\uffdf\021\uffdf" +
    "\001\002\000\004\014\342\001\002\000\004\014\343\001" +
    "\002\000\024\004\025\005\043\006\027\007\034\030\040" +
    "\033\023\047\031\056\036\057\035\001\002\000\040\010" +
    "\345\032\061\033\053\035\057\036\064\037\056\040\060" +
    "\041\066\042\055\043\052\044\063\045\062\046\065\050" +
    "\051\053\067\001\002\000\020\002\uffde\003\uffde\007\uffde" +
    "\012\uffde\015\uffde\016\uffde\021\uffde\001\002\000\020\002" +
    "\uffdc\003\uffdc\007\uffdc\012\uffdc\015\uffdc\016\uffdc\021\uffdc" +
    "\001\002\000\004\046\357\001\002\000\020\002\uffe2\007" +
    "\uffe2\010\356\012\uffe2\015\uffe2\016\uffe2\021\uffe2\001\002" +
    "\000\016\002\ufffd\007\352\012\ufffd\015\ufffd\016\ufffd\021" +
    "\ufffd\001\002\000\004\046\353\001\002\000\024\004\025" +
    "\005\043\006\027\007\034\030\040\033\023\047\031\056" +
    "\036\057\035\001\002\000\040\010\355\032\061\033\053" +
    "\035\057\036\064\037\056\040\060\041\066\042\055\043" +
    "\052\044\063\045\062\046\065\050\051\053\067\001\002" +
    "\000\016\002\uffe5\007\uffe5\012\uffe5\015\uffe5\016\uffe5\021" +
    "\uffe5\001\002\000\016\002\uffe3\007\uffe3\012\uffe3\015\uffe3" +
    "\016\uffe3\021\uffe3\001\002\000\024\004\025\005\043\006" +
    "\027\007\034\030\040\033\023\047\031\056\036\057\035" +
    "\001\002\000\040\010\361\032\061\033\053\035\057\036" +
    "\064\037\056\040\060\041\066\042\055\043\052\044\063" +
    "\045\062\046\065\050\051\053\067\001\002\000\016\002" +
    "\uffe4\007\uffe4\012\uffe4\015\uffe4\016\uffe4\021\uffe4\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\006\002\007\004\005\001\001\000\004\005" +
    "\350\001\001\000\010\007\310\011\305\023\307\001\001" +
    "\000\004\002\304\001\001\000\032\003\136\014\144\024" +
    "\140\025\150\026\143\031\141\032\152\033\161\034\153" +
    "\035\155\036\156\037\151\001\001\000\002\001\001\000" +
    "\010\006\015\010\014\023\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\016\023\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\031\016\027\017\032\020\021\021" +
    "\023\001\001\000\002\001\001\000\012\016\133\017\032" +
    "\020\021\021\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\125\017\032\020\021\021\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\117\017\032\020\021\021\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\047\017\032" +
    "\020\021\021\023\001\001\000\002\001\001\000\012\016" +
    "\115\017\032\020\021\021\023\001\001\000\012\016\113" +
    "\017\032\020\021\021\023\001\001\000\012\016\112\017" +
    "\032\020\021\021\023\001\001\000\002\001\001\000\012" +
    "\016\103\017\032\020\021\021\023\001\001\000\012\016" +
    "\102\017\032\020\021\021\023\001\001\000\012\016\101" +
    "\017\032\020\021\021\023\001\001\000\012\016\100\017" +
    "\032\020\021\021\023\001\001\000\012\016\077\017\032" +
    "\020\021\021\023\001\001\000\012\016\076\017\032\020" +
    "\021\021\023\001\001\000\012\016\075\017\032\020\021" +
    "\021\023\001\001\000\012\016\074\017\032\020\021\021" +
    "\023\001\001\000\012\016\073\017\032\020\021\021\023" +
    "\001\001\000\012\016\072\017\032\020\021\021\023\001" +
    "\001\000\012\016\067\017\032\020\021\021\023\001\001" +
    "\000\002\001\001\000\012\016\071\017\032\020\021\021" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\105\017" +
    "\032\020\021\021\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\116\017\032\020\021\021\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\122\017\032\020\021\021\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\131\017\032\020\021\021\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\014\165\024\140\025\150\026\143" +
    "\031\141\032\152\033\161\034\153\035\155\036\156\037" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\267\017\032\020\021\021\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\252\017\032\020\021\021\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\003\164\014" +
    "\144\024\140\025\150\026\143\031\141\032\152\033\161" +
    "\034\153\035\155\036\156\037\151\001\001\000\030\014" +
    "\165\024\140\025\150\026\143\031\141\032\152\033\161" +
    "\034\153\035\155\036\156\037\151\001\001\000\002\001" +
    "\001\000\012\016\167\017\032\020\021\021\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\174\017\032\020\021\021\023" +
    "\001\001\000\002\001\001\000\012\016\176\017\032\020" +
    "\021\021\023\001\001\000\002\001\001\000\030\014\200" +
    "\024\140\025\150\026\143\031\141\032\152\033\161\034" +
    "\153\035\155\036\156\037\151\001\001\000\002\001\001" +
    "\000\032\003\202\014\144\024\140\025\150\026\143\031" +
    "\141\032\152\033\161\034\153\035\155\036\156\037\151" +
    "\001\001\000\030\014\165\024\140\025\150\026\143\031" +
    "\141\032\152\033\161\034\153\035\155\036\156\037\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\207\017\032\020\021\021\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\215\017" +
    "\032\020\021\021\023\040\214\041\212\042\213\001\001" +
    "\000\016\016\215\017\032\020\021\021\023\040\226\042" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\225\017\032\020\021\021\023\001" +
    "\001\000\030\014\220\024\140\025\150\026\143\031\141" +
    "\032\152\033\161\034\153\035\155\036\156\037\151\001" +
    "\001\000\002\001\001\000\032\003\222\014\144\024\140" +
    "\025\150\026\143\031\141\032\152\033\161\034\153\035" +
    "\155\036\156\037\151\001\001\000\030\014\165\024\140" +
    "\025\150\026\143\031\141\032\152\033\161\034\153\035" +
    "\155\036\156\037\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\014" +
    "\230\024\140\025\150\026\143\031\141\032\152\033\161" +
    "\034\153\035\155\036\156\037\151\001\001\000\002\001" +
    "\001\000\032\003\232\014\144\024\140\025\150\026\143" +
    "\031\141\032\152\033\161\034\153\035\155\036\156\037" +
    "\151\001\001\000\030\014\165\024\140\025\150\026\143" +
    "\031\141\032\152\033\161\034\153\035\155\036\156\037" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\245\017\032\020\021\021\023\001\001" +
    "\000\002\001\001\000\012\016\244\017\032\020\021\021" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\251\017\032\020" +
    "\021\021\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\014\254\024\140\025\150\026\143\031\141\032" +
    "\152\033\161\034\153\035\155\036\156\037\151\001\001" +
    "\000\002\001\001\000\032\003\256\014\144\024\140\025" +
    "\150\026\143\031\141\032\152\033\161\034\153\035\155" +
    "\036\156\037\151\001\001\000\030\014\165\024\140\025" +
    "\150\026\143\031\141\032\152\033\161\034\153\035\155" +
    "\036\156\037\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\016\262\017\032\020\021\021\023\022\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\266\017\032\020\021\021\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\014\271\024" +
    "\140\025\150\026\143\031\141\032\152\033\161\034\153" +
    "\035\155\036\156\037\151\001\001\000\002\001\001\000" +
    "\032\003\273\014\144\024\140\025\150\026\143\031\141" +
    "\032\152\033\161\034\153\035\155\036\156\037\151\001" +
    "\001\000\030\014\165\024\140\025\150\026\143\031\141" +
    "\032\152\033\161\034\153\035\155\036\156\037\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\311\023\307\001\001\000\002\001\001\000\014\013\317" +
    "\016\314\017\032\020\021\021\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\326\017\032\020\021\021\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\331\017\032\020\021" +
    "\021\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\343\017\032\020\021\021\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\353\017\032\020\021\021" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\357\017\032\020\021\021\023\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= cuerpo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // cuerpo ::= cuerpo estructura 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.addAll(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo ::= estructura 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>();  RESULT.addAll(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // estructura ::= TYPE declaraciones_tipos 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // estructura ::= CONST declaracion_constantes 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // estructura ::= VAR declaraciones_variables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // estructura ::= BEGIN instrucciones END PUNTO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= writeln FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= asignacion_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= asignacion_array FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= sentencia_case 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= sentencia_while 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= sentencia_for 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= sentencia_repeat 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= transferencia_break 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= transferencia_continue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaraciones_tipos ::= declaraciones_tipos declaracion_tipo 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_tipos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaraciones_tipos ::= declaracion_tipo 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_tipos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion_tipo ::= listado_id IGUAL tipos_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipos(a, b,aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion_tipo ::= listado_id IGUAL expresion PUNTO PUNTO PUNTO expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipoSubRango(a, b,c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_tipo ::= listado_id IGUAL ARRAY CORCHETE1 expresion PUNTO PUNTO expresion CORCHETE2 OF tipos_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipoArreglo(a,b,c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion_tipo ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion_tipo ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion_constantes ::= declaracion_constantes ID IGUAL expresion FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;  
                                    RESULT.add(new DeclaracionConstante(false, b,c, new Tipo(TipoDato.INTEGER),bleft, bright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracion_constantes ::= ID IGUAL expresion FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(new DeclaracionConstante(false, b,c, new Tipo(TipoDato.INTEGER),bleft, bright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion_constantes ::= error FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion_constantes ::= error 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaraciones_variables ::= declaraciones_variables declaracion_variables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_variables",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaraciones_variables ::= declaracion_variables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_variables",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion_variables ::= listado_id DOSPUNTOS tipos_dato_var FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DeclaracionVariable(true, a,null, b,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion_variables ::= listado_id DOSPUNTOS expresion PUNTO PUNTO PUNTO expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVarSubrango(a, b,c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion_variables ::= listado_id DOSPUNTOS ARRAY CORCHETE1 expresion PUNTO PUNTO expresion CORCHETE2 OF tipos_dato_var FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVarArreglo(a,b,c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_variables ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion_variables ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listado_id ::= listado_id COMA ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                                    RESULT.add(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listado_id",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listado_id ::= ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<String>(); 
                                                    RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listado_id",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipos_variable ::= INTEGER 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("integer",TipoDato.INTEGER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipos_variable ::= REAL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("real",TipoDato.REAL);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipos_variable ::= STRING 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("string",TipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipos_variable ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("char",TipoDato.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipos_variable ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("boolean",TipoDato.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipos_variable ::= VOID 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("void",TipoDato.VOID);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipos_dato_var ::= INTEGER 
            {
              String RESULT =null;
		   RESULT="integer";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipos_dato_var ::= REAL 
            {
              String RESULT =null;
		   RESULT="real";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipos_dato_var ::= STRING 
            {
              String RESULT =null;
		   RESULT="string";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipos_dato_var ::= CHAR 
            {
              String RESULT =null;
		   RESULT="char";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipos_dato_var ::= BOOL 
            {
              String RESULT =null;
		   RESULT="boolean";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipos_dato_var ::= VOID 
            {
              String RESULT =null;
		   RESULT="void";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipos_dato_var ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // writeln ::= IMPRIMIR PAR1 expresion_conca PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Writeln(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion_conca ::= expresion_conca COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                                    RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_conca",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion_conca ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); 
                                                    RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_conca",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignacion_variable ::= ID DOSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asignacion_array ::= ID CORCHETE1 expresion CORCHETE2 DOSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVarArreglo(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_array",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia_if ::= IF expresion THEN instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new SentenciaIf(a, new LinkedList<>(Collections.singletonList(b)), aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia_if ::= IF expresion THEN BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaIf(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia_case ::= CASE PAR1 expresion PAR2 OF casos_case ELSE BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<CasoCase> b = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = new SentenciaCase(a, b, c, aleft, aright);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia_case ::= CASE PAR1 expresion PAR2 OF casos_case ELSE instruccion END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<CasoCase> b = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = new SentenciaCase(a, b, new LinkedList<>(Collections.singletonList(c)), aleft, aright);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // casos_case ::= casos_case caso_case 
            {
              LinkedList<CasoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoCase> a = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoCase b = (CasoCase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_case",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // casos_case ::= caso_case 
            {
              LinkedList<CasoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoCase a = (CasoCase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_case",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // caso_case ::= expresiones_case DOSPUNTOS BEGIN instrucciones END FINCADENA 
            {
              CasoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new CasoCase(a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_case",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // caso_case ::= expresiones_case DOSPUNTOS instruccion 
            {
              CasoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CasoCase(a, new LinkedList<>(Collections.singletonList(b))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_case",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresiones_case ::= expresiones_case COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_case",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresiones_case ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_case",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia_while ::= WHILE expresion DO BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia_while ::= WHILE expresion DO instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaWhile(a,new LinkedList<>(Collections.singletonList(b)), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia_for ::= FOR ID DOSPUNTOS IGUAL expresion TO expresion DO instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentenciaFor(new AsignacionVariable(a, b, aleft, aright), c, new AccesoVariable(a, aleft, aright) , new LinkedList<>(Collections.singletonList(d)),new AsignacionVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo("integer",TipoDato.INTEGER), aleft, aright) , aleft, aright), aleft, aright),aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia_for ::= FOR ID DOSPUNTOS IGUAL expresion TO expresion DO BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  		   RESULT = new SentenciaFor(new AsignacionVariable(a, b, aleft, aright), c, new AccesoVariable(a, aleft, aright) , d,new AsignacionVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo("integer",TipoDato.INTEGER), aleft, aright) , aleft, aright), aleft, aright),aleft, aright);   
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia_repeat ::= REPEAT instrucciones UNTIL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaRepeat(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_repeat",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // transferencia_break ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new SentenciaBreak(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_break",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // transferencia_continue ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new SentenciaContinue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_continue",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresionAritmetica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresionRelacional 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresionLogica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo("integer",TipoDato.INTEGER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo("real",TipoDato.REAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo("string",TipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo("char",TipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= BOOLEAN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo("boolean",TipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= ID CORCHETE1 expresion CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVarArreglo(a, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresionAritmetica ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionNegacionU(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresionAritmetica ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionSuma(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresionAritmetica ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionResta(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresionAritmetica ::= expresion MULT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionMultiplicacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresionAritmetica ::= expresion DIV expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDivision (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresionAritmetica ::= expresion DIVE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDiv(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresionAritmetica ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionModulo (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresionAritmetica ::= PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresionRelacional ::= expresion IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Igualacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresionRelacional ::= expresion DIFERENTE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Diferenciacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresionRelacional ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresionRelacional ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresionRelacional ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresionRelacional ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresionLogica ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorNot(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresionLogica ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAnd(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresionLogica ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOr(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresionLogica ::= expresion AND THEN expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAndThen(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresionLogica ::= expresion OR ELSE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOrThen(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
