
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.rudyreyes.pascalcompiler.controlador.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.rudyreyes.pascalcompiler.modelo.abstracto.Instruccion;
import com.rudyreyes.pascalcompiler.modelo.simbolo.*;
import java.util.HashMap;
import java.util.Collections;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.writeln.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.variables.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.arrays.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.sentenciasControl.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.tipos.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.ciclos.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.sentenciaTransferencia.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.funciones.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.nativo.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.aritmeticas.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.relacionales.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.logicas.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.variables.*;
import com.rudyreyes.pascalcompiler.modelo.errores.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\234\000\002\002\004\000\002\004\004\000\002\004" +
    "\003\000\002\002\003\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\002\003\000\002\002\003\000" +
    "\002\002\006\000\002\003\004\000\002\003\003\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\032\005\000\002\042\016" +
    "\000\002\042\014\000\002\042\015\000\002\042\013\000" +
    "\002\041\020\000\002\041\016\000\002\041\017\000\002" +
    "\041\015\000\002\043\007\000\002\043\005\000\002\044" +
    "\005\000\002\044\003\000\002\045\004\000\002\045\003" +
    "\000\002\050\006\000\002\050\005\000\002\047\006\000" +
    "\002\047\005\000\002\046\005\000\002\046\003\000\002" +
    "\006\004\000\002\006\003\000\002\010\006\000\002\010" +
    "\010\000\002\010\015\000\002\010\013\000\002\010\003" +
    "\000\002\010\004\000\002\010\003\000\002\051\010\000" +
    "\002\053\006\000\002\053\005\000\002\054\004\000\002" +
    "\054\006\000\002\054\013\000\002\054\011\000\002\054" +
    "\004\000\002\005\007\000\002\005\006\000\002\005\004" +
    "\000\002\005\003\000\002\007\004\000\002\007\003\000" +
    "\002\011\006\000\002\011\010\000\002\011\015\000\002" +
    "\011\013\000\002\011\003\000\002\011\004\000\002\011" +
    "\003\000\002\052\010\000\002\023\005\000\002\023\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\024\006\000\002\025\006\000\002\022\005\000" +
    "\002\022\003\000\002\026\006\000\002\031\010\000\002" +
    "\030\011\000\002\027\006\000\002\027\011\000\002\027" +
    "\012\000\002\027\010\000\002\027\013\000\002\027\015" +
    "\000\002\033\013\000\002\033\012\000\002\056\004\000" +
    "\002\056\003\000\002\055\010\000\002\055\005\000\002" +
    "\057\005\000\002\057\003\000\002\034\011\000\002\034" +
    "\006\000\002\035\013\000\002\035\016\000\002\036\007" +
    "\000\002\037\003\000\002\040\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\005" +
    "\000\002\016\006\000\002\017\004\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\021\004\000" +
    "\002\021\005\000\002\021\005\000\002\021\006\000\002" +
    "\021\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0191\000\020\013\004\014\015\017\007\020\017\023" +
    "\010\100\013\101\005\001\002\000\004\007\u0192\001\002" +
    "\000\004\007\u0177\001\002\000\022\002\ufffa\013\ufffa\014" +
    "\ufffa\017\ufffa\020\ufffa\023\ufffa\100\ufffa\101\ufffa\001\002" +
    "\000\006\003\373\007\163\001\002\000\006\003\u0157\007" +
    "\163\001\002\000\022\002\ufffe\013\ufffe\014\ufffe\017\ufffe" +
    "\020\ufffe\023\ufffe\100\ufffe\101\ufffe\001\002\000\022\002" +
    "\uffff\013\uffff\014\uffff\017\uffff\020\uffff\023\uffff\100\uffff" +
    "\101\uffff\001\002\000\004\007\343\001\002\000\022\002" +
    "\341\013\004\014\015\017\007\020\017\023\010\100\013" +
    "\101\005\001\002\000\030\003\155\007\143\011\140\012" +
    "\161\062\142\063\154\065\135\067\157\071\160\073\152" +
    "\074\131\001\002\000\022\002\ufff9\013\ufff9\014\ufff9\017" +
    "\ufff9\020\ufff9\023\ufff9\100\ufff9\101\ufff9\001\002\000\006" +
    "\003\021\007\020\001\002\000\004\050\125\001\002\000" +
    "\026\002\uffba\007\uffba\010\124\013\uffba\014\uffba\017\uffba" +
    "\020\uffba\023\uffba\100\uffba\101\uffba\001\002\000\024\002" +
    "\ufffc\007\023\013\ufffc\014\ufffc\017\ufffc\020\ufffc\023\ufffc" +
    "\100\ufffc\101\ufffc\001\002\000\004\050\024\001\002\000" +
    "\024\004\025\005\033\006\030\007\036\032\035\035\031" +
    "\051\041\060\032\061\042\001\002\000\066\010\uff7e\021" +
    "\uff7e\022\uff7e\033\uff7e\034\uff7e\035\uff7e\037\uff7e\040\uff7e" +
    "\041\uff7e\042\uff7e\043\uff7e\044\uff7e\045\uff7e\046\uff7e\047" +
    "\uff7e\050\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\064\uff7e" +
    "\066\uff7e\070\uff7e\077\uff7e\103\uff7e\104\uff7e\001\002\000" +
    "\066\010\uff84\021\uff84\022\uff84\033\uff84\034\uff84\035\uff84" +
    "\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045" +
    "\uff84\046\uff84\047\uff84\050\uff84\052\uff84\053\uff84\054\uff84" +
    "\055\uff84\064\uff84\066\uff84\070\uff84\077\uff84\103\uff84\104" +
    "\uff84\001\002\000\066\010\uff82\021\uff82\022\uff82\033\uff82" +
    "\034\uff82\035\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043" +
    "\uff82\044\uff82\045\uff82\046\uff82\047\uff82\050\uff82\052\uff82" +
    "\053\uff82\054\uff82\055\uff82\064\uff82\066\uff82\070\uff82\077" +
    "\uff82\103\uff82\104\uff82\001\002\000\066\010\uff7f\021\uff7f" +
    "\022\uff7f\033\uff7f\034\uff7f\035\uff7f\037\uff7f\040\uff7f\041" +
    "\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f" +
    "\050\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\064\uff7f\066" +
    "\uff7f\070\uff7f\077\uff7f\103\uff7f\104\uff7f\001\002\000\024" +
    "\004\025\005\033\006\030\007\036\032\035\035\031\051" +
    "\041\060\032\061\042\001\002\000\066\010\uff7c\021\uff7c" +
    "\022\uff7c\033\uff7c\034\uff7c\035\uff7c\037\uff7c\040\uff7c\041" +
    "\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c" +
    "\050\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\064\uff7c\066" +
    "\uff7c\070\uff7c\077\uff7c\103\uff7c\104\uff7c\001\002\000\066" +
    "\010\uff80\021\uff80\022\uff80\033\uff80\034\uff80\035\uff80\037" +
    "\uff80\040\uff80\041\uff80\042\uff80\043\uff80\044\uff80\045\uff80" +
    "\046\uff80\047\uff80\050\uff80\052\uff80\053\uff80\054\uff80\055" +
    "\uff80\064\uff80\066\uff80\070\uff80\077\uff80\103\uff80\104\uff80" +
    "\001\002\000\040\010\122\034\053\035\046\037\051\040" +
    "\055\041\050\042\052\043\060\044\047\045\045\046\056" +
    "\047\054\050\057\052\044\055\061\001\002\000\024\004" +
    "\025\005\033\006\030\007\036\032\035\035\031\051\041" +
    "\060\032\061\042\001\002\000\074\010\uff7b\016\104\021" +
    "\uff7b\022\uff7b\032\106\033\uff7b\034\uff7b\035\uff7b\037\uff7b" +
    "\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046" +
    "\uff7b\047\uff7b\050\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b" +
    "\064\uff7b\066\uff7b\070\uff7b\076\105\077\uff7b\103\uff7b\104" +
    "\uff7b\001\002\000\066\010\uff81\021\uff81\022\uff81\033\uff81" +
    "\034\uff81\035\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043" +
    "\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050\uff81\052\uff81" +
    "\053\uff81\054\uff81\055\uff81\064\uff81\066\uff81\070\uff81\077" +
    "\uff81\103\uff81\104\uff81\001\002\000\066\010\uff83\021\uff83" +
    "\022\uff83\033\uff83\034\uff83\035\uff83\037\uff83\040\uff83\041" +
    "\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83" +
    "\050\uff83\052\uff83\053\uff83\054\uff83\055\uff83\064\uff83\066" +
    "\uff83\070\uff83\077\uff83\103\uff83\104\uff83\001\002\000\024" +
    "\004\025\005\033\006\030\007\036\032\035\035\031\051" +
    "\041\060\032\061\042\001\002\000\066\010\uff7d\021\uff7d" +
    "\022\uff7d\033\uff7d\034\uff7d\035\uff7d\037\uff7d\040\uff7d\041" +
    "\uff7d\042\uff7d\043\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d" +
    "\050\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\064\uff7d\066" +
    "\uff7d\070\uff7d\077\uff7d\103\uff7d\104\uff7d\001\002\000\066" +
    "\010\uff6a\021\uff6a\022\uff6a\033\uff6a\034\053\035\046\037" +
    "\051\040\055\041\050\042\052\043\060\044\047\045\045" +
    "\046\056\047\054\050\057\052\uff6a\053\uff6a\054\uff6a\055" +
    "\uff6a\064\uff6a\066\uff6a\070\uff6a\077\uff6a\103\uff6a\104\uff6a" +
    "\001\002\000\026\004\025\005\033\006\030\007\036\032" +
    "\035\035\031\051\041\053\101\060\032\061\042\001\002" +
    "\000\024\004\025\005\033\006\030\007\036\032\035\035" +
    "\031\051\041\060\032\061\042\001\002\000\024\004\025" +
    "\005\033\006\030\007\036\032\035\035\031\051\041\060" +
    "\032\061\042\001\002\000\024\004\025\005\033\006\030" +
    "\007\036\032\035\035\031\051\041\060\032\061\042\001" +
    "\002\000\024\004\025\005\033\006\030\007\036\032\035" +
    "\035\031\051\041\060\032\061\042\001\002\000\024\004" +
    "\025\005\033\006\030\007\036\032\035\035\031\051\041" +
    "\060\032\061\042\001\002\000\024\004\025\005\033\006" +
    "\030\007\036\032\035\035\031\051\041\060\032\061\042" +
    "\001\002\000\024\004\025\005\033\006\030\007\036\032" +
    "\035\035\031\051\041\060\032\061\042\001\002\000\024" +
    "\004\025\005\033\006\030\007\036\032\035\035\031\051" +
    "\041\060\032\061\042\001\002\000\024\004\025\005\033" +
    "\006\030\007\036\032\035\035\031\051\041\060\032\061" +
    "\042\001\002\000\024\004\025\005\033\006\030\007\036" +
    "\032\035\035\031\051\041\060\032\061\042\001\002\000" +
    "\024\004\025\005\033\006\030\007\036\032\035\035\031" +
    "\051\041\060\032\061\042\001\002\000\024\004\025\005" +
    "\033\006\030\007\036\032\035\035\031\051\041\060\032" +
    "\061\042\001\002\000\026\004\025\005\033\006\030\007" +
    "\036\032\035\035\031\051\041\054\063\060\032\061\042" +
    "\001\002\000\066\010\uff68\021\uff68\022\uff68\033\uff68\034" +
    "\053\035\046\037\051\040\055\041\050\042\052\043\060" +
    "\044\047\045\045\046\056\047\054\050\057\052\044\053" +
    "\uff68\054\uff68\055\uff68\064\uff68\066\uff68\070\uff68\077\uff68" +
    "\103\uff68\104\uff68\001\002\000\024\004\025\005\033\006" +
    "\030\007\036\032\035\035\031\051\041\060\032\061\042" +
    "\001\002\000\066\010\uff66\021\uff66\022\uff66\033\uff66\034" +
    "\053\035\046\037\051\040\055\041\050\042\052\043\060" +
    "\044\047\045\045\046\056\047\054\050\057\052\044\053" +
    "\uff66\054\uff66\055\061\064\uff66\066\uff66\070\uff66\077\uff66" +
    "\103\uff66\104\uff66\001\002\000\066\010\uff6f\021\uff6f\022" +
    "\uff6f\033\uff6f\034\053\035\046\037\051\040\055\041\050" +
    "\042\052\043\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f\050" +
    "\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f\064\uff6f\066\uff6f" +
    "\070\uff6f\077\uff6f\103\uff6f\104\uff6f\001\002\000\066\010" +
    "\uff70\021\uff70\022\uff70\033\uff70\034\053\035\046\037\051" +
    "\040\055\041\050\042\052\043\uff70\044\uff70\045\uff70\046" +
    "\uff70\047\uff70\050\uff70\052\uff70\053\uff70\054\uff70\055\uff70" +
    "\064\uff70\066\uff70\070\uff70\077\uff70\103\uff70\104\uff70\001" +
    "\002\000\066\010\uff6c\021\uff6c\022\uff6c\033\uff6c\034\053" +
    "\035\046\037\051\040\055\041\050\042\052\043\uff6c\044" +
    "\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\052\uff6c\053\uff6c" +
    "\054\uff6c\055\uff6c\064\uff6c\066\uff6c\070\uff6c\077\uff6c\103" +
    "\uff6c\104\uff6c\001\002\000\066\010\uff74\021\uff74\022\uff74" +
    "\033\uff74\034\uff74\035\uff74\037\uff74\040\uff74\041\uff74\042" +
    "\uff74\043\uff74\044\uff74\045\uff74\046\uff74\047\uff74\050\uff74" +
    "\052\uff74\053\uff74\054\uff74\055\uff74\064\uff74\066\uff74\070" +
    "\uff74\077\uff74\103\uff74\104\uff74\001\002\000\066\010\uff6b" +
    "\021\uff6b\022\uff6b\033\uff6b\034\053\035\046\037\051\040" +
    "\055\041\050\042\052\043\uff6b\044\uff6b\045\uff6b\046\uff6b" +
    "\047\uff6b\050\uff6b\052\uff6b\053\uff6b\054\uff6b\055\uff6b\064" +
    "\uff6b\066\uff6b\070\uff6b\077\uff6b\103\uff6b\104\uff6b\001\002" +
    "\000\066\010\uff77\021\uff77\022\uff77\033\uff77\034\uff77\035" +
    "\uff77\037\051\040\055\041\050\042\052\043\uff77\044\uff77" +
    "\045\uff77\046\uff77\047\uff77\050\uff77\052\uff77\053\uff77\054" +
    "\uff77\055\uff77\064\uff77\066\uff77\070\uff77\077\uff77\103\uff77" +
    "\104\uff77\001\002\000\066\010\uff72\021\uff72\022\uff72\033" +
    "\uff72\034\uff72\035\uff72\037\uff72\040\uff72\041\uff72\042\uff72" +
    "\043\uff72\044\uff72\045\uff72\046\uff72\047\uff72\050\uff72\052" +
    "\uff72\053\uff72\054\uff72\055\uff72\064\uff72\066\uff72\070\uff72" +
    "\077\uff72\103\uff72\104\uff72\001\002\000\066\010\uff75\021" +
    "\uff75\022\uff75\033\uff75\034\uff75\035\uff75\037\uff75\040\uff75" +
    "\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046\uff75\047" +
    "\uff75\050\uff75\052\uff75\053\uff75\054\uff75\055\uff75\064\uff75" +
    "\066\uff75\070\uff75\077\uff75\103\uff75\104\uff75\001\002\000" +
    "\066\010\uff73\021\uff73\022\uff73\033\uff73\034\uff73\035\uff73" +
    "\037\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044\uff73\045" +
    "\uff73\046\uff73\047\uff73\050\uff73\052\uff73\053\uff73\054\uff73" +
    "\055\uff73\064\uff73\066\uff73\070\uff73\077\uff73\103\uff73\104" +
    "\uff73\001\002\000\066\010\uff6e\021\uff6e\022\uff6e\033\uff6e" +
    "\034\053\035\046\037\051\040\055\041\050\042\052\043" +
    "\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\052\uff6e" +
    "\053\uff6e\054\uff6e\055\uff6e\064\uff6e\066\uff6e\070\uff6e\077" +
    "\uff6e\103\uff6e\104\uff6e\001\002\000\066\010\uff76\021\uff76" +
    "\022\uff76\033\uff76\034\uff76\035\uff76\037\051\040\055\041" +
    "\050\042\052\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76" +
    "\050\uff76\052\uff76\053\uff76\054\uff76\055\uff76\064\uff76\066" +
    "\uff76\070\uff76\077\uff76\103\uff76\104\uff76\001\002\000\066" +
    "\010\uff6d\021\uff6d\022\uff6d\033\uff6d\034\053\035\046\037" +
    "\051\040\055\041\050\042\052\043\uff6d\044\uff6d\045\uff6d" +
    "\046\uff6d\047\uff6d\050\uff6d\052\uff6d\053\uff6d\054\uff6d\055" +
    "\uff6d\064\uff6d\066\uff6d\070\uff6d\077\uff6d\103\uff6d\104\uff6d" +
    "\001\002\000\024\004\025\005\033\006\030\007\036\032" +
    "\035\035\031\051\041\060\032\061\042\001\002\000\066" +
    "\010\uff69\021\uff69\022\uff69\033\uff69\034\053\035\046\037" +
    "\051\040\055\041\050\042\052\043\060\044\047\045\045" +
    "\046\056\047\054\050\057\052\uff69\053\uff69\054\uff69\055" +
    "\uff69\064\uff69\066\uff69\070\uff69\077\uff69\103\uff69\104\uff69" +
    "\001\002\000\066\010\uff67\021\uff67\022\uff67\033\uff67\034" +
    "\053\035\046\037\051\040\055\041\050\042\052\043\060" +
    "\044\047\045\045\046\056\047\054\050\057\052\044\053" +
    "\uff67\054\uff67\055\061\064\uff67\066\uff67\070\uff67\077\uff67" +
    "\103\uff67\104\uff67\001\002\000\004\007\117\001\002\000" +
    "\024\004\025\005\033\006\030\007\036\032\035\035\031" +
    "\051\041\060\032\061\042\001\002\000\026\004\025\005" +
    "\033\006\030\007\036\032\035\033\110\035\031\051\041" +
    "\060\032\061\042\001\002\000\006\022\112\033\113\001" +
    "\002\000\066\010\uffd1\021\uffd1\022\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\052\uffd1\053\uffd1" +
    "\054\uffd1\055\uffd1\064\uffd1\066\uffd1\070\uffd1\077\uffd1\103" +
    "\uffd1\104\uffd1\001\002\000\042\022\uffcf\033\uffcf\034\053" +
    "\035\046\037\051\040\055\041\050\042\052\043\060\044" +
    "\047\045\045\046\056\047\054\050\057\052\044\055\061" +
    "\001\002\000\024\004\025\005\033\006\030\007\036\032" +
    "\035\035\031\051\041\060\032\061\042\001\002\000\066" +
    "\010\uffd2\021\uffd2\022\uffd2\033\uffd2\034\uffd2\035\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\052\uffd2\053\uffd2\054\uffd2\055" +
    "\uffd2\064\uffd2\066\uffd2\070\uffd2\077\uffd2\103\uffd2\104\uffd2" +
    "\001\002\000\042\022\uffd0\033\uffd0\034\053\035\046\037" +
    "\051\040\055\041\050\042\052\043\060\044\047\045\045" +
    "\046\056\047\054\050\057\052\044\055\061\001\002\000" +
    "\040\034\053\035\046\037\051\040\055\041\050\042\052" +
    "\043\060\044\047\045\045\046\056\047\054\050\057\052" +
    "\044\055\061\077\116\001\002\000\066\010\uff79\021\uff79" +
    "\022\uff79\033\uff79\034\uff79\035\uff79\037\uff79\040\uff79\041" +
    "\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79\047\uff79" +
    "\050\uff79\052\uff79\053\uff79\054\uff79\055\uff79\064\uff79\066" +
    "\uff79\070\uff79\077\uff79\103\uff79\104\uff79\001\002\000\066" +
    "\010\uff7a\021\uff7a\022\uff7a\033\uff7a\034\uff7a\035\uff7a\037" +
    "\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a" +
    "\046\uff7a\047\uff7a\050\uff7a\052\uff7a\053\uff7a\054\uff7a\055" +
    "\uff7a\064\uff7a\066\uff7a\070\uff7a\077\uff7a\103\uff7a\104\uff7a" +
    "\001\002\000\040\033\121\034\053\035\046\037\051\040" +
    "\055\041\050\042\052\043\060\044\047\045\045\046\056" +
    "\047\054\050\057\052\044\055\061\001\002\000\066\010" +
    "\uff71\021\uff71\022\uff71\033\uff71\034\uff71\035\uff71\037\uff71" +
    "\040\uff71\041\uff71\042\uff71\043\uff71\044\uff71\045\uff71\046" +
    "\uff71\047\uff71\050\uff71\052\uff71\053\uff71\054\uff71\055\uff71" +
    "\064\uff71\066\uff71\070\uff71\077\uff71\103\uff71\104\uff71\001" +
    "\002\000\024\002\uffbd\007\uffbd\013\uffbd\014\uffbd\017\uffbd" +
    "\020\uffbd\023\uffbd\100\uffbd\101\uffbd\001\002\000\066\010" +
    "\uff78\021\uff78\022\uff78\033\uff78\034\uff78\035\uff78\037\uff78" +
    "\040\uff78\041\uff78\042\uff78\043\uff78\044\uff78\045\uff78\046" +
    "\uff78\047\uff78\050\uff78\052\uff78\053\uff78\054\uff78\055\uff78" +
    "\064\uff78\066\uff78\070\uff78\077\uff78\103\uff78\104\uff78\001" +
    "\002\000\024\002\uffbb\007\uffbb\013\uffbb\014\uffbb\017\uffbb" +
    "\020\uffbb\023\uffbb\100\uffbb\101\uffbb\001\002\000\024\004" +
    "\025\005\033\006\030\007\036\032\035\035\031\051\041" +
    "\060\032\061\042\001\002\000\040\010\127\034\053\035" +
    "\046\037\051\040\055\041\050\042\052\043\060\044\047" +
    "\045\045\046\056\047\054\050\057\052\044\055\061\001" +
    "\002\000\024\002\uffbc\007\uffbc\013\uffbc\014\uffbc\017\uffbc" +
    "\020\uffbc\023\uffbc\100\uffbc\101\uffbc\001\002\000\032\003" +
    "\155\007\143\011\140\012\161\015\337\062\142\063\154" +
    "\065\135\067\157\071\160\073\152\074\131\001\002\000" +
    "\004\010\uff85\001\002\000\004\010\336\001\002\000\004" +
    "\010\317\001\002\000\004\010\316\001\002\000\024\004" +
    "\025\005\033\006\030\007\036\032\035\035\031\051\041" +
    "\060\032\061\042\001\002\000\056\003\uffef\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\011\uffef\012\uffef\015\uffef\032\uffef" +
    "\035\uffef\051\uffef\054\uffef\060\uffef\061\uffef\062\uffef\063" +
    "\uffef\065\uffef\067\uffef\071\uffef\072\uffef\073\uffef\074\uffef" +
    "\001\002\000\034\003\ufff6\007\ufff6\011\ufff6\012\ufff6\015" +
    "\ufff6\062\ufff6\063\ufff6\065\ufff6\067\ufff6\071\ufff6\072\ufff6" +
    "\073\ufff6\074\ufff6\001\002\000\004\032\321\001\002\000" +
    "\004\010\320\001\002\000\024\004\025\005\033\006\030" +
    "\007\036\032\035\035\031\051\041\060\032\061\042\001" +
    "\002\000\012\016\245\021\247\032\250\076\246\001\002" +
    "\000\004\010\244\001\002\000\004\010\243\001\002\000" +
    "\056\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\011\uffee" +
    "\012\uffee\015\uffee\032\uffee\035\uffee\051\uffee\054\uffee\060" +
    "\uffee\061\uffee\062\uffee\063\uffee\065\uffee\067\uffee\071\uffee" +
    "\072\uffee\073\uffee\074\uffee\001\002\000\004\010\242\001" +
    "\002\000\056\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\011\uffec\012\uffec\015\uffec\032\uffec\035\uffec\051\uffec\054" +
    "\uffec\060\uffec\061\uffec\062\uffec\063\uffec\065\uffec\067\uffec" +
    "\071\uffec\072\uffec\073\uffec\074\uffec\001\002\000\056\003" +
    "\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb\012\uffeb" +
    "\015\uffeb\032\uffeb\035\uffeb\051\uffeb\054\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\063\uffeb\065\uffeb\067\uffeb\071\uffeb\072\uffeb" +
    "\073\uffeb\074\uffeb\001\002\000\004\010\uff86\001\002\000" +
    "\004\010\241\001\002\000\024\004\025\005\033\006\030" +
    "\007\036\032\035\035\031\051\041\060\032\061\042\001" +
    "\002\000\060\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\010\211\011\uffe7\012\uffe7\015\uffe7\032\uffe7\035\uffe7\051" +
    "\uffe7\054\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\065\uffe7" +
    "\067\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\001\002\000" +
    "\056\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\011\uffed" +
    "\012\uffed\015\uffed\032\uffed\035\uffed\051\uffed\054\uffed\060" +
    "\uffed\061\uffed\062\uffed\063\uffed\065\uffed\067\uffed\071\uffed" +
    "\072\uffed\073\uffed\074\uffed\001\002\000\004\007\175\001" +
    "\002\000\030\003\155\007\143\011\140\012\161\062\142" +
    "\063\154\065\135\067\157\071\160\073\152\074\131\001" +
    "\002\000\004\032\162\001\002\000\004\007\163\001\002" +
    "\000\012\021\uffae\022\uffae\033\uffae\050\uffae\001\002\000" +
    "\006\022\165\033\166\001\002\000\004\007\167\001\002" +
    "\000\004\010\uff9f\001\002\000\012\021\uffaf\022\uffaf\033" +
    "\uffaf\050\uffaf\001\002\000\032\003\155\007\143\011\140" +
    "\012\161\062\142\063\154\065\135\067\157\071\160\072" +
    "\172\073\152\074\131\001\002\000\034\003\ufff7\007\ufff7" +
    "\011\ufff7\012\ufff7\015\ufff7\062\ufff7\063\ufff7\065\ufff7\067" +
    "\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\001\002\000\024" +
    "\004\025\005\033\006\030\007\036\032\035\035\031\051" +
    "\041\060\032\061\042\001\002\000\040\010\174\034\053" +
    "\035\046\037\051\040\055\041\050\042\052\043\060\044" +
    "\047\045\045\046\056\047\054\050\057\052\044\055\061" +
    "\001\002\000\056\003\uff87\004\uff87\005\uff87\006\uff87\007" +
    "\uff87\011\uff87\012\uff87\015\uff87\032\uff87\035\uff87\051\uff87" +
    "\054\uff87\060\uff87\061\uff87\062\uff87\063\uff87\065\uff87\067" +
    "\uff87\071\uff87\072\uff87\073\uff87\074\uff87\001\002\000\004" +
    "\021\176\001\002\000\004\050\177\001\002\000\024\004" +
    "\025\005\033\006\030\007\036\032\035\035\031\051\041" +
    "\060\032\061\042\001\002\000\040\034\053\035\046\037" +
    "\051\040\055\041\050\042\052\043\060\044\047\045\045" +
    "\046\056\047\054\050\057\052\044\055\061\070\201\001" +
    "\002\000\024\004\025\005\033\006\030\007\036\032\035" +
    "\035\031\051\041\060\032\061\042\001\002\000\040\034" +
    "\053\035\046\037\051\040\055\041\050\042\052\043\060" +
    "\044\047\045\045\046\056\047\054\050\057\052\044\055" +
    "\061\066\203\001\002\000\032\003\155\007\143\011\140" +
    "\012\161\014\205\062\142\063\154\065\135\067\157\071" +
    "\160\073\152\074\131\001\002\000\056\003\uff89\004\uff89" +
    "\005\uff89\006\uff89\007\uff89\011\uff89\012\uff89\015\uff89\032" +
    "\uff89\035\uff89\051\uff89\054\uff89\060\uff89\061\uff89\062\uff89" +
    "\063\uff89\065\uff89\067\uff89\071\uff89\072\uff89\073\uff89\074" +
    "\uff89\001\002\000\030\003\155\007\143\011\140\012\161" +
    "\062\142\063\154\065\135\067\157\071\160\073\152\074" +
    "\131\001\002\000\032\003\155\007\143\011\140\012\161" +
    "\015\207\062\142\063\154\065\135\067\157\071\160\073" +
    "\152\074\131\001\002\000\004\010\210\001\002\000\056" +
    "\003\uff88\004\uff88\005\uff88\006\uff88\007\uff88\011\uff88\012" +
    "\uff88\015\uff88\032\uff88\035\uff88\051\uff88\054\uff88\060\uff88" +
    "\061\uff88\062\uff88\063\uff88\065\uff88\067\uff88\071\uff88\072" +
    "\uff88\073\uff88\074\uff88\001\002\000\056\003\uffe8\004\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8\015\uffe8\032" +
    "\uffe8\035\uffe8\051\uffe8\054\uffe8\060\uffe8\061\uffe8\062\uffe8" +
    "\063\uffe8\065\uffe8\067\uffe8\071\uffe8\072\uffe8\073\uffe8\074" +
    "\uffe8\001\002\000\040\034\053\035\046\037\051\040\055" +
    "\041\050\042\052\043\060\044\047\045\045\046\056\047" +
    "\054\050\057\052\044\055\061\064\213\001\002\000\024" +
    "\004\025\005\033\006\030\007\036\032\035\035\031\051" +
    "\041\060\032\061\042\001\002\000\026\004\025\005\033" +
    "\006\030\007\036\032\035\035\031\051\041\054\231\060" +
    "\032\061\042\001\002\000\006\021\221\022\220\001\002" +
    "\000\026\004\uff90\005\uff90\006\uff90\007\uff90\032\uff90\035" +
    "\uff90\051\uff90\054\uff90\060\uff90\061\uff90\001\002\000\042" +
    "\021\uff8c\022\uff8c\034\053\035\046\037\051\040\055\041" +
    "\050\042\052\043\060\044\047\045\045\046\056\047\054" +
    "\050\057\052\044\055\061\001\002\000\024\004\025\005" +
    "\033\006\030\007\036\032\035\035\031\051\041\060\032" +
    "\061\042\001\002\000\032\003\155\007\143\011\140\012" +
    "\161\014\223\062\142\063\154\065\135\067\157\071\160" +
    "\073\152\074\131\001\002\000\026\004\uff8e\005\uff8e\006" +
    "\uff8e\007\uff8e\032\uff8e\035\uff8e\051\uff8e\054\uff8e\060\uff8e" +
    "\061\uff8e\001\002\000\030\003\155\007\143\011\140\012" +
    "\161\062\142\063\154\065\135\067\157\071\160\073\152" +
    "\074\131\001\002\000\032\003\155\007\143\011\140\012" +
    "\161\015\225\062\142\063\154\065\135\067\157\071\160" +
    "\073\152\074\131\001\002\000\004\010\226\001\002\000" +
    "\026\004\uff8f\005\uff8f\006\uff8f\007\uff8f\032\uff8f\035\uff8f" +
    "\051\uff8f\054\uff8f\060\uff8f\061\uff8f\001\002\000\042\021" +
    "\uff8d\022\uff8d\034\053\035\046\037\051\040\055\041\050" +
    "\042\052\043\060\044\047\045\045\046\056\047\054\050" +
    "\057\052\044\055\061\001\002\000\026\004\uff91\005\uff91" +
    "\006\uff91\007\uff91\032\uff91\035\uff91\051\uff91\054\uff91\060" +
    "\uff91\061\uff91\001\002\000\032\003\155\007\143\011\140" +
    "\012\161\014\233\062\142\063\154\065\135\067\157\071" +
    "\160\073\152\074\131\001\002\000\004\015\237\001\002" +
    "\000\030\003\155\007\143\011\140\012\161\062\142\063" +
    "\154\065\135\067\157\071\160\073\152\074\131\001\002" +
    "\000\032\003\155\007\143\011\140\012\161\015\235\062" +
    "\142\063\154\065\135\067\157\071\160\073\152\074\131" +
    "\001\002\000\004\010\236\001\002\000\056\003\uff93\004" +
    "\uff93\005\uff93\006\uff93\007\uff93\011\uff93\012\uff93\015\uff93" +
    "\032\uff93\035\uff93\051\uff93\054\uff93\060\uff93\061\uff93\062" +
    "\uff93\063\uff93\065\uff93\067\uff93\071\uff93\072\uff93\073\uff93" +
    "\074\uff93\001\002\000\004\010\240\001\002\000\056\003" +
    "\uff92\004\uff92\005\uff92\006\uff92\007\uff92\011\uff92\012\uff92" +
    "\015\uff92\032\uff92\035\uff92\051\uff92\054\uff92\060\uff92\061" +
    "\uff92\062\uff92\063\uff92\065\uff92\067\uff92\071\uff92\072\uff92" +
    "\073\uff92\074\uff92\001\002\000\056\003\uffea\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\011\uffea\012\uffea\015\uffea\032\uffea" +
    "\035\uffea\051\uffea\054\uffea\060\uffea\061\uffea\062\uffea\063" +
    "\uffea\065\uffea\067\uffea\071\uffea\072\uffea\073\uffea\074\uffea" +
    "\001\002\000\056\003\ufff4\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\011\ufff4\012\ufff4\015\ufff4\032\ufff4\035\ufff4\051\ufff4" +
    "\054\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\065\ufff4\067" +
    "\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\001\002\000\056" +
    "\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\011\uffe9\012" +
    "\uffe9\015\uffe9\032\uffe9\035\uffe9\051\uffe9\054\uffe9\060\uffe9" +
    "\061\uffe9\062\uffe9\063\uffe9\065\uffe9\067\uffe9\071\uffe9\072" +
    "\uffe9\073\uffe9\074\uffe9\001\002\000\056\003\ufff3\004\ufff3" +
    "\005\ufff3\006\ufff3\007\ufff3\011\ufff3\012\ufff3\015\ufff3\032" +
    "\ufff3\035\ufff3\051\ufff3\054\ufff3\060\ufff3\061\ufff3\062\ufff3" +
    "\063\ufff3\065\ufff3\067\ufff3\071\ufff3\072\ufff3\073\ufff3\074" +
    "\ufff3\001\002\000\004\007\263\001\002\000\024\004\025" +
    "\005\033\006\030\007\036\032\035\035\031\051\041\060" +
    "\032\061\042\001\002\000\004\050\254\001\002\000\026" +
    "\004\025\005\033\006\030\007\036\032\035\033\252\035" +
    "\031\051\041\060\032\061\042\001\002\000\006\022\112" +
    "\033\253\001\002\000\004\010\uffd3\001\002\000\004\010" +
    "\uffd4\001\002\000\024\004\025\005\033\006\030\007\036" +
    "\032\035\035\031\051\041\060\032\061\042\001\002\000" +
    "\042\010\uff9c\034\053\035\046\037\051\040\055\041\050" +
    "\042\052\043\060\044\047\045\045\046\056\047\054\050" +
    "\057\052\044\054\uff9c\055\061\001\002\000\040\034\053" +
    "\035\046\037\051\040\055\041\050\042\052\043\060\044" +
    "\047\045\045\046\056\047\054\050\057\052\044\055\061" +
    "\077\257\001\002\000\004\021\260\001\002\000\004\050" +
    "\261\001\002\000\024\004\025\005\033\006\030\007\036" +
    "\032\035\035\031\051\041\060\032\061\042\001\002\000" +
    "\042\010\uff9a\034\053\035\046\037\051\040\055\041\050" +
    "\042\052\043\060\044\047\045\045\046\056\047\054\050" +
    "\057\052\044\054\uff9a\055\061\001\002\000\004\021\264" +
    "\001\002\000\004\050\265\001\002\000\024\004\025\005" +
    "\033\006\030\007\036\032\035\035\031\051\041\060\032" +
    "\061\042\001\002\000\040\010\uff9b\034\053\035\046\037" +
    "\051\040\055\041\050\042\052\043\060\044\047\045\045" +
    "\046\056\047\054\050\057\052\044\055\061\001\002\000" +
    "\040\034\053\035\046\037\051\040\055\041\050\042\052" +
    "\043\060\044\047\045\045\046\056\047\054\050\057\052" +
    "\044\053\270\055\061\001\002\000\032\003\155\007\143" +
    "\011\140\012\161\014\275\062\142\063\154\065\135\067" +
    "\157\071\160\073\152\074\131\001\002\000\006\010\317" +
    "\054\uffe6\001\002\000\006\010\316\054\uffe4\001\002\000" +
    "\056\003\uff99\004\uff99\005\uff99\006\uff99\007\uff99\011\uff99" +
    "\012\uff99\015\uff99\032\uff99\035\uff99\051\uff99\054\uff99\060" +
    "\uff99\061\uff99\062\uff99\063\uff99\065\uff99\067\uff99\071\uff99" +
    "\072\uff99\073\uff99\074\uff99\001\002\000\006\010\244\054" +
    "\uffe5\001\002\000\030\003\155\007\143\011\140\012\161" +
    "\062\142\063\154\065\135\067\157\071\160\073\152\074" +
    "\131\001\002\000\004\054\277\001\002\000\032\003\155" +
    "\007\143\011\140\012\161\014\301\062\142\063\154\065" +
    "\135\067\157\071\160\073\152\074\131\001\002\000\056" +
    "\003\uff96\004\uff96\005\uff96\006\uff96\007\uff96\011\uff96\012" +
    "\uff96\015\uff96\032\uff96\035\uff96\051\uff96\054\uff96\060\uff96" +
    "\061\uff96\062\uff96\063\uff96\065\uff96\067\uff96\071\uff96\072" +
    "\uff96\073\uff96\074\uff96\001\002\000\030\003\155\007\143" +
    "\011\140\012\161\062\142\063\154\065\135\067\157\071" +
    "\160\073\152\074\131\001\002\000\032\003\155\007\143" +
    "\011\140\012\161\015\303\062\142\063\154\065\135\067" +
    "\157\071\160\073\152\074\131\001\002\000\004\010\304" +
    "\001\002\000\056\003\uff95\004\uff95\005\uff95\006\uff95\007" +
    "\uff95\011\uff95\012\uff95\015\uff95\032\uff95\035\uff95\051\uff95" +
    "\054\uff95\060\uff95\061\uff95\062\uff95\063\uff95\065\uff95\067" +
    "\uff95\071\uff95\072\uff95\073\uff95\074\uff95\001\002\000\032" +
    "\003\155\007\143\011\140\012\161\015\306\062\142\063" +
    "\154\065\135\067\157\071\160\073\152\074\131\001\002" +
    "\000\006\010\307\054\310\001\002\000\056\003\uff98\004" +
    "\uff98\005\uff98\006\uff98\007\uff98\011\uff98\012\uff98\015\uff98" +
    "\032\uff98\035\uff98\051\uff98\054\uff98\060\uff98\061\uff98\062" +
    "\uff98\063\uff98\065\uff98\067\uff98\071\uff98\072\uff98\073\uff98" +
    "\074\uff98\001\002\000\032\003\155\007\143\011\140\012" +
    "\161\014\312\062\142\063\154\065\135\067\157\071\160" +
    "\073\152\074\131\001\002\000\056\003\uff97\004\uff97\005" +
    "\uff97\006\uff97\007\uff97\011\uff97\012\uff97\015\uff97\032\uff97" +
    "\035\uff97\051\uff97\054\uff97\060\uff97\061\uff97\062\uff97\063" +
    "\uff97\065\uff97\067\uff97\071\uff97\072\uff97\073\uff97\074\uff97" +
    "\001\002\000\030\003\155\007\143\011\140\012\161\062" +
    "\142\063\154\065\135\067\157\071\160\073\152\074\131" +
    "\001\002\000\032\003\155\007\143\011\140\012\161\015" +
    "\314\062\142\063\154\065\135\067\157\071\160\073\152" +
    "\074\131\001\002\000\004\010\315\001\002\000\056\003" +
    "\uff94\004\uff94\005\uff94\006\uff94\007\uff94\011\uff94\012\uff94" +
    "\015\uff94\032\uff94\035\uff94\051\uff94\054\uff94\060\uff94\061" +
    "\uff94\062\uff94\063\uff94\065\uff94\067\uff94\071\uff94\072\uff94" +
    "\073\uff94\074\uff94\001\002\000\056\003\ufff2\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\011\ufff2\012\ufff2\015\ufff2\032\ufff2" +
    "\035\ufff2\051\ufff2\054\ufff2\060\ufff2\061\ufff2\062\ufff2\063" +
    "\ufff2\065\ufff2\067\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2" +
    "\001\002\000\056\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007" +
    "\ufff5\011\ufff5\012\ufff5\015\ufff5\032\ufff5\035\ufff5\051\ufff5" +
    "\054\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\065\ufff5\067" +
    "\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\001\002\000\056" +
    "\003\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1\012" +
    "\ufff1\015\ufff1\032\ufff1\035\ufff1\051\ufff1\054\ufff1\060\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\065\ufff1\067\ufff1\071\ufff1\072" +
    "\ufff1\073\ufff1\074\ufff1\001\002\000\024\004\025\005\033" +
    "\006\030\007\036\032\035\035\031\051\041\060\032\061" +
    "\042\001\002\000\042\022\uff9d\033\uff9d\034\053\035\046" +
    "\037\051\040\055\041\050\042\052\043\060\044\047\045" +
    "\045\046\056\047\054\050\057\052\044\055\061\001\002" +
    "\000\006\022\324\033\325\001\002\000\024\004\025\005" +
    "\033\006\030\007\036\032\035\035\031\051\041\060\032" +
    "\061\042\001\002\000\006\010\uffa0\054\uffa0\001\002\000" +
    "\042\022\uff9e\033\uff9e\034\053\035\046\037\051\040\055" +
    "\041\050\042\052\043\060\044\047\045\045\046\056\047" +
    "\054\050\057\052\044\055\061\001\002\000\040\034\053" +
    "\035\046\037\051\040\055\041\050\042\052\043\060\044" +
    "\047\045\045\046\056\047\054\050\057\052\044\055\061" +
    "\066\330\001\002\000\032\003\155\007\143\011\140\012" +
    "\161\014\332\062\142\063\154\065\135\067\157\071\160" +
    "\073\152\074\131\001\002\000\056\003\uff8a\004\uff8a\005" +
    "\uff8a\006\uff8a\007\uff8a\011\uff8a\012\uff8a\015\uff8a\032\uff8a" +
    "\035\uff8a\051\uff8a\054\uff8a\060\uff8a\061\uff8a\062\uff8a\063" +
    "\uff8a\065\uff8a\067\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a" +
    "\001\002\000\030\003\155\007\143\011\140\012\161\062" +
    "\142\063\154\065\135\067\157\071\160\073\152\074\131" +
    "\001\002\000\032\003\155\007\143\011\140\012\161\015" +
    "\334\062\142\063\154\065\135\067\157\071\160\073\152" +
    "\074\131\001\002\000\004\010\335\001\002\000\056\003" +
    "\uff8b\004\uff8b\005\uff8b\006\uff8b\007\uff8b\011\uff8b\012\uff8b" +
    "\015\uff8b\032\uff8b\035\uff8b\051\uff8b\054\uff8b\060\uff8b\061" +
    "\uff8b\062\uff8b\063\uff8b\065\uff8b\067\uff8b\071\uff8b\072\uff8b" +
    "\073\uff8b\074\uff8b\001\002\000\056\003\ufff0\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\011\ufff0\012\ufff0\015\ufff0\032\ufff0" +
    "\035\ufff0\051\ufff0\054\ufff0\060\ufff0\061\ufff0\062\ufff0\063" +
    "\ufff0\065\ufff0\067\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0" +
    "\001\002\000\004\016\340\001\002\000\022\002\ufff8\013" +
    "\ufff8\014\ufff8\017\ufff8\020\ufff8\023\ufff8\100\ufff8\101\ufff8" +
    "\001\002\000\004\002\001\001\002\000\022\002\000\013" +
    "\000\014\000\017\000\020\000\023\000\100\000\101\000" +
    "\001\002\000\004\032\344\001\002\000\010\007\345\017" +
    "\346\033\351\001\002\000\006\021\uffd5\022\uffd5\001\002" +
    "\000\004\007\u0156\001\002\000\006\021\u0154\022\u0150\001" +
    "\002\000\006\010\u0140\033\u0141\001\002\000\004\021\353" +
    "\001\002\000\006\021\uffd7\022\uffd7\001\002\000\020\007" +
    "\355\024\354\025\357\026\362\027\361\030\356\031\363" +
    "\001\002\000\006\010\uffa7\033\uffa7\001\002\000\006\010" +
    "\uffa1\033\uffa1\001\002\000\006\010\uffa5\033\uffa5\001\002" +
    "\000\006\010\uffa6\033\uffa6\001\002\000\004\010\364\001" +
    "\002\000\006\010\uffa3\033\uffa3\001\002\000\006\010\uffa2" +
    "\033\uffa2\001\002\000\006\010\uffa4\033\uffa4\001\002\000" +
    "\006\014\366\017\365\001\002\000\006\003\373\007\163" +
    "\001\002\000\030\003\155\007\143\011\140\012\161\062" +
    "\142\063\154\065\135\067\157\071\160\073\152\074\131" +
    "\001\002\000\032\003\155\007\143\011\140\012\161\015" +
    "\370\062\142\063\154\065\135\067\157\071\160\073\152" +
    "\074\131\001\002\000\004\010\371\001\002\000\022\002" +
    "\uffdb\013\uffdb\014\uffdb\017\uffdb\020\uffdb\023\uffdb\100\uffdb" +
    "\101\uffdb\001\002\000\026\002\uffb8\003\uffb8\007\uffb8\013" +
    "\uffb8\014\uffb8\017\uffb8\020\uffb8\023\uffb8\100\uffb8\101\uffb8" +
    "\001\002\000\030\002\uffb1\003\uffb1\007\uffb1\010\u013f\013" +
    "\uffb1\014\uffb1\017\uffb1\020\uffb1\023\uffb1\100\uffb1\101\uffb1" +
    "\001\002\000\010\021\u0105\022\165\050\u0104\001\002\000" +
    "\010\003\373\007\163\014\u0100\001\002\000\026\002\uffb3" +
    "\003\uffb3\007\uffb3\013\uffb3\014\uffb3\017\uffb3\020\uffb3\023" +
    "\uffb3\100\uffb3\101\uffb3\001\002\000\026\002\uffb9\003\uffb9" +
    "\007\uffb9\013\uffb9\014\uffb9\017\uffb9\020\uffb9\023\uffb9\100" +
    "\uffb9\101\uffb9\001\002\000\030\003\155\007\143\011\140" +
    "\012\161\062\142\063\154\065\135\067\157\071\160\073" +
    "\152\074\131\001\002\000\032\003\155\007\143\011\140" +
    "\012\161\015\u0102\062\142\063\154\065\135\067\157\071" +
    "\160\073\152\074\131\001\002\000\004\010\u0103\001\002" +
    "\000\022\002\uffdc\013\uffdc\014\uffdc\017\uffdc\020\uffdc\023" +
    "\uffdc\100\uffdc\101\uffdc\001\002\000\004\102\u011a\001\002" +
    "\000\042\004\025\005\033\006\030\007\u0107\024\354\025" +
    "\357\026\362\027\361\030\356\031\363\032\035\035\031" +
    "\051\041\060\032\061\042\075\u0109\001\002\000\040\034" +
    "\053\035\046\037\051\040\055\041\050\042\052\043\060" +
    "\044\047\045\045\046\056\047\054\050\057\052\044\055" +
    "\061\103\u0117\001\002\000\050\010\uffa1\016\104\032\106" +
    "\034\uff7b\035\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043" +
    "\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\052\uff7b" +
    "\055\uff7b\076\105\103\uff7b\001\002\000\004\010\u0116\001" +
    "\002\000\004\076\u010a\001\002\000\024\004\025\005\033" +
    "\006\030\007\036\032\035\035\031\051\041\060\032\061" +
    "\042\001\002\000\042\034\053\035\046\037\051\040\055" +
    "\041\050\042\052\043\060\044\047\045\045\046\056\047" +
    "\054\050\057\052\044\055\061\077\u010c\104\u010d\001\002" +
    "\000\004\064\u0113\001\002\000\024\004\025\005\033\006" +
    "\030\007\036\032\035\035\031\051\041\060\032\061\042" +
    "\001\002\000\040\034\053\035\046\037\051\040\055\041" +
    "\050\042\052\043\060\044\047\045\045\046\056\047\054" +
    "\050\057\052\044\055\061\077\u010f\001\002\000\004\064" +
    "\u0110\001\002\000\020\007\355\024\354\025\357\026\362" +
    "\027\361\030\356\031\363\001\002\000\004\010\u0112\001" +
    "\002\000\026\002\uffb5\003\uffb5\007\uffb5\013\uffb5\014\uffb5" +
    "\017\uffb5\020\uffb5\023\uffb5\100\uffb5\101\uffb5\001\002\000" +
    "\020\007\355\024\354\025\357\026\362\027\361\030\356" +
    "\031\363\001\002\000\004\010\u0115\001\002\000\026\002" +
    "\uffb4\003\uffb4\007\uffb4\013\uffb4\014\uffb4\017\uffb4\020\uffb4" +
    "\023\uffb4\100\uffb4\101\uffb4\001\002\000\026\002\uffb7\003" +
    "\uffb7\007\uffb7\013\uffb7\014\uffb7\017\uffb7\020\uffb7\023\uffb7" +
    "\100\uffb7\101\uffb7\001\002\000\024\004\025\005\033\006" +
    "\030\007\036\032\035\035\031\051\041\060\032\061\042" +
    "\001\002\000\040\010\u0119\034\053\035\046\037\051\040" +
    "\055\041\050\042\052\043\060\044\047\045\045\046\056" +
    "\047\054\050\057\052\044\055\061\001\002\000\026\002" +
    "\uffb6\003\uffb6\007\uffb6\013\uffb6\014\uffb6\017\uffb6\020\uffb6" +
    "\023\uffb6\100\uffb6\101\uffb6\001\002\000\004\007\u011b\001" +
    "\002\000\004\021\u013d\001\002\000\006\007\u011d\015\u011e" +
    "\001\002\000\004\021\u0120\001\002\000\004\010\u011f\001" +
    "\002\000\026\002\uffb0\003\uffb0\007\uffb0\013\uffb0\014\uffb0" +
    "\017\uffb0\020\uffb0\023\uffb0\100\uffb0\101\uffb0\001\002\000" +
    "\042\004\025\005\033\006\030\007\u0124\024\u0127\025\u0128" +
    "\026\u0129\027\u0126\030\u0125\031\u0121\032\035\035\031\051" +
    "\041\060\032\061\042\075\u012a\001\002\000\004\010\uffaa" +
    "\001\002\000\040\034\053\035\046\037\051\040\055\041" +
    "\050\042\052\043\060\044\047\045\045\046\056\047\054" +
    "\050\057\052\044\055\061\103\u013a\001\002\000\004\010" +
    "\u0139\001\002\000\050\010\u0138\016\104\032\106\034\uff7b" +
    "\035\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044" +
    "\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\052\uff7b\055\uff7b" +
    "\076\105\103\uff7b\001\002\000\004\010\uffab\001\002\000" +
    "\004\010\uffa9\001\002\000\004\010\uffad\001\002\000\004" +
    "\010\uffac\001\002\000\004\010\uffa8\001\002\000\004\076" +
    "\u012c\001\002\000\006\007\uffc4\015\uffc4\001\002\000\024" +
    "\004\025\005\033\006\030\007\036\032\035\035\031\051" +
    "\041\060\032\061\042\001\002\000\042\034\053\035\046" +
    "\037\051\040\055\041\050\042\052\043\060\044\047\045" +
    "\045\046\056\047\054\050\057\052\044\055\061\077\u012e" +
    "\104\u012f\001\002\000\004\064\u0135\001\002\000\024\004" +
    "\025\005\033\006\030\007\036\032\035\035\031\051\041" +
    "\060\032\061\042\001\002\000\040\034\053\035\046\037" +
    "\051\040\055\041\050\042\052\043\060\044\047\045\045" +
    "\046\056\047\054\050\057\052\044\055\061\077\u0131\001" +
    "\002\000\004\064\u0132\001\002\000\016\024\u0127\025\u0128" +
    "\026\u0129\027\u0126\030\u0125\031\u0121\001\002\000\004\010" +
    "\u0134\001\002\000\006\007\uffc0\015\uffc0\001\002\000\016" +
    "\024\u0127\025\u0128\026\u0129\027\u0126\030\u0125\031\u0121\001" +
    "\002\000\004\010\u0137\001\002\000\006\007\uffbf\015\uffbf" +
    "\001\002\000\006\007\uffbe\015\uffbe\001\002\000\006\007" +
    "\uffc2\015\uffc2\001\002\000\024\004\025\005\033\006\030" +
    "\007\036\032\035\035\031\051\041\060\032\061\042\001" +
    "\002\000\040\010\u013c\034\053\035\046\037\051\040\055" +
    "\041\050\042\052\043\060\044\047\045\045\046\056\047" +
    "\054\050\057\052\044\055\061\001\002\000\006\007\uffc1" +
    "\015\uffc1\001\002\000\042\004\025\005\033\006\030\007" +
    "\u0124\024\u0127\025\u0128\026\u0129\027\u0126\030\u0125\031\u0121" +
    "\032\035\035\031\051\041\060\032\061\042\075\u012a\001" +
    "\002\000\006\007\uffc3\015\uffc3\001\002\000\026\002\uffb2" +
    "\003\uffb2\007\uffb2\013\uffb2\014\uffb2\017\uffb2\020\uffb2\023" +
    "\uffb2\100\uffb2\101\uffb2\001\002\000\006\007\345\017\346" +
    "\001\002\000\004\021\u0142\001\002\000\020\007\355\024" +
    "\354\025\357\026\362\027\361\030\356\031\363\001\002" +
    "\000\004\010\u0144\001\002\000\006\014\u0146\017\u0145\001" +
    "\002\000\006\003\373\007\163\001\002\000\030\003\155" +
    "\007\143\011\140\012\161\062\142\063\154\065\135\067" +
    "\157\071\160\073\152\074\131\001\002\000\032\003\155" +
    "\007\143\011\140\012\161\015\u0148\062\142\063\154\065" +
    "\135\067\157\071\160\073\152\074\131\001\002\000\004" +
    "\010\u0149\001\002\000\022\002\uffdd\013\uffdd\014\uffdd\017" +
    "\uffdd\020\uffdd\023\uffdd\100\uffdd\101\uffdd\001\002\000\010" +
    "\003\373\007\163\014\u014b\001\002\000\030\003\155\007" +
    "\143\011\140\012\161\062\142\063\154\065\135\067\157" +
    "\071\160\073\152\074\131\001\002\000\032\003\155\007" +
    "\143\011\140\012\161\015\u014d\062\142\063\154\065\135" +
    "\067\157\071\160\073\152\074\131\001\002\000\004\010" +
    "\u014e\001\002\000\022\002\uffde\013\uffde\014\uffde\017\uffde" +
    "\020\uffde\023\uffde\100\uffde\101\uffde\001\002\000\006\021" +
    "\u0151\022\u0150\001\002\000\006\007\345\017\346\001\002" +
    "\000\020\007\355\024\354\025\357\026\362\027\361\030" +
    "\356\031\363\001\002\000\006\010\uffda\033\uffda\001\002" +
    "\000\006\021\uffd8\022\uffd8\001\002\000\020\007\355\024" +
    "\354\025\357\026\362\027\361\030\356\031\363\001\002" +
    "\000\006\010\uffd9\033\uffd9\001\002\000\006\021\uffd6\022" +
    "\uffd6\001\002\000\030\002\uffc6\003\uffc6\007\uffc6\010\u0175" +
    "\013\uffc6\014\uffc6\017\uffc6\020\uffc6\023\uffc6\100\uffc6\101" +
    "\uffc6\001\002\000\006\022\165\050\u015d\001\002\000\026" +
    "\002\uffcd\003\uffcd\007\uffcd\013\uffcd\014\uffcd\017\uffcd\020" +
    "\uffcd\023\uffcd\100\uffcd\101\uffcd\001\002\000\026\002\ufffd" +
    "\003\u0157\007\163\013\ufffd\014\ufffd\017\ufffd\020\ufffd\023" +
    "\ufffd\100\ufffd\101\ufffd\001\002\000\026\002\uffc8\003\uffc8" +
    "\007\uffc8\013\uffc8\014\uffc8\017\uffc8\020\uffc8\023\uffc8\100" +
    "\uffc8\101\uffc8\001\002\000\026\002\uffce\003\uffce\007\uffce" +
    "\013\uffce\014\uffce\017\uffce\020\uffce\023\uffce\100\uffce\101" +
    "\uffce\001\002\000\044\004\025\005\033\006\030\007\036" +
    "\024\u0127\025\u0128\026\u0129\027\u0126\030\u0125\031\u0121\032" +
    "\035\035\031\051\041\060\032\061\042\075\u0161\102\u0160" +
    "\001\002\000\040\034\053\035\046\037\051\040\055\041" +
    "\050\042\052\043\060\044\047\045\045\046\056\047\054" +
    "\050\057\052\044\055\061\103\u0172\001\002\000\004\010" +
    "\u0171\001\002\000\004\007\u011b\001\002\000\004\076\u0162" +
    "\001\002\000\024\004\025\005\033\006\030\007\036\032" +
    "\035\035\031\051\041\060\032\061\042\001\002\000\042" +
    "\034\053\035\046\037\051\040\055\041\050\042\052\043" +
    "\060\044\047\045\045\046\056\047\054\050\057\052\044" +
    "\055\061\077\u0164\104\u0165\001\002\000\004\064\u016b\001" +
    "\002\000\024\004\025\005\033\006\030\007\036\032\035" +
    "\035\031\051\041\060\032\061\042\001\002\000\040\034" +
    "\053\035\046\037\051\040\055\041\050\042\052\043\060" +
    "\044\047\045\045\046\056\047\054\050\057\052\044\055" +
    "\061\077\u0167\001\002\000\004\064\u0168\001\002\000\016" +
    "\024\u0127\025\u0128\026\u0129\027\u0126\030\u0125\031\u0121\001" +
    "\002\000\004\010\u016a\001\002\000\026\002\uffca\003\uffca" +
    "\007\uffca\013\uffca\014\uffca\017\uffca\020\uffca\023\uffca\100" +
    "\uffca\101\uffca\001\002\000\016\024\u0127\025\u0128\026\u0129" +
    "\027\u0126\030\u0125\031\u0121\001\002\000\004\010\u016d\001" +
    "\002\000\026\002\uffc9\003\uffc9\007\uffc9\013\uffc9\014\uffc9" +
    "\017\uffc9\020\uffc9\023\uffc9\100\uffc9\101\uffc9\001\002\000" +
    "\006\007\u011d\015\u016f\001\002\000\004\010\u0170\001\002" +
    "\000\026\002\uffc5\003\uffc5\007\uffc5\013\uffc5\014\uffc5\017" +
    "\uffc5\020\uffc5\023\uffc5\100\uffc5\101\uffc5\001\002\000\026" +
    "\002\uffcc\003\uffcc\007\uffcc\013\uffcc\014\uffcc\017\uffcc\020" +
    "\uffcc\023\uffcc\100\uffcc\101\uffcc\001\002\000\024\004\025" +
    "\005\033\006\030\007\036\032\035\035\031\051\041\060" +
    "\032\061\042\001\002\000\040\010\u0174\034\053\035\046" +
    "\037\051\040\055\041\050\042\052\043\060\044\047\045" +
    "\045\046\056\047\054\050\057\052\044\055\061\001\002" +
    "\000\026\002\uffcb\003\uffcb\007\uffcb\013\uffcb\014\uffcb\017" +
    "\uffcb\020\uffcb\023\uffcb\100\uffcb\101\uffcb\001\002\000\026" +
    "\002\uffc7\003\uffc7\007\uffc7\013\uffc7\014\uffc7\017\uffc7\020" +
    "\uffc7\023\uffc7\100\uffc7\101\uffc7\001\002\000\026\002\ufffb" +
    "\003\373\007\163\013\ufffb\014\ufffb\017\ufffb\020\ufffb\023" +
    "\ufffb\100\ufffb\101\ufffb\001\002\000\004\032\u0178\001\002" +
    "\000\010\007\345\017\346\033\u017a\001\002\000\006\010" +
    "\u0140\033\u0186\001\002\000\004\010\u017b\001\002\000\006" +
    "\014\u017d\017\u017c\001\002\000\006\003\373\007\163\001" +
    "\002\000\030\003\155\007\143\011\140\012\161\062\142" +
    "\063\154\065\135\067\157\071\160\073\152\074\131\001" +
    "\002\000\032\003\155\007\143\011\140\012\161\015\u017f" +
    "\062\142\063\154\065\135\067\157\071\160\073\152\074" +
    "\131\001\002\000\004\010\u0180\001\002\000\022\002\uffdf" +
    "\013\uffdf\014\uffdf\017\uffdf\020\uffdf\023\uffdf\100\uffdf\101" +
    "\uffdf\001\002\000\010\003\373\007\163\014\u0182\001\002" +
    "\000\030\003\155\007\143\011\140\012\161\062\142\063" +
    "\154\065\135\067\157\071\160\073\152\074\131\001\002" +
    "\000\032\003\155\007\143\011\140\012\161\015\u0184\062" +
    "\142\063\154\065\135\067\157\071\160\073\152\074\131" +
    "\001\002\000\004\010\u0185\001\002\000\022\002\uffe0\013" +
    "\uffe0\014\uffe0\017\uffe0\020\uffe0\023\uffe0\100\uffe0\101\uffe0" +
    "\001\002\000\004\010\u0187\001\002\000\006\014\u0189\017" +
    "\u0188\001\002\000\006\003\373\007\163\001\002\000\030" +
    "\003\155\007\143\011\140\012\161\062\142\063\154\065" +
    "\135\067\157\071\160\073\152\074\131\001\002\000\032" +
    "\003\155\007\143\011\140\012\161\015\u018b\062\142\063" +
    "\154\065\135\067\157\071\160\073\152\074\131\001\002" +
    "\000\004\010\u018c\001\002\000\022\002\uffe1\013\uffe1\014" +
    "\uffe1\017\uffe1\020\uffe1\023\uffe1\100\uffe1\101\uffe1\001\002" +
    "\000\010\003\373\007\163\014\u018e\001\002\000\030\003" +
    "\155\007\143\011\140\012\161\062\142\063\154\065\135" +
    "\067\157\071\160\073\152\074\131\001\002\000\032\003" +
    "\155\007\143\011\140\012\161\015\u0190\062\142\063\154" +
    "\065\135\067\157\071\160\073\152\074\131\001\002\000" +
    "\004\010\u0191\001\002\000\022\002\uffe2\013\uffe2\014\uffe2" +
    "\017\uffe2\020\uffe2\023\uffe2\100\uffe2\101\uffe2\001\002\000" +
    "\004\010\u0193\001\002\000\022\002\uffe3\013\uffe3\014\uffe3" +
    "\017\uffe3\020\uffe3\023\uffe3\100\uffe3\101\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0191\000\014\002\011\004\013\032\010\041\005\042" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\u0175\011\371\023\373\052\375\001" +
    "\001\000\012\006\u0159\010\u0158\023\u0157\051\u015a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\341\032\010\041\005\042\015\001\001\000\040" +
    "\003\127\014\136\024\132\025\146\026\143\027\135\030" +
    "\133\031\140\033\145\034\155\035\147\036\150\037\152" +
    "\040\144\050\131\001\001\000\002\001\001\000\004\005" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\016\033\017\025\020" +
    "\037\021\026\047\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\122\017\025\020\037\021\026\047\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\117\017\025\020\037\021\026\047\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\042\017\025\020\037\021\026\047\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\016\101\017\025\020" +
    "\037\021\026\047\036\001\001\000\014\016\077\017\025" +
    "\020\037\021\026\047\036\001\001\000\014\016\076\017" +
    "\025\020\037\021\026\047\036\001\001\000\014\016\075" +
    "\017\025\020\037\021\026\047\036\001\001\000\014\016" +
    "\074\017\025\020\037\021\026\047\036\001\001\000\014" +
    "\016\073\017\025\020\037\021\026\047\036\001\001\000" +
    "\014\016\072\017\025\020\037\021\026\047\036\001\001" +
    "\000\014\016\071\017\025\020\037\021\026\047\036\001" +
    "\001\000\014\016\070\017\025\020\037\021\026\047\036" +
    "\001\001\000\014\016\067\017\025\020\037\021\026\047" +
    "\036\001\001\000\014\016\066\017\025\020\037\021\026" +
    "\047\036\001\001\000\014\016\065\017\025\020\037\021" +
    "\026\047\036\001\001\000\014\016\064\017\025\020\037" +
    "\021\026\047\036\001\001\000\014\016\061\017\025\020" +
    "\037\021\026\047\036\001\001\000\002\001\001\000\014" +
    "\016\063\017\025\020\037\021\026\047\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\102\017\025\020\037\021\026\047\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\114\017\025\020\037\021\026\047\036\001\001" +
    "\000\016\016\110\017\025\020\037\021\026\046\106\047" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\016\113\017\025\020\037\021\026\047" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\016\125\017\025\020\037\021" +
    "\026\047\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\014\170\024\132\025\146\026\143\027\135\030" +
    "\133\031\140\033\145\034\155\035\147\036\150\037\152" +
    "\040\144\050\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\326" +
    "\017\025\020\037\021\026\047\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\266\017\025\020\037\021\026\047\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\211\017\025\020\037\021\026\047\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\167\014\136\024\132\025\146\026\143\027\135\030" +
    "\133\031\140\033\145\034\155\035\147\036\150\037\152" +
    "\040\144\050\131\001\001\000\002\001\001\000\004\023" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\014" +
    "\170\024\132\025\146\026\143\027\135\030\133\031\140" +
    "\033\145\034\155\035\147\036\150\037\152\040\144\050" +
    "\131\001\001\000\002\001\001\000\014\016\172\017\025" +
    "\020\037\021\026\047\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\177\017\025\020\037\021\026\047\036\001\001\000" +
    "\002\001\001\000\014\016\201\017\025\020\037\021\026" +
    "\047\036\001\001\000\002\001\001\000\036\014\203\024" +
    "\132\025\146\026\143\027\135\030\133\031\140\033\145" +
    "\034\155\035\147\036\150\037\152\040\144\050\131\001" +
    "\001\000\002\001\001\000\040\003\205\014\136\024\132" +
    "\025\146\026\143\027\135\030\133\031\140\033\145\034" +
    "\155\035\147\036\150\037\152\040\144\050\131\001\001" +
    "\000\036\014\170\024\132\025\146\026\143\027\135\030" +
    "\133\031\140\033\145\034\155\035\147\036\150\037\152" +
    "\040\144\050\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\216" +
    "\017\025\020\037\021\026\047\036\055\215\056\213\057" +
    "\214\001\001\000\020\016\216\017\025\020\037\021\026" +
    "\047\036\055\227\057\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\226\017\025" +
    "\020\037\021\026\047\036\001\001\000\036\014\221\024" +
    "\132\025\146\026\143\027\135\030\133\031\140\033\145" +
    "\034\155\035\147\036\150\037\152\040\144\050\131\001" +
    "\001\000\002\001\001\000\040\003\223\014\136\024\132" +
    "\025\146\026\143\027\135\030\133\031\140\033\145\034" +
    "\155\035\147\036\150\037\152\040\144\050\131\001\001" +
    "\000\036\014\170\024\132\025\146\026\143\027\135\030" +
    "\133\031\140\033\145\034\155\035\147\036\150\037\152" +
    "\040\144\050\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\014\231" +
    "\024\132\025\146\026\143\027\135\030\133\031\140\033" +
    "\145\034\155\035\147\036\150\037\152\040\144\050\131" +
    "\001\001\000\002\001\001\000\040\003\233\014\136\024" +
    "\132\025\146\026\143\027\135\030\133\031\140\033\145" +
    "\034\155\035\147\036\150\037\152\040\144\050\131\001" +
    "\001\000\036\014\170\024\132\025\146\026\143\027\135" +
    "\030\133\031\140\033\145\034\155\035\147\036\150\037" +
    "\152\040\144\050\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\016\255\017\025\020\037\021" +
    "\026\047\036\001\001\000\002\001\001\000\016\016\110" +
    "\017\025\020\037\021\026\046\250\047\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\254\017\025\020\037\021\026\047\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\016\261\017\025\020\037\021\026\047" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\016\265\017\025\020\037\021\026\047" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\014\272\015\275\024\270\025\146\026\273\027\135\030" +
    "\271\031\140\033\145\034\155\035\147\036\150\037\152" +
    "\040\144\050\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\304" +
    "\014\136\024\132\025\146\026\143\027\135\030\133\031" +
    "\140\033\145\034\155\035\147\036\150\037\152\040\144" +
    "\050\131\001\001\000\002\001\001\000\036\014\277\024" +
    "\132\025\146\026\143\027\135\030\133\031\140\033\145" +
    "\034\155\035\147\036\150\037\152\040\144\050\131\001" +
    "\001\000\002\001\001\000\040\003\301\014\136\024\132" +
    "\025\146\026\143\027\135\030\133\031\140\033\145\034" +
    "\155\035\147\036\150\037\152\040\144\050\131\001\001" +
    "\000\036\014\170\024\132\025\146\026\143\027\135\030" +
    "\133\031\140\033\145\034\155\035\147\036\150\037\152" +
    "\040\144\050\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\014\170\024\132\025\146\026\143\027\135" +
    "\030\133\031\140\033\145\034\155\035\147\036\150\037" +
    "\152\040\144\050\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\014\310\024\132\025\146\026\143\027" +
    "\135\030\133\031\140\033\145\034\155\035\147\036\150" +
    "\037\152\040\144\050\131\001\001\000\002\001\001\000" +
    "\040\003\312\014\136\024\132\025\146\026\143\027\135" +
    "\030\133\031\140\033\145\034\155\035\147\036\150\037" +
    "\152\040\144\050\131\001\001\000\036\014\170\024\132" +
    "\025\146\026\143\027\135\030\133\031\140\033\145\034" +
    "\155\035\147\036\150\037\152\040\144\050\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\016\321\017\025" +
    "\020\037\021\026\022\322\047\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\325\017\025\020\037" +
    "\021\026\047\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\014\330\024\132\025\146" +
    "\026\143\027\135\030\133\031\140\033\145\034\155\035" +
    "\147\036\150\037\152\040\144\050\131\001\001\000\002" +
    "\001\001\000\040\003\332\014\136\024\132\025\146\026" +
    "\143\027\135\030\133\031\140\033\145\034\155\035\147" +
    "\036\150\037\152\040\144\050\131\001\001\000\036\014" +
    "\170\024\132\025\146\026\143\027\135\030\133\031\140" +
    "\033\145\034\155\035\147\036\150\037\152\040\144\050" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\043\347" +
    "\044\346\045\351\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\357\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\374\011\371" +
    "\023\373\052\375\001\001\000\040\003\366\014\136\024" +
    "\132\025\146\026\143\027\135\030\133\031\140\033\145" +
    "\034\155\035\147\036\150\037\152\040\144\050\131\001" +
    "\001\000\036\014\170\024\132\025\146\026\143\027\135" +
    "\030\133\031\140\033\145\034\155\035\147\036\150\037" +
    "\152\040\144\050\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\376\023\373\052\375\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\u0100\014\136\024" +
    "\132\025\146\026\143\027\135\030\133\031\140\033\145" +
    "\034\155\035\147\036\150\037\152\040\144\050\131\001" +
    "\001\000\036\014\170\024\132\025\146\026\143\027\135" +
    "\030\133\031\140\033\145\034\155\035\147\036\150\037" +
    "\152\040\144\050\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\013\u0107\016\u0105\017" +
    "\025\020\037\021\026\047\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\u010a\017\025\020\037\021\026\047\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\016\u010d\017" +
    "\025\020\037\021\026\047\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0110\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u0113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\u0117\017\025\020\037\021\026\047\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\u011b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\012\u0122\016\u0121\017" +
    "\025\020\037\021\026\047\036\054\u012a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\u012c\017\025\020\037\021\026" +
    "\047\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\u012f\017\025\020\037\021\026\047\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u0132\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u0135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\u013a\017\025\020\037" +
    "\021\026\047\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\u0122\016\u0121\017\025\020\037\021\026" +
    "\047\036\054\u013d\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\044\u014e\045\351\001\001\000\002\001\001" +
    "\000\004\013\u0142\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\u0149\011\371\023\373\052\375\001\001" +
    "\000\040\003\u0146\014\136\024\132\025\146\026\143\027" +
    "\135\030\133\031\140\033\145\034\155\035\147\036\150" +
    "\037\152\040\144\050\131\001\001\000\036\014\170\024" +
    "\132\025\146\026\143\027\135\030\133\031\140\033\145" +
    "\034\155\035\147\036\150\037\152\040\144\050\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\376" +
    "\023\373\052\375\001\001\000\040\003\u014b\014\136\024" +
    "\132\025\146\026\143\027\135\030\133\031\140\033\145" +
    "\034\155\035\147\036\150\037\152\040\144\050\131\001" +
    "\001\000\036\014\170\024\132\025\146\026\143\027\135" +
    "\030\133\031\140\033\145\034\155\035\147\036\150\037" +
    "\152\040\144\050\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\u0152\001\001\000" +
    "\004\013\u0151\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\u015b\023\u0157\051\u015a\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\012\u015e\016\u015d\017\025" +
    "\020\037\021\026\047\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\u016d\001\001\000\002\001\001" +
    "\000\014\016\u0162\017\025\020\037\021\026\047\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\u0165" +
    "\017\025\020\037\021\026\047\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0168\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u016b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\u0172\017\025\020\037\021\026\047\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\376\023\373\052\375\001\001\000\002\001\001\000\010" +
    "\043\u0178\044\346\045\351\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\u0180\011\371" +
    "\023\373\052\375\001\001\000\040\003\u017d\014\136\024" +
    "\132\025\146\026\143\027\135\030\133\031\140\033\145" +
    "\034\155\035\147\036\150\037\152\040\144\050\131\001" +
    "\001\000\036\014\170\024\132\025\146\026\143\027\135" +
    "\030\133\031\140\033\145\034\155\035\147\036\150\037" +
    "\152\040\144\050\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\376\023\373\052\375\001\001\000" +
    "\040\003\u0182\014\136\024\132\025\146\026\143\027\135" +
    "\030\133\031\140\033\145\034\155\035\147\036\150\037" +
    "\152\040\144\050\131\001\001\000\036\014\170\024\132" +
    "\025\146\026\143\027\135\030\133\031\140\033\145\034" +
    "\155\035\147\036\150\037\152\040\144\050\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\u018c\011\371\023\373\052\375" +
    "\001\001\000\040\003\u0189\014\136\024\132\025\146\026" +
    "\143\027\135\030\133\031\140\033\145\034\155\035\147" +
    "\036\150\037\152\040\144\050\131\001\001\000\036\014" +
    "\170\024\132\025\146\026\143\027\135\030\133\031\140" +
    "\033\145\034\155\035\147\036\150\037\152\040\144\050" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\376\023\373\052\375\001\001\000\040\003\u018e\014" +
    "\136\024\132\025\146\026\143\027\135\030\133\031\140" +
    "\033\145\034\155\035\147\036\150\037\152\040\144\050" +
    "\131\001\001\000\036\014\170\024\132\025\146\026\143" +
    "\027\135\030\133\031\140\033\145\034\155\035\147\036" +
    "\150\037\152\040\144\050\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= cuerpo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // cuerpo ::= cuerpo estructura 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.addAll(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo ::= estructura 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>();  RESULT.addAll(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // estructura ::= declaracion_program 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(Collections.singletonList(a)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // estructura ::= TYPE declaraciones_tipos 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // estructura ::= CONST declaracion_constantes 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // estructura ::= VAR declaraciones_variables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // estructura ::= declaracion_funcion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(Collections.singletonList(a)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // estructura ::= declaracion_procedimiento 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(Collections.singletonList(a)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // estructura ::= BEGIN instrucciones END PUNTO 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= writeln FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= readln FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= asignacion_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= asignacion_array FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= asignacion_record FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= llamada_metodo FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= sentencia_case 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= sentencia_while 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= sentencia_for 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= sentencia_repeat 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= transferencia_break FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= transferencia_continue FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion_fin ::= writeln 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion_fin ::= asignacion_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion_fin ::= asignacion_array 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracion_program ::= PROGRAM ID FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Program(a, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_program",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracion_procedimiento ::= PROCEDURE ID PAR1 lista_param_f PAR2 FINCADENA VAR declaraciones_variables BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		          LinkedList<Instruccion> cuerpo = new LinkedList<>();
            cuerpo.addAll(d); // d es LinkedList<Instruccion>
            cuerpo.addAll(e);  
        RESULT = new DeclaracionFuncion(a, b, "void", cuerpo, aleft, aright); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracion_procedimiento ::= PROCEDURE ID PAR1 lista_param_f PAR2 FINCADENA BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionFuncion(a, b, "void", d,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracion_procedimiento ::= PROCEDURE ID PAR1 PAR2 FINCADENA VAR declaraciones_variables BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		          LinkedList<Instruccion> cuerpo = new LinkedList<>();
            cuerpo.addAll(d); // d es LinkedList<Instruccion>
            cuerpo.addAll(e);  
        RESULT = new DeclaracionFuncion(a, new LinkedList<HashMap>(),"void", cuerpo, aleft, aright); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracion_procedimiento ::= PROCEDURE ID PAR1 PAR2 FINCADENA BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionFuncion(a, new LinkedList<HashMap>(), "void", d,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion_funcion ::= FUNCTION ID PAR1 lista_param_f PAR2 DOSPUNTOS tipos_dato_var FINCADENA VAR declaraciones_variables BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		          LinkedList<Instruccion> cuerpo = new LinkedList<>();
            cuerpo.addAll(d); // d es LinkedList<Instruccion>
            cuerpo.addAll(e);  
        RESULT = new DeclaracionFuncion(a, b, c, cuerpo, aleft, aright); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion_funcion ::= FUNCTION ID PAR1 lista_param_f PAR2 DOSPUNTOS tipos_dato_var FINCADENA BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionFuncion(a, b, c, d,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_funcion ::= FUNCTION ID PAR1 PAR2 DOSPUNTOS tipos_dato_var FINCADENA VAR declaraciones_variables BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		          LinkedList<Instruccion> cuerpo = new LinkedList<>();
            cuerpo.addAll(d); // d es LinkedList<Instruccion>
            cuerpo.addAll(e);  
        RESULT = new DeclaracionFuncion(a, new LinkedList<HashMap>(), c, cuerpo, aleft, aright); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion_funcion ::= FUNCTION ID PAR1 PAR2 DOSPUNTOS tipos_dato_var FINCADENA BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionFuncion(a, new LinkedList<HashMap>(), c, d,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lista_param_f ::= lista_param_f FINCADENA lista_params_id DOSPUNTOS tipos_dato_var 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = a;
                    // Recorrer la lista de identificadores (b) y asignarles el tipo (c)
                    for (String id : b) {
                        var hm2 = new HashMap<String, Object>();
                        hm2.put("id", id);
                        hm2.put("tipo", c);
                        RESULT.add(hm2);
                    }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_param_f",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista_param_f ::= lista_params_id DOSPUNTOS tipos_dato_var 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new LinkedList<HashMap>(); 
                    // Recorrer la lista de identificadores (a) y asignarles el tipo (b)
                    for (String id : a) {
                        var hm = new HashMap<String, Object>();
                        hm.put("id", id);
                        hm.put("tipo", b);
                        RESULT.add(hm);
                    }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_param_f",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lista_params_id ::= lista_params_id COMA tipo_id_f 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                                    RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_params_id",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // lista_params_id ::= tipo_id_f 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<String>(); 
                                                    RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_params_id",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipo_id_f ::= VAR ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_id_f",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipo_id_f ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_id_f",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // llamada_metodo ::= ID PAR1 parametros_llamada PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new LlamadoFuncion(a,b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metodo",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // llamada_metodo ::= ID PAR1 PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT= new LlamadoFuncion(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metodo",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // llamada_funcion ::= ID PAR1 parametros_llamada PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new LlamadoFuncion(a,b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // llamada_funcion ::= ID PAR1 PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT= new LlamadoFuncion(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros_llamada ::= parametros_llamada COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametros_llamada ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaraciones_tipos ::= declaraciones_tipos declaracion_tipo 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_tipos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaraciones_tipos ::= declaracion_tipo 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_tipos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracion_tipo ::= listado_id IGUAL tipos_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipos(a, b,aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion_tipo ::= listado_id IGUAL expresion PRANGO expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipoSubRango(a, b,c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion_tipo ::= listado_id IGUAL ARRAY CORCHETE1 expresion PARRAY expresion CORCHETE2 OF tipos_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipoArreglo(a,b,c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion_tipo ::= listado_id IGUAL ARRAY CORCHETE1 expresion CORCHETE2 OF tipos_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipoArreglo(a,new Nativo(0, new Tipo("integer",TipoDato.INTEGER), aleft, aright ),c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion_tipo ::= declaracion_record 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracion_tipo ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracion_tipo ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracion_record ::= listado_id IGUAL RECORD lista_record END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionTipoRecord(a.getFirst(),b,  aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_record",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista_record ::= lista_record ID DOSPUNTOS tipo_record 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", b);
                                            hm2.put("tipo", c);
                                            hm2.put ("valor", null);
                                            RESULT.add(hm2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_record",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista_record ::= ID DOSPUNTOS tipo_record 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",a);
                                            hm.put("tipo", b);
                                            hm.put ("valor", null);
                                            RESULT.add(hm);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_record",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipo_record ::= tipos_variable FINCADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_record",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipo_record ::= expresion PRANGO expresion FINCADENA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Tipo("integer", TipoDato.INTEGER,  "subrange"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_record",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo_record ::= ARRAY CORCHETE1 expresion PARRAY expresion CORCHETE2 OF tipos_variable FINCADENA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Tipo(d.getNombre(), d.getTipo(), "array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_record",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo_record ::= ARRAY CORCHETE1 expresion CORCHETE2 OF tipos_variable FINCADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Tipo (d.getNombre(), d.getTipo(), "array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_record",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo_record ::= ID FINCADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_record",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaracion_constantes ::= declaracion_constantes ID IGUAL expresion FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;  
                                    RESULT.add(new DeclaracionConstante(false, b,c, new Tipo(TipoDato.INTEGER),bleft, bright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaracion_constantes ::= ID IGUAL expresion FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(new DeclaracionConstante(false, b,c, new Tipo(TipoDato.INTEGER),bleft, bright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaracion_constantes ::= error FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracion_constantes ::= error 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaraciones_variables ::= declaraciones_variables declaracion_variables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_variables",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaraciones_variables ::= declaracion_variables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_variables",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaracion_variables ::= listado_id DOSPUNTOS tipos_dato_var FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DeclaracionVariable(true, a,null, b,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaracion_variables ::= listado_id DOSPUNTOS expresion PRANGO expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVarSubrango(a, b,c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaracion_variables ::= listado_id DOSPUNTOS ARRAY CORCHETE1 expresion PARRAY expresion CORCHETE2 OF tipos_dato_var FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVarArreglo(a,b,c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaracion_variables ::= listado_id DOSPUNTOS ARRAY CORCHETE1 expresion CORCHETE2 OF tipos_dato_var FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVarArreglo(a,new Nativo(0, new Tipo("integer",TipoDato.INTEGER), aleft, aright ),c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declaracion_variables ::= declaracion_var_record 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaracion_variables ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declaracion_variables ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declaracion_var_record ::= listado_id IGUAL RECORD lista_record END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionVarRecord(a.getFirst(),b,  aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_var_record",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // listado_id ::= listado_id COMA ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                                    RESULT.add(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listado_id",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // listado_id ::= ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<String>(); 
                                                    RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listado_id",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tipos_variable ::= INTEGER 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("integer",TipoDato.INTEGER, "integer");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipos_variable ::= REAL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("real",TipoDato.REAL, "real");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tipos_variable ::= STRING 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("string",TipoDato.CADENA, "string");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tipos_variable ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("char",TipoDato.CARACTER, "char");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tipos_variable ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("boolean",TipoDato.BOOLEANO, "boolean");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tipos_variable ::= VOID 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("void",TipoDato.VOID, "void");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tipos_dato_var ::= INTEGER 
            {
              String RESULT =null;
		   RESULT="integer";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tipos_dato_var ::= REAL 
            {
              String RESULT =null;
		   RESULT="real";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipos_dato_var ::= STRING 
            {
              String RESULT =null;
		   RESULT="string";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipos_dato_var ::= CHAR 
            {
              String RESULT =null;
		   RESULT="char";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tipos_dato_var ::= BOOL 
            {
              String RESULT =null;
		   RESULT="boolean";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipos_dato_var ::= VOID 
            {
              String RESULT =null;
		   RESULT="void";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tipos_dato_var ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // writeln ::= IMPRIMIR PAR1 expresion_conca PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Writeln(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // readln ::= READLN PAR1 listado_id PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Readln(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readln",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion_conca ::= expresion_conca COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                                    RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_conca",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion_conca ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); 
                                                    RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_conca",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // asignacion_variable ::= ID DOSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // asignacion_record ::= ID PUNTO ID DOSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVarRecord(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_record",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // asignacion_array ::= ID CORCHETE1 expresion CORCHETE2 DOSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVarArreglo(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_array",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencia_if ::= IF expresion THEN instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new SentenciaIf(a, new LinkedList<>(Collections.singletonList(b)), aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentencia_if ::= IF expresion THEN BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaIf(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentencia_if ::= IF expresion THEN BEGIN instrucciones END ELSE instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaIfElse(a, b,new LinkedList<>(Collections.singletonList(c)) , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentencia_if ::= IF expresion THEN instruccion_fin ELSE instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new SentenciaIfElse(a, new LinkedList<>(Collections.singletonList(b)), new LinkedList<>(Collections.singletonList(c)), aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentencia_if ::= IF expresion THEN instruccion_fin ELSE BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaIfElse(a, new LinkedList<>(Collections.singletonList(b)),c , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentencia_if ::= IF expresion THEN BEGIN instrucciones END ELSE BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaIfElse(a, b,c , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentencia_case ::= CASE expresion OF casos_case ELSE BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<CasoCase> b = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = new SentenciaCase(a, b, c, aleft, aright);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentencia_case ::= CASE expresion OF casos_case ELSE instruccion END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<CasoCase> b = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = new SentenciaCase(a, b, new LinkedList<>(Collections.singletonList(c)), aleft, aright);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // casos_case ::= casos_case caso_case 
            {
              LinkedList<CasoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoCase> a = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoCase b = (CasoCase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_case",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // casos_case ::= caso_case 
            {
              LinkedList<CasoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoCase a = (CasoCase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_case",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // caso_case ::= expresiones_case DOSPUNTOS BEGIN instrucciones END FINCADENA 
            {
              CasoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new CasoCase(a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_case",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // caso_case ::= expresiones_case DOSPUNTOS instruccion 
            {
              CasoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CasoCase(a, new LinkedList<>(Collections.singletonList(b))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_case",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresiones_case ::= expresiones_case COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_case",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresiones_case ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_case",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencia_while ::= WHILE expresion DO BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new SentenciaWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencia_while ::= WHILE expresion DO instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaWhile(a,new LinkedList<>(Collections.singletonList(b)), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencia_for ::= FOR ID DOSPUNTOS IGUAL expresion TO expresion DO instruccion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentenciaFor(new AsignacionVariable(a, b, aleft, aright), c, new AccesoVariable(a, aleft, aright) , new LinkedList<>(Collections.singletonList(d)),new AsignacionVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo("integer",TipoDato.INTEGER), aleft, aright) , aleft, aright), aleft, aright),aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentencia_for ::= FOR ID DOSPUNTOS IGUAL expresion TO expresion DO BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  		   RESULT = new SentenciaFor(new AsignacionVariable(a, b, aleft, aright), c, new AccesoVariable(a, aleft, aright) , d,new AsignacionVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo("integer",TipoDato.INTEGER), aleft, aright) , aleft, aright), aleft, aright),aleft, aright);   
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencia_repeat ::= REPEAT instrucciones UNTIL expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaRepeat(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_repeat",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // transferencia_break ::= BREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = new SentenciaBreak(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_break",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // transferencia_continue ::= CONTINUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = new SentenciaContinue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_continue",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresion ::= expresionAritmetica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresion ::= expresionRelacional 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresion ::= expresionLogica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresion ::= llamada_funcion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo("integer",TipoDato.INTEGER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo("real",TipoDato.REAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo("string",TipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo("char",TipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expresion ::= BOOLEAN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo("boolean",TipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expresion ::= ID PUNTO ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVarRecord(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expresion ::= ID CORCHETE1 expresion CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVarArreglo(a, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expresionAritmetica ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionNegacionU(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expresionAritmetica ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionSuma(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expresionAritmetica ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionResta(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expresionAritmetica ::= expresion MULT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionMultiplicacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expresionAritmetica ::= expresion DIV expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDivision (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expresionAritmetica ::= expresion DIVE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDiv(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expresionAritmetica ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionModulo (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expresionAritmetica ::= PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expresionRelacional ::= expresion IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Igualacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expresionRelacional ::= expresion DIFERENTE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Diferenciacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expresionRelacional ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expresionRelacional ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expresionRelacional ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expresionRelacional ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expresionLogica ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorNot(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expresionLogica ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAnd(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expresionLogica ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOr(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expresionLogica ::= expresion AND THEN expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAndThen(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expresionLogica ::= expresion OR ELSE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOrThen(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
