
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.rudyreyes.pascalcompiler.controlador.analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.rudyreyes.pascalcompiler.modelo.abstracto.Instruccion;
import com.rudyreyes.pascalcompiler.modelo.simbolo.*;
import java.util.HashMap;
import java.util.Collections;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.writeln.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.estructura.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.variables.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.arrays.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.sentenciasControl.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.tipos.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.ciclos.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.sentenciaTransferencia.*;
import com.rudyreyes.pascalcompiler.modelo.instrucciones.funciones.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.nativo.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.aritmeticas.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.relacionales.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.logicas.*;
import com.rudyreyes.pascalcompiler.modelo.expresiones.variables.*;
import com.rudyreyes.pascalcompiler.modelo.errores.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\270\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\042\004\000\002\041\004\000\002" +
    "\044\004\000\002\043\006\000\002\002\004\000\002\002" +
    "\003\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\032\005\000\002\047\016" +
    "\000\002\047\014\000\002\047\015\000\002\047\013\000" +
    "\002\046\020\000\002\046\016\000\002\046\017\000\002" +
    "\046\015\000\002\050\007\000\002\050\005\000\002\051" +
    "\005\000\002\051\003\000\002\052\004\000\002\052\003" +
    "\000\002\055\006\000\002\055\005\000\002\054\006\000" +
    "\002\054\005\000\002\053\005\000\002\053\003\000\002" +
    "\005\004\000\002\005\003\000\002\007\006\000\002\007" +
    "\010\000\002\007\015\000\002\007\013\000\002\007\003" +
    "\000\002\007\004\000\002\007\003\000\002\056\010\000" +
    "\002\060\006\000\002\060\005\000\002\061\004\000\002" +
    "\061\006\000\002\061\013\000\002\061\011\000\002\061" +
    "\004\000\002\004\007\000\002\004\006\000\002\004\004" +
    "\000\002\004\003\000\002\006\004\000\002\006\003\000" +
    "\002\010\006\000\002\010\010\000\002\010\015\000\002" +
    "\010\013\000\002\010\003\000\002\010\004\000\002\010" +
    "\003\000\002\057\010\000\002\023\005\000\002\023\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\024\006\000\002\025\006\000\002\022\005\000" +
    "\002\022\003\000\002\026\006\000\002\031\010\000\002" +
    "\030\011\000\002\027\006\000\002\027\010\000\002\027" +
    "\012\000\002\027\010\000\002\027\012\000\002\027\014" +
    "\000\002\027\010\000\002\027\012\000\002\033\014\000" +
    "\002\033\011\000\002\063\004\000\002\063\003\000\002" +
    "\062\010\000\002\062\005\000\002\064\005\000\002\064" +
    "\003\000\002\034\010\000\002\034\006\000\002\035\013" +
    "\000\002\035\015\000\002\036\006\000\002\037\003\000" +
    "\002\040\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\005\000\002\016\006\000" +
    "\002\017\004\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\021\004\000\002\021\005\000\002" +
    "\021\005\000\002\021\006\000\002\021\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ab\000\020\013\004\014\020\017\011\020\022\023" +
    "\013\100\016\101\006\001\002\000\004\007\u01ac\001\002" +
    "\000\022\002\ufff8\013\ufff8\014\ufff8\017\ufff8\020\ufff8\023" +
    "\ufff8\100\ufff8\101\ufff8\001\002\000\004\007\u0191\001\002" +
    "\000\022\002\ufffa\013\ufffa\014\ufffa\017\ufffa\020\ufffa\023" +
    "\ufffa\100\ufffa\101\ufffa\001\002\000\022\002\ufffd\013\ufffd" +
    "\014\ufffd\017\ufffd\020\ufffd\023\ufffd\100\ufffd\101\ufffd\001" +
    "\002\000\006\003\u0115\007\167\001\002\000\022\002\ufffc" +
    "\013\ufffc\014\ufffc\017\ufffc\020\ufffc\023\ufffc\100\ufffc\101" +
    "\ufffc\001\002\000\006\003\u0171\007\167\001\002\000\022" +
    "\002\ufffe\013\ufffe\014\ufffe\017\ufffe\020\ufffe\023\ufffe\100" +
    "\ufffe\101\ufffe\001\002\000\022\002\uffff\013\uffff\014\uffff" +
    "\017\uffff\020\uffff\023\uffff\100\uffff\101\uffff\001\002\000" +
    "\004\007\375\001\002\000\022\002\373\013\004\014\020" +
    "\017\011\020\022\023\013\100\016\101\006\001\002\000" +
    "\030\003\161\007\147\011\144\012\165\062\145\063\160" +
    "\065\141\067\163\071\164\073\156\074\135\001\002\000" +
    "\022\002\ufffb\013\ufffb\014\ufffb\017\ufffb\020\ufffb\023\ufffb" +
    "\100\ufffb\101\ufffb\001\002\000\006\003\025\007\024\001" +
    "\002\000\022\002\ufff9\013\ufff9\014\ufff9\017\ufff9\020\ufff9" +
    "\023\ufff9\100\ufff9\101\ufff9\001\002\000\004\050\131\001" +
    "\002\000\026\002\uffa0\007\uffa0\010\130\013\uffa0\014\uffa0" +
    "\017\uffa0\020\uffa0\023\uffa0\100\uffa0\101\uffa0\001\002\000" +
    "\024\002\ufff6\007\027\013\ufff6\014\ufff6\017\ufff6\020\ufff6" +
    "\023\ufff6\100\ufff6\101\ufff6\001\002\000\004\050\030\001" +
    "\002\000\024\004\033\005\036\006\034\007\042\032\040" +
    "\035\035\051\045\060\037\061\046\001\002\000\066\010" +
    "\uff68\021\uff68\022\uff68\033\uff68\034\uff68\035\uff68\037\uff68" +
    "\040\uff68\041\uff68\042\uff68\043\uff68\044\uff68\045\uff68\046" +
    "\uff68\047\uff68\050\uff68\052\uff68\053\uff68\054\uff68\055\uff68" +
    "\064\uff68\066\uff68\070\uff68\077\uff68\103\uff68\104\uff68\001" +
    "\002\000\066\010\uff66\021\uff66\022\uff66\033\uff66\034\uff66" +
    "\035\uff66\037\uff66\040\uff66\041\uff66\042\uff66\043\uff66\044" +
    "\uff66\045\uff66\046\uff66\047\uff66\050\uff66\052\uff66\053\uff66" +
    "\054\uff66\055\uff66\064\uff66\066\uff66\070\uff66\077\uff66\103" +
    "\uff66\104\uff66\001\002\000\066\010\uff62\021\uff62\022\uff62" +
    "\033\uff62\034\uff62\035\uff62\037\uff62\040\uff62\041\uff62\042" +
    "\uff62\043\uff62\044\uff62\045\uff62\046\uff62\047\uff62\050\uff62" +
    "\052\uff62\053\uff62\054\uff62\055\uff62\064\uff62\066\uff62\070" +
    "\uff62\077\uff62\103\uff62\104\uff62\001\002\000\066\010\uff63" +
    "\021\uff63\022\uff63\033\uff63\034\uff63\035\uff63\037\uff63\040" +
    "\uff63\041\uff63\042\uff63\043\uff63\044\uff63\045\uff63\046\uff63" +
    "\047\uff63\050\uff63\052\uff63\053\uff63\054\uff63\055\uff63\064" +
    "\uff63\066\uff63\070\uff63\077\uff63\103\uff63\104\uff63\001\002" +
    "\000\024\004\033\005\036\006\034\007\042\032\040\035" +
    "\035\051\045\060\037\061\046\001\002\000\066\010\uff64" +
    "\021\uff64\022\uff64\033\uff64\034\uff64\035\uff64\037\uff64\040" +
    "\uff64\041\uff64\042\uff64\043\uff64\044\uff64\045\uff64\046\uff64" +
    "\047\uff64\050\uff64\052\uff64\053\uff64\054\uff64\055\uff64\064" +
    "\uff64\066\uff64\070\uff64\077\uff64\103\uff64\104\uff64\001\002" +
    "\000\066\010\uff60\021\uff60\022\uff60\033\uff60\034\uff60\035" +
    "\uff60\037\uff60\040\uff60\041\uff60\042\uff60\043\uff60\044\uff60" +
    "\045\uff60\046\uff60\047\uff60\050\uff60\052\uff60\053\uff60\054" +
    "\uff60\055\uff60\064\uff60\066\uff60\070\uff60\077\uff60\103\uff60" +
    "\104\uff60\001\002\000\024\004\033\005\036\006\034\007" +
    "\042\032\040\035\035\051\045\060\037\061\046\001\002" +
    "\000\040\010\124\034\057\035\052\037\055\040\062\041" +
    "\053\042\056\043\064\044\054\045\050\046\061\047\060" +
    "\050\063\052\051\055\065\001\002\000\074\010\uff5f\016" +
    "\110\021\uff5f\022\uff5f\032\112\033\uff5f\034\uff5f\035\uff5f" +
    "\037\uff5f\040\uff5f\041\uff5f\042\uff5f\043\uff5f\044\uff5f\045" +
    "\uff5f\046\uff5f\047\uff5f\050\uff5f\052\uff5f\053\uff5f\054\uff5f" +
    "\055\uff5f\064\uff5f\066\uff5f\070\uff5f\076\111\077\uff5f\103" +
    "\uff5f\104\uff5f\001\002\000\066\010\uff65\021\uff65\022\uff65" +
    "\033\uff65\034\uff65\035\uff65\037\uff65\040\uff65\041\uff65\042" +
    "\uff65\043\uff65\044\uff65\045\uff65\046\uff65\047\uff65\050\uff65" +
    "\052\uff65\053\uff65\054\uff65\055\uff65\064\uff65\066\uff65\070" +
    "\uff65\077\uff65\103\uff65\104\uff65\001\002\000\066\010\uff67" +
    "\021\uff67\022\uff67\033\uff67\034\uff67\035\uff67\037\uff67\040" +
    "\uff67\041\uff67\042\uff67\043\uff67\044\uff67\045\uff67\046\uff67" +
    "\047\uff67\050\uff67\052\uff67\053\uff67\054\uff67\055\uff67\064" +
    "\uff67\066\uff67\070\uff67\077\uff67\103\uff67\104\uff67\001\002" +
    "\000\024\004\033\005\036\006\034\007\042\032\040\035" +
    "\035\051\045\060\037\061\046\001\002\000\066\010\uff61" +
    "\021\uff61\022\uff61\033\uff61\034\uff61\035\uff61\037\uff61\040" +
    "\uff61\041\uff61\042\uff61\043\uff61\044\uff61\045\uff61\046\uff61" +
    "\047\uff61\050\uff61\052\uff61\053\uff61\054\uff61\055\uff61\064" +
    "\uff61\066\uff61\070\uff61\077\uff61\103\uff61\104\uff61\001\002" +
    "\000\066\010\uff4e\021\uff4e\022\uff4e\033\uff4e\034\057\035" +
    "\052\037\055\040\062\041\053\042\056\043\064\044\054" +
    "\045\050\046\061\047\060\050\063\052\uff4e\053\uff4e\054" +
    "\uff4e\055\uff4e\064\uff4e\066\uff4e\070\uff4e\077\uff4e\103\uff4e" +
    "\104\uff4e\001\002\000\024\004\033\005\036\006\034\007" +
    "\042\032\040\035\035\051\045\060\037\061\046\001\002" +
    "\000\026\004\033\005\036\006\034\007\042\032\040\035" +
    "\035\051\045\053\104\060\037\061\046\001\002\000\024" +
    "\004\033\005\036\006\034\007\042\032\040\035\035\051" +
    "\045\060\037\061\046\001\002\000\024\004\033\005\036" +
    "\006\034\007\042\032\040\035\035\051\045\060\037\061" +
    "\046\001\002\000\024\004\033\005\036\006\034\007\042" +
    "\032\040\035\035\051\045\060\037\061\046\001\002\000" +
    "\024\004\033\005\036\006\034\007\042\032\040\035\035" +
    "\051\045\060\037\061\046\001\002\000\024\004\033\005" +
    "\036\006\034\007\042\032\040\035\035\051\045\060\037" +
    "\061\046\001\002\000\024\004\033\005\036\006\034\007" +
    "\042\032\040\035\035\051\045\060\037\061\046\001\002" +
    "\000\024\004\033\005\036\006\034\007\042\032\040\035" +
    "\035\051\045\060\037\061\046\001\002\000\024\004\033" +
    "\005\036\006\034\007\042\032\040\035\035\051\045\060" +
    "\037\061\046\001\002\000\024\004\033\005\036\006\034" +
    "\007\042\032\040\035\035\051\045\060\037\061\046\001" +
    "\002\000\024\004\033\005\036\006\034\007\042\032\040" +
    "\035\035\051\045\060\037\061\046\001\002\000\024\004" +
    "\033\005\036\006\034\007\042\032\040\035\035\051\045" +
    "\060\037\061\046\001\002\000\026\004\033\005\036\006" +
    "\034\007\042\032\040\035\035\051\045\054\067\060\037" +
    "\061\046\001\002\000\066\010\uff4c\021\uff4c\022\uff4c\033" +
    "\uff4c\034\057\035\052\037\055\040\062\041\053\042\056" +
    "\043\064\044\054\045\050\046\061\047\060\050\063\052" +
    "\051\053\uff4c\054\uff4c\055\uff4c\064\uff4c\066\uff4c\070\uff4c" +
    "\077\uff4c\103\uff4c\104\uff4c\001\002\000\024\004\033\005" +
    "\036\006\034\007\042\032\040\035\035\051\045\060\037" +
    "\061\046\001\002\000\066\010\uff4a\021\uff4a\022\uff4a\033" +
    "\uff4a\034\057\035\052\037\055\040\062\041\053\042\056" +
    "\043\064\044\054\045\050\046\061\047\060\050\063\052" +
    "\051\053\uff4a\054\uff4a\055\065\064\uff4a\066\uff4a\070\uff4a" +
    "\077\uff4a\103\uff4a\104\uff4a\001\002\000\066\010\uff53\021" +
    "\uff53\022\uff53\033\uff53\034\057\035\052\037\055\040\062" +
    "\041\053\042\056\043\uff53\044\uff53\045\uff53\046\uff53\047" +
    "\uff53\050\uff53\052\uff53\053\uff53\054\uff53\055\uff53\064\uff53" +
    "\066\uff53\070\uff53\077\uff53\103\uff53\104\uff53\001\002\000" +
    "\066\010\uff54\021\uff54\022\uff54\033\uff54\034\057\035\052" +
    "\037\055\040\062\041\053\042\056\043\uff54\044\uff54\045" +
    "\uff54\046\uff54\047\uff54\050\uff54\052\uff54\053\uff54\054\uff54" +
    "\055\uff54\064\uff54\066\uff54\070\uff54\077\uff54\103\uff54\104" +
    "\uff54\001\002\000\066\010\uff58\021\uff58\022\uff58\033\uff58" +
    "\034\uff58\035\uff58\037\uff58\040\uff58\041\uff58\042\uff58\043" +
    "\uff58\044\uff58\045\uff58\046\uff58\047\uff58\050\uff58\052\uff58" +
    "\053\uff58\054\uff58\055\uff58\064\uff58\066\uff58\070\uff58\077" +
    "\uff58\103\uff58\104\uff58\001\002\000\066\010\uff50\021\uff50" +
    "\022\uff50\033\uff50\034\057\035\052\037\055\040\062\041" +
    "\053\042\056\043\uff50\044\uff50\045\uff50\046\uff50\047\uff50" +
    "\050\uff50\052\uff50\053\uff50\054\uff50\055\uff50\064\uff50\066" +
    "\uff50\070\uff50\077\uff50\103\uff50\104\uff50\001\002\000\066" +
    "\010\uff4f\021\uff4f\022\uff4f\033\uff4f\034\057\035\052\037" +
    "\055\040\062\041\053\042\056\043\uff4f\044\uff4f\045\uff4f" +
    "\046\uff4f\047\uff4f\050\uff4f\052\uff4f\053\uff4f\054\uff4f\055" +
    "\uff4f\064\uff4f\066\uff4f\070\uff4f\077\uff4f\103\uff4f\104\uff4f" +
    "\001\002\000\066\010\uff5b\021\uff5b\022\uff5b\033\uff5b\034" +
    "\uff5b\035\uff5b\037\055\040\062\041\053\042\056\043\uff5b" +
    "\044\uff5b\045\uff5b\046\uff5b\047\uff5b\050\uff5b\052\uff5b\053" +
    "\uff5b\054\uff5b\055\uff5b\064\uff5b\066\uff5b\070\uff5b\077\uff5b" +
    "\103\uff5b\104\uff5b\001\002\000\066\010\uff56\021\uff56\022" +
    "\uff56\033\uff56\034\uff56\035\uff56\037\uff56\040\uff56\041\uff56" +
    "\042\uff56\043\uff56\044\uff56\045\uff56\046\uff56\047\uff56\050" +
    "\uff56\052\uff56\053\uff56\054\uff56\055\uff56\064\uff56\066\uff56" +
    "\070\uff56\077\uff56\103\uff56\104\uff56\001\002\000\066\010" +
    "\uff59\021\uff59\022\uff59\033\uff59\034\uff59\035\uff59\037\uff59" +
    "\040\uff59\041\uff59\042\uff59\043\uff59\044\uff59\045\uff59\046" +
    "\uff59\047\uff59\050\uff59\052\uff59\053\uff59\054\uff59\055\uff59" +
    "\064\uff59\066\uff59\070\uff59\077\uff59\103\uff59\104\uff59\001" +
    "\002\000\066\010\uff52\021\uff52\022\uff52\033\uff52\034\057" +
    "\035\052\037\055\040\062\041\053\042\056\043\uff52\044" +
    "\uff52\045\uff52\046\uff52\047\uff52\050\uff52\052\uff52\053\uff52" +
    "\054\uff52\055\uff52\064\uff52\066\uff52\070\uff52\077\uff52\103" +
    "\uff52\104\uff52\001\002\000\066\010\uff57\021\uff57\022\uff57" +
    "\033\uff57\034\uff57\035\uff57\037\uff57\040\uff57\041\uff57\042" +
    "\uff57\043\uff57\044\uff57\045\uff57\046\uff57\047\uff57\050\uff57" +
    "\052\uff57\053\uff57\054\uff57\055\uff57\064\uff57\066\uff57\070" +
    "\uff57\077\uff57\103\uff57\104\uff57\001\002\000\066\010\uff5a" +
    "\021\uff5a\022\uff5a\033\uff5a\034\uff5a\035\uff5a\037\055\040" +
    "\062\041\053\042\056\043\uff5a\044\uff5a\045\uff5a\046\uff5a" +
    "\047\uff5a\050\uff5a\052\uff5a\053\uff5a\054\uff5a\055\uff5a\064" +
    "\uff5a\066\uff5a\070\uff5a\077\uff5a\103\uff5a\104\uff5a\001\002" +
    "\000\024\004\033\005\036\006\034\007\042\032\040\035" +
    "\035\051\045\060\037\061\046\001\002\000\066\010\uff4d" +
    "\021\uff4d\022\uff4d\033\uff4d\034\057\035\052\037\055\040" +
    "\062\041\053\042\056\043\064\044\054\045\050\046\061" +
    "\047\060\050\063\052\uff4d\053\uff4d\054\uff4d\055\uff4d\064" +
    "\uff4d\066\uff4d\070\uff4d\077\uff4d\103\uff4d\104\uff4d\001\002" +
    "\000\066\010\uff4b\021\uff4b\022\uff4b\033\uff4b\034\057\035" +
    "\052\037\055\040\062\041\053\042\056\043\064\044\054" +
    "\045\050\046\061\047\060\050\063\052\051\053\uff4b\054" +
    "\uff4b\055\065\064\uff4b\066\uff4b\070\uff4b\077\uff4b\103\uff4b" +
    "\104\uff4b\001\002\000\066\010\uff51\021\uff51\022\uff51\033" +
    "\uff51\034\057\035\052\037\055\040\062\041\053\042\056" +
    "\043\uff51\044\uff51\045\uff51\046\uff51\047\uff51\050\uff51\052" +
    "\uff51\053\uff51\054\uff51\055\uff51\064\uff51\066\uff51\070\uff51" +
    "\077\uff51\103\uff51\104\uff51\001\002\000\004\007\123\001" +
    "\002\000\024\004\033\005\036\006\034\007\042\032\040" +
    "\035\035\051\045\060\037\061\046\001\002\000\026\004" +
    "\033\005\036\006\034\007\042\032\040\033\114\035\035" +
    "\051\045\060\037\061\046\001\002\000\006\022\116\033" +
    "\117\001\002\000\066\010\uffb7\021\uffb7\022\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\064\uffb7\066\uffb7\070\uffb7\077" +
    "\uffb7\103\uffb7\104\uffb7\001\002\000\042\022\uffb5\033\uffb5" +
    "\034\057\035\052\037\055\040\062\041\053\042\056\043" +
    "\064\044\054\045\050\046\061\047\060\050\063\052\051" +
    "\055\065\001\002\000\024\004\033\005\036\006\034\007" +
    "\042\032\040\035\035\051\045\060\037\061\046\001\002" +
    "\000\066\010\uffb8\021\uffb8\022\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\050\uffb8\052\uffb8\053\uffb8\054" +
    "\uffb8\055\uffb8\064\uffb8\066\uffb8\070\uffb8\077\uffb8\103\uffb8" +
    "\104\uffb8\001\002\000\042\022\uffb6\033\uffb6\034\057\035" +
    "\052\037\055\040\062\041\053\042\056\043\064\044\054" +
    "\045\050\046\061\047\060\050\063\052\051\055\065\001" +
    "\002\000\040\034\057\035\052\037\055\040\062\041\053" +
    "\042\056\043\064\044\054\045\050\046\061\047\060\050" +
    "\063\052\051\055\065\077\122\001\002\000\066\010\uff5d" +
    "\021\uff5d\022\uff5d\033\uff5d\034\uff5d\035\uff5d\037\uff5d\040" +
    "\uff5d\041\uff5d\042\uff5d\043\uff5d\044\uff5d\045\uff5d\046\uff5d" +
    "\047\uff5d\050\uff5d\052\uff5d\053\uff5d\054\uff5d\055\uff5d\064" +
    "\uff5d\066\uff5d\070\uff5d\077\uff5d\103\uff5d\104\uff5d\001\002" +
    "\000\066\010\uff5e\021\uff5e\022\uff5e\033\uff5e\034\uff5e\035" +
    "\uff5e\037\uff5e\040\uff5e\041\uff5e\042\uff5e\043\uff5e\044\uff5e" +
    "\045\uff5e\046\uff5e\047\uff5e\050\uff5e\052\uff5e\053\uff5e\054" +
    "\uff5e\055\uff5e\064\uff5e\066\uff5e\070\uff5e\077\uff5e\103\uff5e" +
    "\104\uff5e\001\002\000\024\002\uffa3\007\uffa3\013\uffa3\014" +
    "\uffa3\017\uffa3\020\uffa3\023\uffa3\100\uffa3\101\uffa3\001\002" +
    "\000\040\033\126\034\057\035\052\037\055\040\062\041" +
    "\053\042\056\043\064\044\054\045\050\046\061\047\060" +
    "\050\063\052\051\055\065\001\002\000\066\010\uff55\021" +
    "\uff55\022\uff55\033\uff55\034\uff55\035\uff55\037\uff55\040\uff55" +
    "\041\uff55\042\uff55\043\uff55\044\uff55\045\uff55\046\uff55\047" +
    "\uff55\050\uff55\052\uff55\053\uff55\054\uff55\055\uff55\064\uff55" +
    "\066\uff55\070\uff55\077\uff55\103\uff55\104\uff55\001\002\000" +
    "\066\010\uff5c\021\uff5c\022\uff5c\033\uff5c\034\uff5c\035\uff5c" +
    "\037\uff5c\040\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c\045" +
    "\uff5c\046\uff5c\047\uff5c\050\uff5c\052\uff5c\053\uff5c\054\uff5c" +
    "\055\uff5c\064\uff5c\066\uff5c\070\uff5c\077\uff5c\103\uff5c\104" +
    "\uff5c\001\002\000\024\002\uffa1\007\uffa1\013\uffa1\014\uffa1" +
    "\017\uffa1\020\uffa1\023\uffa1\100\uffa1\101\uffa1\001\002\000" +
    "\024\004\033\005\036\006\034\007\042\032\040\035\035" +
    "\051\045\060\037\061\046\001\002\000\040\010\133\034" +
    "\057\035\052\037\055\040\062\041\053\042\056\043\064" +
    "\044\054\045\050\046\061\047\060\050\063\052\051\055" +
    "\065\001\002\000\024\002\uffa2\007\uffa2\013\uffa2\014\uffa2" +
    "\017\uffa2\020\uffa2\023\uffa2\100\uffa2\101\uffa2\001\002\000" +
    "\032\003\161\007\147\011\144\012\165\015\371\062\145" +
    "\063\160\065\141\067\163\071\164\073\156\074\135\001" +
    "\002\000\006\010\uff69\054\uff69\001\002\000\004\010\370" +
    "\001\002\000\004\010\367\001\002\000\004\010\366\001" +
    "\002\000\024\004\033\005\036\006\034\007\042\032\040" +
    "\035\035\051\045\060\037\061\046\001\002\000\004\010" +
    "\357\001\002\000\034\003\ufff2\007\ufff2\011\ufff2\012\ufff2" +
    "\015\ufff2\062\ufff2\063\ufff2\065\ufff2\067\ufff2\071\ufff2\072" +
    "\ufff2\073\ufff2\074\ufff2\001\002\000\004\032\351\001\002" +
    "\000\024\004\033\005\036\006\034\007\042\032\040\035" +
    "\035\051\045\060\037\061\046\001\002\000\004\010\312" +
    "\001\002\000\012\016\271\021\272\032\273\076\270\001" +
    "\002\000\004\010\267\001\002\000\004\010\266\001\002" +
    "\000\004\010\265\001\002\000\004\010\264\001\002\000" +
    "\004\010\263\001\002\000\004\010\262\001\002\000\006" +
    "\010\uff6a\054\uff6a\001\002\000\004\010\261\001\002\000" +
    "\024\004\033\005\036\006\034\007\042\032\040\035\035" +
    "\051\045\060\037\061\046\001\002\000\060\003\uffe3\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\231\011\uffe3\012\uffe3" +
    "\015\uffe3\032\uffe3\035\uffe3\051\uffe3\054\uffe3\060\uffe3\061" +
    "\uffe3\062\uffe3\063\uffe3\065\uffe3\067\uffe3\071\uffe3\072\uffe3" +
    "\073\uffe3\074\uffe3\001\002\000\004\010\230\001\002\000" +
    "\004\007\200\001\002\000\030\003\161\007\147\011\144" +
    "\012\165\062\145\063\160\065\141\067\163\071\164\073" +
    "\156\074\135\001\002\000\004\032\166\001\002\000\004" +
    "\007\167\001\002\000\012\021\uff94\022\uff94\033\uff94\050" +
    "\uff94\001\002\000\006\022\171\033\172\001\002\000\004" +
    "\007\173\001\002\000\006\010\uff85\054\uff85\001\002\000" +
    "\012\021\uff95\022\uff95\033\uff95\050\uff95\001\002\000\032" +
    "\003\161\007\147\011\144\012\165\062\145\063\160\065" +
    "\141\067\163\071\164\072\176\073\156\074\135\001\002" +
    "\000\034\003\ufff3\007\ufff3\011\ufff3\012\ufff3\015\ufff3\062" +
    "\ufff3\063\ufff3\065\ufff3\067\ufff3\071\ufff3\072\ufff3\073\ufff3" +
    "\074\ufff3\001\002\000\024\004\033\005\036\006\034\007" +
    "\042\032\040\035\035\051\045\060\037\061\046\001\002" +
    "\000\042\010\uff6b\034\057\035\052\037\055\040\062\041" +
    "\053\042\056\043\064\044\054\045\050\046\061\047\060" +
    "\050\063\052\051\054\uff6b\055\065\001\002\000\004\021" +
    "\201\001\002\000\004\050\202\001\002\000\024\004\033" +
    "\005\036\006\034\007\042\032\040\035\035\051\045\060" +
    "\037\061\046\001\002\000\040\034\057\035\052\037\055" +
    "\040\062\041\053\042\056\043\064\044\054\045\050\046" +
    "\061\047\060\050\063\052\051\055\065\070\204\001\002" +
    "\000\024\004\033\005\036\006\034\007\042\032\040\035" +
    "\035\051\045\060\037\061\046\001\002\000\040\034\057" +
    "\035\052\037\055\040\062\041\053\042\056\043\064\044" +
    "\054\045\050\046\061\047\060\050\063\052\051\055\065" +
    "\066\206\001\002\000\030\007\147\011\144\012\165\014" +
    "\216\062\145\063\160\065\141\067\163\071\164\073\156" +
    "\074\135\001\002\000\006\010\uffdd\054\uffdd\001\002\000" +
    "\006\010\uffe2\054\uffe2\001\002\000\006\010\uffdf\054\uffdf" +
    "\001\002\000\006\010\uffdc\054\uffdc\001\002\000\006\010" +
    "\uffde\054\uffde\001\002\000\006\010\uffe0\054\uffe0\001\002" +
    "\000\006\010\uffd6\054\uffd6\001\002\000\030\003\161\007" +
    "\147\011\144\012\165\062\145\063\160\065\141\067\163" +
    "\071\164\073\156\074\135\001\002\000\006\010\uffdb\054" +
    "\uffdb\001\002\000\006\010\uffe1\054\uffe1\001\002\000\006" +
    "\010\uffd9\054\uffd9\001\002\000\006\010\uff6d\054\uff6d\001" +
    "\002\000\006\010\uffd8\054\uffd8\001\002\000\006\010\uffd7" +
    "\054\uffd7\001\002\000\006\010\uffda\054\uffda\001\002\000" +
    "\032\003\161\007\147\011\144\012\165\015\227\062\145" +
    "\063\160\065\141\067\163\071\164\073\156\074\135\001" +
    "\002\000\006\010\uff6c\054\uff6c\001\002\000\056\003\uffe9" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\011\uffe9\012\uffe9\015" +
    "\uffe9\032\uffe9\035\uffe9\051\uffe9\054\uffe9\060\uffe9\061\uffe9" +
    "\062\uffe9\063\uffe9\065\uffe9\067\uffe9\071\uffe9\072\uffe9\073" +
    "\uffe9\074\uffe9\001\002\000\056\003\uffe4\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\011\uffe4\012\uffe4\015\uffe4\032\uffe4\035" +
    "\uffe4\051\uffe4\054\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4" +
    "\065\uffe4\067\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\001" +
    "\002\000\040\034\057\035\052\037\055\040\062\041\053" +
    "\042\056\043\064\044\054\045\050\046\061\047\060\050" +
    "\063\052\051\055\065\064\233\001\002\000\024\004\033" +
    "\005\036\006\034\007\042\032\040\035\035\051\045\060" +
    "\037\061\046\001\002\000\026\004\033\005\036\006\034" +
    "\007\042\032\040\035\035\051\045\054\251\060\037\061" +
    "\046\001\002\000\006\021\241\022\240\001\002\000\026" +
    "\004\uff74\005\uff74\006\uff74\007\uff74\032\uff74\035\uff74\051" +
    "\uff74\054\uff74\060\uff74\061\uff74\001\002\000\042\021\uff70" +
    "\022\uff70\034\057\035\052\037\055\040\062\041\053\042" +
    "\056\043\064\044\054\045\050\046\061\047\060\050\063" +
    "\052\051\055\065\001\002\000\024\004\033\005\036\006" +
    "\034\007\042\032\040\035\035\051\045\060\037\061\046" +
    "\001\002\000\032\003\161\007\147\011\144\012\165\014" +
    "\243\062\145\063\160\065\141\067\163\071\164\073\156" +
    "\074\135\001\002\000\026\004\uff72\005\uff72\006\uff72\007" +
    "\uff72\032\uff72\035\uff72\051\uff72\054\uff72\060\uff72\061\uff72" +
    "\001\002\000\030\003\161\007\147\011\144\012\165\062" +
    "\145\063\160\065\141\067\163\071\164\073\156\074\135" +
    "\001\002\000\032\003\161\007\147\011\144\012\165\015" +
    "\245\062\145\063\160\065\141\067\163\071\164\073\156" +
    "\074\135\001\002\000\004\010\246\001\002\000\026\004" +
    "\uff73\005\uff73\006\uff73\007\uff73\032\uff73\035\uff73\051\uff73" +
    "\054\uff73\060\uff73\061\uff73\001\002\000\042\021\uff71\022" +
    "\uff71\034\057\035\052\037\055\040\062\041\053\042\056" +
    "\043\064\044\054\045\050\046\061\047\060\050\063\052" +
    "\051\055\065\001\002\000\026\004\uff75\005\uff75\006\uff75" +
    "\007\uff75\032\uff75\035\uff75\051\uff75\054\uff75\060\uff75\061" +
    "\uff75\001\002\000\032\003\161\007\147\011\144\012\165" +
    "\014\253\062\145\063\160\065\141\067\163\071\164\073" +
    "\156\074\135\001\002\000\004\015\260\001\002\000\030" +
    "\003\161\007\147\011\144\012\165\062\145\063\160\065" +
    "\141\067\163\071\164\073\156\074\135\001\002\000\032" +
    "\003\161\007\147\011\144\012\165\015\255\062\145\063" +
    "\160\065\141\067\163\071\164\073\156\074\135\001\002" +
    "\000\004\010\256\001\002\000\004\015\257\001\002\000" +
    "\006\010\uff77\054\uff77\001\002\000\006\010\uff76\054\uff76" +
    "\001\002\000\056\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\011\uffe6\012\uffe6\015\uffe6\032\uffe6\035\uffe6\051\uffe6" +
    "\054\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\065\uffe6\067" +
    "\uffe6\071\uffe6\072\uffe6\073\uffe6\074\uffe6\001\002\000\056" +
    "\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7\012" +
    "\uffe7\015\uffe7\032\uffe7\035\uffe7\051\uffe7\054\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\065\uffe7\067\uffe7\071\uffe7\072" +
    "\uffe7\073\uffe7\074\uffe7\001\002\000\056\003\uffe8\004\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8\015\uffe8\032" +
    "\uffe8\035\uffe8\051\uffe8\054\uffe8\060\uffe8\061\uffe8\062\uffe8" +
    "\063\uffe8\065\uffe8\067\uffe8\071\uffe8\072\uffe8\073\uffe8\074" +
    "\uffe8\001\002\000\056\003\ufff0\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\011\ufff0\012\ufff0\015\ufff0\032\ufff0\035\ufff0\051" +
    "\ufff0\054\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\065\ufff0" +
    "\067\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\001\002\000" +
    "\056\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea\011\uffea" +
    "\012\uffea\015\uffea\032\uffea\035\uffea\051\uffea\054\uffea\060" +
    "\uffea\061\uffea\062\uffea\063\uffea\065\uffea\067\uffea\071\uffea" +
    "\072\uffea\073\uffea\074\uffea\001\002\000\056\003\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\012\uffe5\015\uffe5" +
    "\032\uffe5\035\uffe5\051\uffe5\054\uffe5\060\uffe5\061\uffe5\062" +
    "\uffe5\063\uffe5\065\uffe5\067\uffe5\071\uffe5\072\uffe5\073\uffe5" +
    "\074\uffe5\001\002\000\056\003\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\011\uffef\012\uffef\015\uffef\032\uffef\035\uffef" +
    "\051\uffef\054\uffef\060\uffef\061\uffef\062\uffef\063\uffef\065" +
    "\uffef\067\uffef\071\uffef\072\uffef\073\uffef\074\uffef\001\002" +
    "\000\024\004\033\005\036\006\034\007\042\032\040\035" +
    "\035\051\045\060\037\061\046\001\002\000\004\007\301" +
    "\001\002\000\004\050\277\001\002\000\026\004\033\005" +
    "\036\006\034\007\042\032\040\033\275\035\035\051\045" +
    "\060\037\061\046\001\002\000\006\022\116\033\276\001" +
    "\002\000\006\010\uffb9\054\uffb9\001\002\000\006\010\uffba" +
    "\054\uffba\001\002\000\024\004\033\005\036\006\034\007" +
    "\042\032\040\035\035\051\045\060\037\061\046\001\002" +
    "\000\042\010\uff82\034\057\035\052\037\055\040\062\041" +
    "\053\042\056\043\064\044\054\045\050\046\061\047\060" +
    "\050\063\052\051\054\uff82\055\065\001\002\000\004\021" +
    "\302\001\002\000\004\050\303\001\002\000\024\004\033" +
    "\005\036\006\034\007\042\032\040\035\035\051\045\060" +
    "\037\061\046\001\002\000\042\010\uff81\034\057\035\052" +
    "\037\055\040\062\041\053\042\056\043\064\044\054\045" +
    "\050\046\061\047\060\050\063\052\051\054\uff81\055\065" +
    "\001\002\000\040\034\057\035\052\037\055\040\062\041" +
    "\053\042\056\043\064\044\054\045\050\046\061\047\060" +
    "\050\063\052\051\055\065\077\306\001\002\000\004\021" +
    "\307\001\002\000\004\050\310\001\002\000\024\004\033" +
    "\005\036\006\034\007\042\032\040\035\035\051\045\060" +
    "\037\061\046\001\002\000\042\010\uff80\034\057\035\052" +
    "\037\055\040\062\041\053\042\056\043\064\044\054\045" +
    "\050\046\061\047\060\050\063\052\051\054\uff80\055\065" +
    "\001\002\000\056\003\uffed\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\011\uffed\012\uffed\015\uffed\032\uffed\035\uffed\051\uffed" +
    "\054\uffed\060\uffed\061\uffed\062\uffed\063\uffed\065\uffed\067" +
    "\uffed\071\uffed\072\uffed\073\uffed\074\uffed\001\002\000\040" +
    "\034\057\035\052\037\055\040\062\041\053\042\056\043" +
    "\064\044\054\045\050\046\061\047\060\050\063\052\051" +
    "\053\314\055\065\001\002\000\030\007\147\011\144\012" +
    "\165\014\315\062\145\063\160\065\141\067\163\071\164" +
    "\073\156\074\135\001\002\000\030\003\161\007\147\011" +
    "\144\012\165\062\145\063\160\065\141\067\163\071\164" +
    "\073\156\074\135\001\002\000\006\010\uff7f\054\317\001" +
    "\002\000\030\007\147\011\144\012\165\014\327\062\145" +
    "\063\160\065\141\067\163\071\164\073\156\074\135\001" +
    "\002\000\006\010\uffd0\054\uffd0\001\002\000\006\010\uffd5" +
    "\054\uffd5\001\002\000\006\010\uffd2\054\uffd2\001\002\000" +
    "\006\010\uff79\054\uff79\001\002\000\006\010\uffd1\054\uffd1" +
    "\001\002\000\006\010\uffd3\054\uffd3\001\002\000\006\010" +
    "\uffca\054\uffca\001\002\000\030\003\161\007\147\011\144" +
    "\012\165\062\145\063\160\065\141\067\163\071\164\073" +
    "\156\074\135\001\002\000\006\010\uffcf\054\uffcf\001\002" +
    "\000\006\010\uffd4\054\uffd4\001\002\000\006\010\uff7c\054" +
    "\uff7c\001\002\000\006\010\uffcd\054\uffcd\001\002\000\006" +
    "\010\uffcc\054\uffcc\001\002\000\006\010\uffcb\054\uffcb\001" +
    "\002\000\006\010\uffce\054\uffce\001\002\000\032\003\161" +
    "\007\147\011\144\012\165\015\340\062\145\063\160\065" +
    "\141\067\163\071\164\073\156\074\135\001\002\000\006" +
    "\010\uff7b\054\uff7b\001\002\000\032\003\161\007\147\011" +
    "\144\012\165\015\342\062\145\063\160\065\141\067\163" +
    "\071\164\073\156\074\135\001\002\000\006\010\uff7e\054" +
    "\343\001\002\000\030\007\147\011\144\012\165\014\345" +
    "\062\145\063\160\065\141\067\163\071\164\073\156\074" +
    "\135\001\002\000\006\010\uff78\054\uff78\001\002\000\030" +
    "\003\161\007\147\011\144\012\165\062\145\063\160\065" +
    "\141\067\163\071\164\073\156\074\135\001\002\000\006" +
    "\010\uff7d\054\uff7d\001\002\000\032\003\161\007\147\011" +
    "\144\012\165\015\350\062\145\063\160\065\141\067\163" +
    "\071\164\073\156\074\135\001\002\000\006\010\uff7a\054" +
    "\uff7a\001\002\000\024\004\033\005\036\006\034\007\042" +
    "\032\040\035\035\051\045\060\037\061\046\001\002\000" +
    "\042\022\uff83\033\uff83\034\057\035\052\037\055\040\062" +
    "\041\053\042\056\043\064\044\054\045\050\046\061\047" +
    "\060\050\063\052\051\055\065\001\002\000\006\022\354" +
    "\033\355\001\002\000\024\004\033\005\036\006\034\007" +
    "\042\032\040\035\035\051\045\060\037\061\046\001\002" +
    "\000\006\010\uff86\054\uff86\001\002\000\042\022\uff84\033" +
    "\uff84\034\057\035\052\037\055\040\062\041\053\042\056" +
    "\043\064\044\054\045\050\046\061\047\060\050\063\052" +
    "\051\055\065\001\002\000\056\003\uffeb\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\011\uffeb\012\uffeb\015\uffeb\032\uffeb\035" +
    "\uffeb\051\uffeb\054\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\065\uffeb\067\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\001" +
    "\002\000\040\034\057\035\052\037\055\040\062\041\053" +
    "\042\056\043\064\044\054\045\050\046\061\047\060\050" +
    "\063\052\051\055\065\066\361\001\002\000\030\007\147" +
    "\011\144\012\165\014\362\062\145\063\160\065\141\067" +
    "\163\071\164\073\156\074\135\001\002\000\030\003\161" +
    "\007\147\011\144\012\165\062\145\063\160\065\141\067" +
    "\163\071\164\073\156\074\135\001\002\000\006\010\uff6e" +
    "\054\uff6e\001\002\000\032\003\161\007\147\011\144\012" +
    "\165\015\365\062\145\063\160\065\141\067\163\071\164" +
    "\073\156\074\135\001\002\000\006\010\uff6f\054\uff6f\001" +
    "\002\000\056\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee" +
    "\011\uffee\012\uffee\015\uffee\032\uffee\035\uffee\051\uffee\054" +
    "\uffee\060\uffee\061\uffee\062\uffee\063\uffee\065\uffee\067\uffee" +
    "\071\uffee\072\uffee\073\uffee\074\uffee\001\002\000\056\003" +
    "\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1\012\ufff1" +
    "\015\ufff1\032\ufff1\035\ufff1\051\ufff1\054\ufff1\060\ufff1\061" +
    "\ufff1\062\ufff1\063\ufff1\065\ufff1\067\ufff1\071\ufff1\072\ufff1" +
    "\073\ufff1\074\ufff1\001\002\000\056\003\uffec\004\uffec\005" +
    "\uffec\006\uffec\007\uffec\011\uffec\012\uffec\015\uffec\032\uffec" +
    "\035\uffec\051\uffec\054\uffec\060\uffec\061\uffec\062\uffec\063" +
    "\uffec\065\uffec\067\uffec\071\uffec\072\uffec\073\uffec\074\uffec" +
    "\001\002\000\004\016\372\001\002\000\022\002\ufff4\013" +
    "\ufff4\014\ufff4\017\ufff4\020\ufff4\023\ufff4\100\ufff4\101\ufff4" +
    "\001\002\000\004\002\001\001\002\000\022\002\000\013" +
    "\000\014\000\017\000\020\000\023\000\100\000\101\000" +
    "\001\002\000\004\032\376\001\002\000\010\007\u0100\017" +
    "\377\033\u0103\001\002\000\004\007\u0170\001\002\000\006" +
    "\021\uffbb\022\uffbb\001\002\000\006\021\u016e\022\u016a\001" +
    "\002\000\006\010\u015a\033\u015b\001\002\000\004\021\u0105" +
    "\001\002\000\006\021\uffbd\022\uffbd\001\002\000\020\007" +
    "\u0107\024\u0106\025\u0109\026\u010c\027\u010b\030\u0108\031\u010d" +
    "\001\002\000\006\010\uff8d\033\uff8d\001\002\000\006\010" +
    "\uff87\033\uff87\001\002\000\006\010\uff8b\033\uff8b\001\002" +
    "\000\006\010\uff8c\033\uff8c\001\002\000\004\010\u010e\001" +
    "\002\000\006\010\uff89\033\uff89\001\002\000\006\010\uff88" +
    "\033\uff88\001\002\000\006\010\uff8a\033\uff8a\001\002\000" +
    "\006\014\u0110\017\u010f\001\002\000\006\003\u0115\007\167" +
    "\001\002\000\030\003\161\007\147\011\144\012\165\062" +
    "\145\063\160\065\141\067\163\071\164\073\156\074\135" +
    "\001\002\000\032\003\161\007\147\011\144\012\165\015" +
    "\u0112\062\145\063\160\065\141\067\163\071\164\073\156" +
    "\074\135\001\002\000\004\010\u0113\001\002\000\022\002" +
    "\uffc1\013\uffc1\014\uffc1\017\uffc1\020\uffc1\023\uffc1\100\uffc1" +
    "\101\uffc1\001\002\000\026\002\uff9e\003\uff9e\007\uff9e\013" +
    "\uff9e\014\uff9e\017\uff9e\020\uff9e\023\uff9e\100\uff9e\101\uff9e" +
    "\001\002\000\030\002\uff97\003\uff97\007\uff97\010\u0159\013" +
    "\uff97\014\uff97\017\uff97\020\uff97\023\uff97\100\uff97\101\uff97" +
    "\001\002\000\010\021\u011f\022\171\050\u011e\001\002\000" +
    "\010\003\u0115\007\167\014\u011a\001\002\000\026\002\uff99" +
    "\003\uff99\007\uff99\013\uff99\014\uff99\017\uff99\020\uff99\023" +
    "\uff99\100\uff99\101\uff99\001\002\000\026\002\uff9f\003\uff9f" +
    "\007\uff9f\013\uff9f\014\uff9f\017\uff9f\020\uff9f\023\uff9f\100" +
    "\uff9f\101\uff9f\001\002\000\030\003\161\007\147\011\144" +
    "\012\165\062\145\063\160\065\141\067\163\071\164\073" +
    "\156\074\135\001\002\000\032\003\161\007\147\011\144" +
    "\012\165\015\u011c\062\145\063\160\065\141\067\163\071" +
    "\164\073\156\074\135\001\002\000\004\010\u011d\001\002" +
    "\000\022\002\uffc2\013\uffc2\014\uffc2\017\uffc2\020\uffc2\023" +
    "\uffc2\100\uffc2\101\uffc2\001\002\000\004\102\u0134\001\002" +
    "\000\042\004\033\005\036\006\034\007\u0121\024\u0106\025" +
    "\u0109\026\u010c\027\u010b\030\u0108\031\u010d\032\040\035\035" +
    "\051\045\060\037\061\046\075\u0123\001\002\000\040\034" +
    "\057\035\052\037\055\040\062\041\053\042\056\043\064" +
    "\044\054\045\050\046\061\047\060\050\063\052\051\055" +
    "\065\103\u0131\001\002\000\050\010\uff87\016\110\032\112" +
    "\034\uff5f\035\uff5f\037\uff5f\040\uff5f\041\uff5f\042\uff5f\043" +
    "\uff5f\044\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f\052\uff5f" +
    "\055\uff5f\076\111\103\uff5f\001\002\000\004\010\u0130\001" +
    "\002\000\004\076\u0124\001\002\000\024\004\033\005\036" +
    "\006\034\007\042\032\040\035\035\051\045\060\037\061" +
    "\046\001\002\000\042\034\057\035\052\037\055\040\062" +
    "\041\053\042\056\043\064\044\054\045\050\046\061\047" +
    "\060\050\063\052\051\055\065\077\u0126\104\u0127\001\002" +
    "\000\004\064\u012d\001\002\000\024\004\033\005\036\006" +
    "\034\007\042\032\040\035\035\051\045\060\037\061\046" +
    "\001\002\000\040\034\057\035\052\037\055\040\062\041" +
    "\053\042\056\043\064\044\054\045\050\046\061\047\060" +
    "\050\063\052\051\055\065\077\u0129\001\002\000\004\064" +
    "\u012a\001\002\000\020\007\u0107\024\u0106\025\u0109\026\u010c" +
    "\027\u010b\030\u0108\031\u010d\001\002\000\004\010\u012c\001" +
    "\002\000\026\002\uff9b\003\uff9b\007\uff9b\013\uff9b\014\uff9b" +
    "\017\uff9b\020\uff9b\023\uff9b\100\uff9b\101\uff9b\001\002\000" +
    "\020\007\u0107\024\u0106\025\u0109\026\u010c\027\u010b\030\u0108" +
    "\031\u010d\001\002\000\004\010\u012f\001\002\000\026\002" +
    "\uff9a\003\uff9a\007\uff9a\013\uff9a\014\uff9a\017\uff9a\020\uff9a" +
    "\023\uff9a\100\uff9a\101\uff9a\001\002\000\026\002\uff9d\003" +
    "\uff9d\007\uff9d\013\uff9d\014\uff9d\017\uff9d\020\uff9d\023\uff9d" +
    "\100\uff9d\101\uff9d\001\002\000\024\004\033\005\036\006" +
    "\034\007\042\032\040\035\035\051\045\060\037\061\046" +
    "\001\002\000\040\010\u0133\034\057\035\052\037\055\040" +
    "\062\041\053\042\056\043\064\044\054\045\050\046\061" +
    "\047\060\050\063\052\051\055\065\001\002\000\026\002" +
    "\uff9c\003\uff9c\007\uff9c\013\uff9c\014\uff9c\017\uff9c\020\uff9c" +
    "\023\uff9c\100\uff9c\101\uff9c\001\002\000\004\007\u0135\001" +
    "\002\000\004\021\u0157\001\002\000\006\007\u0137\015\u0138" +
    "\001\002\000\004\021\u013a\001\002\000\004\010\u0139\001" +
    "\002\000\026\002\uff96\003\uff96\007\uff96\013\uff96\014\uff96" +
    "\017\uff96\020\uff96\023\uff96\100\uff96\101\uff96\001\002\000" +
    "\042\004\033\005\036\006\034\007\u013e\024\u0141\025\u0142" +
    "\026\u0143\027\u0140\030\u013f\031\u013b\032\040\035\035\051" +
    "\045\060\037\061\046\075\u0144\001\002\000\004\010\uff90" +
    "\001\002\000\040\034\057\035\052\037\055\040\062\041" +
    "\053\042\056\043\064\044\054\045\050\046\061\047\060" +
    "\050\063\052\051\055\065\103\u0154\001\002\000\004\010" +
    "\u0153\001\002\000\050\010\u0152\016\110\032\112\034\uff5f" +
    "\035\uff5f\037\uff5f\040\uff5f\041\uff5f\042\uff5f\043\uff5f\044" +
    "\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f\052\uff5f\055\uff5f" +
    "\076\111\103\uff5f\001\002\000\004\010\uff91\001\002\000" +
    "\004\010\uff8f\001\002\000\004\010\uff93\001\002\000\004" +
    "\010\uff92\001\002\000\004\010\uff8e\001\002\000\004\076" +
    "\u0146\001\002\000\006\007\uffaa\015\uffaa\001\002\000\024" +
    "\004\033\005\036\006\034\007\042\032\040\035\035\051" +
    "\045\060\037\061\046\001\002\000\042\034\057\035\052" +
    "\037\055\040\062\041\053\042\056\043\064\044\054\045" +
    "\050\046\061\047\060\050\063\052\051\055\065\077\u0148" +
    "\104\u0149\001\002\000\004\064\u014f\001\002\000\024\004" +
    "\033\005\036\006\034\007\042\032\040\035\035\051\045" +
    "\060\037\061\046\001\002\000\040\034\057\035\052\037" +
    "\055\040\062\041\053\042\056\043\064\044\054\045\050" +
    "\046\061\047\060\050\063\052\051\055\065\077\u014b\001" +
    "\002\000\004\064\u014c\001\002\000\016\024\u0141\025\u0142" +
    "\026\u0143\027\u0140\030\u013f\031\u013b\001\002\000\004\010" +
    "\u014e\001\002\000\006\007\uffa6\015\uffa6\001\002\000\016" +
    "\024\u0141\025\u0142\026\u0143\027\u0140\030\u013f\031\u013b\001" +
    "\002\000\004\010\u0151\001\002\000\006\007\uffa5\015\uffa5" +
    "\001\002\000\006\007\uffa4\015\uffa4\001\002\000\006\007" +
    "\uffa8\015\uffa8\001\002\000\024\004\033\005\036\006\034" +
    "\007\042\032\040\035\035\051\045\060\037\061\046\001" +
    "\002\000\040\010\u0156\034\057\035\052\037\055\040\062" +
    "\041\053\042\056\043\064\044\054\045\050\046\061\047" +
    "\060\050\063\052\051\055\065\001\002\000\006\007\uffa7" +
    "\015\uffa7\001\002\000\042\004\033\005\036\006\034\007" +
    "\u013e\024\u0141\025\u0142\026\u0143\027\u0140\030\u013f\031\u013b" +
    "\032\040\035\035\051\045\060\037\061\046\075\u0144\001" +
    "\002\000\006\007\uffa9\015\uffa9\001\002\000\026\002\uff98" +
    "\003\uff98\007\uff98\013\uff98\014\uff98\017\uff98\020\uff98\023" +
    "\uff98\100\uff98\101\uff98\001\002\000\006\007\u0100\017\377" +
    "\001\002\000\004\021\u015c\001\002\000\020\007\u0107\024" +
    "\u0106\025\u0109\026\u010c\027\u010b\030\u0108\031\u010d\001\002" +
    "\000\004\010\u015e\001\002\000\006\014\u0160\017\u015f\001" +
    "\002\000\006\003\u0115\007\167\001\002\000\030\003\161" +
    "\007\147\011\144\012\165\062\145\063\160\065\141\067" +
    "\163\071\164\073\156\074\135\001\002\000\032\003\161" +
    "\007\147\011\144\012\165\015\u0162\062\145\063\160\065" +
    "\141\067\163\071\164\073\156\074\135\001\002\000\004" +
    "\010\u0163\001\002\000\022\002\uffc3\013\uffc3\014\uffc3\017" +
    "\uffc3\020\uffc3\023\uffc3\100\uffc3\101\uffc3\001\002\000\010" +
    "\003\u0115\007\167\014\u0165\001\002\000\030\003\161\007" +
    "\147\011\144\012\165\062\145\063\160\065\141\067\163" +
    "\071\164\073\156\074\135\001\002\000\032\003\161\007" +
    "\147\011\144\012\165\015\u0167\062\145\063\160\065\141" +
    "\067\163\071\164\073\156\074\135\001\002\000\004\010" +
    "\u0168\001\002\000\022\002\uffc4\013\uffc4\014\uffc4\017\uffc4" +
    "\020\uffc4\023\uffc4\100\uffc4\101\uffc4\001\002\000\006\021" +
    "\u016b\022\u016a\001\002\000\006\007\u0100\017\377\001\002" +
    "\000\020\007\u0107\024\u0106\025\u0109\026\u010c\027\u010b\030" +
    "\u0108\031\u010d\001\002\000\006\010\uffc0\033\uffc0\001\002" +
    "\000\006\021\uffbe\022\uffbe\001\002\000\020\007\u0107\024" +
    "\u0106\025\u0109\026\u010c\027\u010b\030\u0108\031\u010d\001\002" +
    "\000\006\010\uffbf\033\uffbf\001\002\000\006\021\uffbc\022" +
    "\uffbc\001\002\000\030\002\uffac\003\uffac\007\uffac\010\u018f" +
    "\013\uffac\014\uffac\017\uffac\020\uffac\023\uffac\100\uffac\101" +
    "\uffac\001\002\000\006\022\171\050\u0177\001\002\000\026" +
    "\002\uffb3\003\uffb3\007\uffb3\013\uffb3\014\uffb3\017\uffb3\020" +
    "\uffb3\023\uffb3\100\uffb3\101\uffb3\001\002\000\026\002\ufff7" +
    "\003\u0171\007\167\013\ufff7\014\ufff7\017\ufff7\020\ufff7\023" +
    "\ufff7\100\ufff7\101\ufff7\001\002\000\026\002\uffae\003\uffae" +
    "\007\uffae\013\uffae\014\uffae\017\uffae\020\uffae\023\uffae\100" +
    "\uffae\101\uffae\001\002\000\026\002\uffb4\003\uffb4\007\uffb4" +
    "\013\uffb4\014\uffb4\017\uffb4\020\uffb4\023\uffb4\100\uffb4\101" +
    "\uffb4\001\002\000\044\004\033\005\036\006\034\007\042" +
    "\024\u0141\025\u0142\026\u0143\027\u0140\030\u013f\031\u013b\032" +
    "\040\035\035\051\045\060\037\061\046\075\u017b\102\u017a" +
    "\001\002\000\040\034\057\035\052\037\055\040\062\041" +
    "\053\042\056\043\064\044\054\045\050\046\061\047\060" +
    "\050\063\052\051\055\065\103\u018c\001\002\000\004\010" +
    "\u018b\001\002\000\004\007\u0135\001\002\000\004\076\u017c" +
    "\001\002\000\024\004\033\005\036\006\034\007\042\032" +
    "\040\035\035\051\045\060\037\061\046\001\002\000\042" +
    "\034\057\035\052\037\055\040\062\041\053\042\056\043" +
    "\064\044\054\045\050\046\061\047\060\050\063\052\051" +
    "\055\065\077\u017e\104\u017f\001\002\000\004\064\u0185\001" +
    "\002\000\024\004\033\005\036\006\034\007\042\032\040" +
    "\035\035\051\045\060\037\061\046\001\002\000\040\034" +
    "\057\035\052\037\055\040\062\041\053\042\056\043\064" +
    "\044\054\045\050\046\061\047\060\050\063\052\051\055" +
    "\065\077\u0181\001\002\000\004\064\u0182\001\002\000\016" +
    "\024\u0141\025\u0142\026\u0143\027\u0140\030\u013f\031\u013b\001" +
    "\002\000\004\010\u0184\001\002\000\026\002\uffb0\003\uffb0" +
    "\007\uffb0\013\uffb0\014\uffb0\017\uffb0\020\uffb0\023\uffb0\100" +
    "\uffb0\101\uffb0\001\002\000\016\024\u0141\025\u0142\026\u0143" +
    "\027\u0140\030\u013f\031\u013b\001\002\000\004\010\u0187\001" +
    "\002\000\026\002\uffaf\003\uffaf\007\uffaf\013\uffaf\014\uffaf" +
    "\017\uffaf\020\uffaf\023\uffaf\100\uffaf\101\uffaf\001\002\000" +
    "\006\007\u0137\015\u0189\001\002\000\004\010\u018a\001\002" +
    "\000\026\002\uffab\003\uffab\007\uffab\013\uffab\014\uffab\017" +
    "\uffab\020\uffab\023\uffab\100\uffab\101\uffab\001\002\000\026" +
    "\002\uffb2\003\uffb2\007\uffb2\013\uffb2\014\uffb2\017\uffb2\020" +
    "\uffb2\023\uffb2\100\uffb2\101\uffb2\001\002\000\024\004\033" +
    "\005\036\006\034\007\042\032\040\035\035\051\045\060" +
    "\037\061\046\001\002\000\040\010\u018e\034\057\035\052" +
    "\037\055\040\062\041\053\042\056\043\064\044\054\045" +
    "\050\046\061\047\060\050\063\052\051\055\065\001\002" +
    "\000\026\002\uffb1\003\uffb1\007\uffb1\013\uffb1\014\uffb1\017" +
    "\uffb1\020\uffb1\023\uffb1\100\uffb1\101\uffb1\001\002\000\026" +
    "\002\uffad\003\uffad\007\uffad\013\uffad\014\uffad\017\uffad\020" +
    "\uffad\023\uffad\100\uffad\101\uffad\001\002\000\026\002\ufff5" +
    "\003\u0115\007\167\013\ufff5\014\ufff5\017\ufff5\020\ufff5\023" +
    "\ufff5\100\ufff5\101\ufff5\001\002\000\004\032\u0192\001\002" +
    "\000\010\007\u0100\017\377\033\u0194\001\002\000\006\010" +
    "\u015a\033\u01a0\001\002\000\004\010\u0195\001\002\000\006" +
    "\014\u0197\017\u0196\001\002\000\006\003\u0115\007\167\001" +
    "\002\000\030\003\161\007\147\011\144\012\165\062\145" +
    "\063\160\065\141\067\163\071\164\073\156\074\135\001" +
    "\002\000\032\003\161\007\147\011\144\012\165\015\u0199" +
    "\062\145\063\160\065\141\067\163\071\164\073\156\074" +
    "\135\001\002\000\004\010\u019a\001\002\000\022\002\uffc5" +
    "\013\uffc5\014\uffc5\017\uffc5\020\uffc5\023\uffc5\100\uffc5\101" +
    "\uffc5\001\002\000\010\003\u0115\007\167\014\u019c\001\002" +
    "\000\030\003\161\007\147\011\144\012\165\062\145\063" +
    "\160\065\141\067\163\071\164\073\156\074\135\001\002" +
    "\000\032\003\161\007\147\011\144\012\165\015\u019e\062" +
    "\145\063\160\065\141\067\163\071\164\073\156\074\135" +
    "\001\002\000\004\010\u019f\001\002\000\022\002\uffc6\013" +
    "\uffc6\014\uffc6\017\uffc6\020\uffc6\023\uffc6\100\uffc6\101\uffc6" +
    "\001\002\000\004\010\u01a1\001\002\000\006\014\u01a3\017" +
    "\u01a2\001\002\000\006\003\u0115\007\167\001\002\000\030" +
    "\003\161\007\147\011\144\012\165\062\145\063\160\065" +
    "\141\067\163\071\164\073\156\074\135\001\002\000\032" +
    "\003\161\007\147\011\144\012\165\015\u01a5\062\145\063" +
    "\160\065\141\067\163\071\164\073\156\074\135\001\002" +
    "\000\004\010\u01a6\001\002\000\022\002\uffc7\013\uffc7\014" +
    "\uffc7\017\uffc7\020\uffc7\023\uffc7\100\uffc7\101\uffc7\001\002" +
    "\000\010\003\u0115\007\167\014\u01a8\001\002\000\030\003" +
    "\161\007\147\011\144\012\165\062\145\063\160\065\141" +
    "\067\163\071\164\073\156\074\135\001\002\000\032\003" +
    "\161\007\147\011\144\012\165\015\u01aa\062\145\063\160" +
    "\065\141\067\163\071\164\073\156\074\135\001\002\000" +
    "\004\010\u01ab\001\002\000\022\002\uffc8\013\uffc8\014\uffc8" +
    "\017\uffc8\020\uffc8\023\uffc8\100\uffc8\101\uffc8\001\002\000" +
    "\004\010\u01ad\001\002\000\022\002\uffc9\013\uffc9\014\uffc9" +
    "\017\uffc9\020\uffc9\023\uffc9\100\uffc9\101\uffc9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ab\000\024\003\016\032\013\041\011\042\007\043" +
    "\004\044\020\045\014\046\006\047\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\u018f\010\u0113\023\u0115" +
    "\057\u0117\001\001\000\002\001\001\000\012\005\u0173\007" +
    "\u0172\023\u0171\056\u0174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\032\013\041\011\042" +
    "\007\043\004\044\020\045\373\046\006\047\022\001\001" +
    "\000\040\002\133\013\142\024\136\025\152\026\147\027" +
    "\141\030\137\031\145\033\151\034\161\035\153\036\154" +
    "\037\156\040\150\055\135\001\001\000\002\001\001\000" +
    "\004\004\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\040\017\030\020\043\021\031\054\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\126\017\030\020\043\021\031" +
    "\054\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\124\017\030\020\043\021\031\054\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\046\017\030\020\043\021\031" +
    "\054\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\106\017\030\020\043\021\031\054\042\001\001" +
    "\000\014\016\104\017\030\020\043\021\031\054\042\001" +
    "\001\000\014\016\102\017\030\020\043\021\031\054\042" +
    "\001\001\000\014\016\101\017\030\020\043\021\031\054" +
    "\042\001\001\000\014\016\100\017\030\020\043\021\031" +
    "\054\042\001\001\000\014\016\077\017\030\020\043\021" +
    "\031\054\042\001\001\000\014\016\076\017\030\020\043" +
    "\021\031\054\042\001\001\000\014\016\075\017\030\020" +
    "\043\021\031\054\042\001\001\000\014\016\074\017\030" +
    "\020\043\021\031\054\042\001\001\000\014\016\073\017" +
    "\030\020\043\021\031\054\042\001\001\000\014\016\072" +
    "\017\030\020\043\021\031\054\042\001\001\000\014\016" +
    "\071\017\030\020\043\021\031\054\042\001\001\000\014" +
    "\016\070\017\030\020\043\021\031\054\042\001\001\000" +
    "\014\016\065\017\030\020\043\021\031\054\042\001\001" +
    "\000\002\001\001\000\014\016\067\017\030\020\043\021" +
    "\031\054\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\016\105\017\030\020\043\021\031\054\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\120\017\030\020\043" +
    "\021\031\054\042\001\001\000\016\016\114\017\030\020" +
    "\043\021\031\053\112\054\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\016\117\017" +
    "\030\020\043\021\031\054\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\131\017\030\020\043\021\031\054\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\013\174\024\136\025" +
    "\152\026\147\027\141\030\137\031\145\033\151\034\161" +
    "\035\153\036\154\037\156\040\150\055\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\016\357\017\030\020\043\021\031\054" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\016\312\017\030\020\043\021\031\054" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\016\231\017\030\020\043\021" +
    "\031\054\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\002\173\013\142\024\136\025" +
    "\152\026\147\027\141\030\137\031\145\033\151\034\161" +
    "\035\153\036\154\037\156\040\150\055\135\001\001\000" +
    "\002\001\001\000\004\023\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\013\174\024\136\025\152\026\147" +
    "\027\141\030\137\031\145\033\151\034\161\035\153\036" +
    "\154\037\156\040\150\055\135\001\001\000\002\001\001" +
    "\000\014\016\176\017\030\020\043\021\031\054\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\202\017\030\020\043\021\031\054\042\001" +
    "\001\000\002\001\001\000\014\016\204\017\030\020\043" +
    "\021\031\054\042\001\001\000\002\001\001\000\036\014" +
    "\221\024\207\025\217\026\213\027\211\030\210\031\212" +
    "\033\216\034\224\035\220\036\222\037\223\040\214\055" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\002\225\013\142\024\136" +
    "\025\152\026\147\027\141\030\137\031\145\033\151\034" +
    "\161\035\153\036\154\037\156\040\150\055\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\013\174\024\136\025\152\026\147\027" +
    "\141\030\137\031\145\033\151\034\161\035\153\036\154" +
    "\037\156\040\150\055\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\236\017\030\020\043\021\031\054\042\062\235\063" +
    "\233\064\234\001\001\000\020\016\236\017\030\020\043" +
    "\021\031\054\042\062\247\064\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\246" +
    "\017\030\020\043\021\031\054\042\001\001\000\036\013" +
    "\241\024\136\025\152\026\147\027\141\030\137\031\145" +
    "\033\151\034\161\035\153\036\154\037\156\040\150\055" +
    "\135\001\001\000\002\001\001\000\040\002\243\013\142" +
    "\024\136\025\152\026\147\027\141\030\137\031\145\033" +
    "\151\034\161\035\153\036\154\037\156\040\150\055\135" +
    "\001\001\000\036\013\174\024\136\025\152\026\147\027" +
    "\141\030\137\031\145\033\151\034\161\035\153\036\154" +
    "\037\156\040\150\055\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\013\251\024\136\025\152\026\147\027\141\030\137\031" +
    "\145\033\151\034\161\035\153\036\154\037\156\040\150" +
    "\055\135\001\001\000\002\001\001\000\040\002\253\013" +
    "\142\024\136\025\152\026\147\027\141\030\137\031\145" +
    "\033\151\034\161\035\153\036\154\037\156\040\150\055" +
    "\135\001\001\000\036\013\174\024\136\025\152\026\147" +
    "\027\141\030\137\031\145\033\151\034\161\035\153\036" +
    "\154\037\156\040\150\055\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\016\304\017\030\020\043\021\031\054\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\016" +
    "\114\017\030\020\043\021\031\053\273\054\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\277\017\030\020\043\021\031\054\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\303\017\030\020\043\021\031\054\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\310\017\030\020\043\021\031" +
    "\054\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\014\315\024\207\025\217\026\213" +
    "\027\211\030\210\031\212\033\216\034\224\035\220\036" +
    "\222\037\223\040\214\055\206\001\001\000\040\002\340" +
    "\013\142\024\136\025\152\026\147\027\141\030\137\031" +
    "\145\033\151\034\161\035\153\036\154\037\156\040\150" +
    "\055\135\001\001\000\002\001\001\000\036\015\331\024" +
    "\320\025\330\026\324\027\322\030\321\031\323\033\327" +
    "\034\335\035\332\036\333\037\334\040\325\055\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\002\336\013\142\024\136\025\152" +
    "\026\147\027\141\030\137\031\145\033\151\034\161\035" +
    "\153\036\154\037\156\040\150\055\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\013\174\024\136\025\152\026\147\027\141\030" +
    "\137\031\145\033\151\034\161\035\153\036\154\037\156" +
    "\040\150\055\135\001\001\000\002\001\001\000\036\013" +
    "\174\024\136\025\152\026\147\027\141\030\137\031\145" +
    "\033\151\034\161\035\153\036\154\037\156\040\150\055" +
    "\135\001\001\000\002\001\001\000\036\015\345\024\320" +
    "\025\330\026\324\027\343\030\321\031\323\033\327\034" +
    "\335\035\332\036\333\037\334\040\325\055\317\001\001" +
    "\000\002\001\001\000\040\002\346\013\142\024\136\025" +
    "\152\026\147\027\141\030\137\031\145\033\151\034\161" +
    "\035\153\036\154\037\156\040\150\055\135\001\001\000" +
    "\002\001\001\000\036\013\174\024\136\025\152\026\147" +
    "\027\141\030\137\031\145\033\151\034\161\035\153\036" +
    "\154\037\156\040\150\055\135\001\001\000\002\001\001" +
    "\000\016\016\351\017\030\020\043\021\031\022\352\054" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\355\017\030\020\043\021\031\054\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\014\362\024\207\025\217\026\213\027" +
    "\211\030\210\031\212\033\216\034\224\035\220\036\222" +
    "\037\223\040\214\055\206\001\001\000\040\002\363\013" +
    "\142\024\136\025\152\026\147\027\141\030\137\031\145" +
    "\033\151\034\161\035\153\036\154\037\156\040\150\055" +
    "\135\001\001\000\002\001\001\000\036\013\174\024\136" +
    "\025\152\026\147\027\141\030\137\031\145\033\151\034" +
    "\161\035\153\036\154\037\156\040\150\055\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\050" +
    "\u0101\051\u0100\052\u0103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0109\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\u0116\010" +
    "\u0113\023\u0115\057\u0117\001\001\000\040\002\u0110\013\142" +
    "\024\136\025\152\026\147\027\141\030\137\031\145\033" +
    "\151\034\161\035\153\036\154\037\156\040\150\055\135" +
    "\001\001\000\036\013\174\024\136\025\152\026\147\027" +
    "\141\030\137\031\145\033\151\034\161\035\153\036\154" +
    "\037\156\040\150\055\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\u0118\023\u0115\057\u0117\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\002\u011a\013\142" +
    "\024\136\025\152\026\147\027\141\030\137\031\145\033" +
    "\151\034\161\035\153\036\154\037\156\040\150\055\135" +
    "\001\001\000\036\013\174\024\136\025\152\026\147\027" +
    "\141\030\137\031\145\033\151\034\161\035\153\036\154" +
    "\037\156\040\150\055\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\012\u0121\016\u011f" +
    "\017\030\020\043\021\031\054\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\u0124\017\030\020\043\021\031\054\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\u0127" +
    "\017\030\020\043\021\031\054\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u012a\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u012d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\u0131\017\030\020\043\021\031\054\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\u0135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\011\u013c\016\u013b" +
    "\017\030\020\043\021\031\054\042\061\u0144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\016\u0146\017\030\020\043\021" +
    "\031\054\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\u0149\017\030\020\043\021\031\054\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\u014c" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\u014f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\016\u0154\017\030\020" +
    "\043\021\031\054\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\011\u013c\016\u013b\017\030\020\043\021" +
    "\031\054\042\061\u0157\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\051\u0168\052\u0103\001\001\000\002\001" +
    "\001\000\004\012\u015c\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\u0163\010\u0113\023\u0115\057\u0117\001" +
    "\001\000\040\002\u0160\013\142\024\136\025\152\026\147" +
    "\027\141\030\137\031\145\033\151\034\161\035\153\036" +
    "\154\037\156\040\150\055\135\001\001\000\036\013\174" +
    "\024\136\025\152\026\147\027\141\030\137\031\145\033" +
    "\151\034\161\035\153\036\154\037\156\040\150\055\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\u0118\023\u0115\057\u0117\001\001\000\040\002\u0165\013\142" +
    "\024\136\025\152\026\147\027\141\030\137\031\145\033" +
    "\151\034\161\035\153\036\154\037\156\040\150\055\135" +
    "\001\001\000\036\013\174\024\136\025\152\026\147\027" +
    "\141\030\137\031\145\033\151\034\161\035\153\036\154" +
    "\037\156\040\150\055\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\u016c\001\001" +
    "\000\004\012\u016b\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u016e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\u0175\023\u0171\056\u0174\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\011\u0178\016\u0177\017" +
    "\030\020\043\021\031\054\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\u0187\001\001\000\002\001" +
    "\001\000\014\016\u017c\017\030\020\043\021\031\054\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\u017f\017\030\020\043\021\031\054\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u0182\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\u0185\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\u018c\017\030\020\043\021\031\054\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\u0118\023\u0115\057\u0117\001\001\000\002\001\001\000" +
    "\010\050\u0192\051\u0100\052\u0103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\u019a\010" +
    "\u0113\023\u0115\057\u0117\001\001\000\040\002\u0197\013\142" +
    "\024\136\025\152\026\147\027\141\030\137\031\145\033" +
    "\151\034\161\035\153\036\154\037\156\040\150\055\135" +
    "\001\001\000\036\013\174\024\136\025\152\026\147\027" +
    "\141\030\137\031\145\033\151\034\161\035\153\036\154" +
    "\037\156\040\150\055\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\u0118\023\u0115\057\u0117\001\001" +
    "\000\040\002\u019c\013\142\024\136\025\152\026\147\027" +
    "\141\030\137\031\145\033\151\034\161\035\153\036\154" +
    "\037\156\040\150\055\135\001\001\000\036\013\174\024" +
    "\136\025\152\026\147\027\141\030\137\031\145\033\151" +
    "\034\161\035\153\036\154\037\156\040\150\055\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\u01a6\010\u0113\023\u0115\057" +
    "\u0117\001\001\000\040\002\u01a3\013\142\024\136\025\152" +
    "\026\147\027\141\030\137\031\145\033\151\034\161\035" +
    "\153\036\154\037\156\040\150\055\135\001\001\000\036" +
    "\013\174\024\136\025\152\026\147\027\141\030\137\031" +
    "\145\033\151\034\161\035\153\036\154\037\156\040\150" +
    "\055\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\u0118\023\u0115\057\u0117\001\001\000\040\002\u01a8" +
    "\013\142\024\136\025\152\026\147\027\141\030\137\031" +
    "\145\033\151\034\161\035\153\036\154\037\156\040\150" +
    "\055\135\001\001\000\036\013\174\024\136\025\152\026" +
    "\147\027\141\030\137\031\145\033\151\034\161\035\153" +
    "\036\154\037\156\040\150\055\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= cuerpo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // cuerpo ::= cuerpo estructura 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo ::= estructura 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>();  RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // estructura ::= declaracion_program 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // estructura ::= estructura_tipos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // estructura ::= estructura_const 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // estructura ::= estructura_var 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // estructura ::= declaracion_funcion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // estructura ::= declaracion_procedimiento 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // estructura ::= estructura_main 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // estructura_tipos ::= TYPE declaraciones_tipos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EstructuraTipos(a, aleft, aright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_tipos",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // estructura_const ::= CONST declaracion_constantes 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EstructuraConst(a, aleft, aright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_const",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // estructura_var ::= VAR declaraciones_variables 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EstructuraVar(a, aleft, aright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_var",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // estructura_main ::= BEGIN instrucciones END PUNTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new EstructuraMain(a, aleft, aright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructura_main",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= writeln FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= readln FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= asignacion_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= asignacion_array FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= asignacion_record FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= llamada_metodo FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= sentencia_if FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= sentencia_case FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= sentencia_while FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= sentencia_for FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= sentencia_repeat FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= transferencia_break FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= transferencia_continue FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion_fin ::= writeln 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instruccion_fin ::= readln 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion_fin ::= asignacion_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion_fin ::= asignacion_array 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion_fin ::= asignacion_record 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion_fin ::= llamada_metodo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion_fin ::= sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion_fin ::= sentencia_case 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion_fin ::= sentencia_while 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion_fin ::= sentencia_for 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion_fin ::= sentencia_repeat 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion_fin ::= transferencia_break 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion_fin ::= transferencia_continue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_fin",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion_else_fin ::= writeln 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_else_fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion_else_fin ::= readln 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_else_fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion_else_fin ::= asignacion_variable 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_else_fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion_else_fin ::= asignacion_array 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_else_fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccion_else_fin ::= asignacion_record 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_else_fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruccion_else_fin ::= llamada_metodo 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_else_fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruccion_else_fin ::= sentencia_case 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_else_fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruccion_else_fin ::= sentencia_while 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_else_fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruccion_else_fin ::= sentencia_for 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_else_fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruccion_else_fin ::= sentencia_repeat 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_else_fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruccion_else_fin ::= transferencia_break 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_else_fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instruccion_else_fin ::= transferencia_continue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion_else_fin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion_program ::= PROGRAM ID FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Program(a, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_program",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion_procedimiento ::= PROCEDURE ID PAR1 lista_param_f PAR2 FINCADENA VAR declaraciones_variables BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		          LinkedList<Instruccion> cuerpo = new LinkedList<>();
            cuerpo.addAll(d); // d es LinkedList<Instruccion>
            cuerpo.addAll(e);  
        RESULT = new DeclaracionFuncion(a, b, "void", cuerpo, aleft, aright); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracion_procedimiento ::= PROCEDURE ID PAR1 lista_param_f PAR2 FINCADENA BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionFuncion(a, b, "void", d,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracion_procedimiento ::= PROCEDURE ID PAR1 PAR2 FINCADENA VAR declaraciones_variables BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		          LinkedList<Instruccion> cuerpo = new LinkedList<>();
            cuerpo.addAll(d); // d es LinkedList<Instruccion>
            cuerpo.addAll(e);  
        RESULT = new DeclaracionFuncion(a, new LinkedList<HashMap>(),"void", cuerpo, aleft, aright); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracion_procedimiento ::= PROCEDURE ID PAR1 PAR2 FINCADENA BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionFuncion(a, new LinkedList<HashMap>(), "void", d,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracion_funcion ::= FUNCTION ID PAR1 lista_param_f PAR2 DOSPUNTOS tipos_dato_var FINCADENA VAR declaraciones_variables BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		          LinkedList<Instruccion> cuerpo = new LinkedList<>();
            cuerpo.addAll(d); // d es LinkedList<Instruccion>
            cuerpo.addAll(e);  
        RESULT = new DeclaracionFuncion(a, b, c, cuerpo, aleft, aright); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracion_funcion ::= FUNCTION ID PAR1 lista_param_f PAR2 DOSPUNTOS tipos_dato_var FINCADENA BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionFuncion(a, b, c, d,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaracion_funcion ::= FUNCTION ID PAR1 PAR2 DOSPUNTOS tipos_dato_var FINCADENA VAR declaraciones_variables BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		          LinkedList<Instruccion> cuerpo = new LinkedList<>();
            cuerpo.addAll(d); // d es LinkedList<Instruccion>
            cuerpo.addAll(e);  
        RESULT = new DeclaracionFuncion(a, new LinkedList<HashMap>(), c, cuerpo, aleft, aright); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaracion_funcion ::= FUNCTION ID PAR1 PAR2 DOSPUNTOS tipos_dato_var FINCADENA BEGIN instrucciones END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionFuncion(a, new LinkedList<HashMap>(), c, d,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lista_param_f ::= lista_param_f FINCADENA lista_params_id DOSPUNTOS tipos_dato_var 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = a;
                    // Recorrer la lista de identificadores (b) y asignarles el tipo (c)
                    for (String id : b) {
                        var hm2 = new HashMap<String, Object>();
                        hm2.put("id", id);
                        hm2.put("tipo", c);
                        RESULT.add(hm2);
                    }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_param_f",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lista_param_f ::= lista_params_id DOSPUNTOS tipos_dato_var 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new LinkedList<HashMap>(); 
                    // Recorrer la lista de identificadores (a) y asignarles el tipo (b)
                    for (String id : a) {
                        var hm = new HashMap<String, Object>();
                        hm.put("id", id);
                        hm.put("tipo", b);
                        RESULT.add(hm);
                    }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_param_f",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lista_params_id ::= lista_params_id COMA tipo_id_f 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                                    RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_params_id",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // lista_params_id ::= tipo_id_f 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<String>(); 
                                                    RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_params_id",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo_id_f ::= VAR ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_id_f",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo_id_f ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_id_f",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // llamada_metodo ::= ID PAR1 parametros_llamada PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new LlamadoFuncion(a,b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metodo",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // llamada_metodo ::= ID PAR1 PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT= new LlamadoFuncion(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_metodo",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // llamada_funcion ::= ID PAR1 parametros_llamada PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new LlamadoFuncion(a,b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // llamada_funcion ::= ID PAR1 PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT= new LlamadoFuncion(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametros_llamada ::= parametros_llamada COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametros_llamada ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_llamada",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaraciones_tipos ::= declaraciones_tipos declaracion_tipo 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_tipos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declaraciones_tipos ::= declaracion_tipo 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_tipos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaracion_tipo ::= listado_id IGUAL tipos_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipos(a, b,aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declaracion_tipo ::= listado_id IGUAL expresion PRANGO expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipoSubRango(a, b,c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declaracion_tipo ::= listado_id IGUAL ARRAY CORCHETE1 expresion PARRAY expresion CORCHETE2 OF tipos_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipoArreglo(a,b,c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declaracion_tipo ::= listado_id IGUAL ARRAY CORCHETE1 expresion CORCHETE2 OF tipos_variable FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionTipoArreglo(a,new Nativo(0, new Tipo("integer",TipoDato.INTEGER), aleft, aright ),c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declaracion_tipo ::= declaracion_record 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declaracion_tipo ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaracion_tipo ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaracion_record ::= listado_id IGUAL RECORD lista_record END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionTipoRecord(a.getFirst(),b,  aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_record",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lista_record ::= lista_record ID DOSPUNTOS tipo_record 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", b);
                                            hm2.put("tipo", c);
                                            hm2.put ("valor", null);
                                            RESULT.add(hm2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_record",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lista_record ::= ID DOSPUNTOS tipo_record 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",a);
                                            hm.put("tipo", b);
                                            hm.put ("valor", null);
                                            RESULT.add(hm);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_record",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tipo_record ::= tipos_variable FINCADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_record",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tipo_record ::= expresion PRANGO expresion FINCADENA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Tipo("integer", TipoDato.INTEGER,  "subrange"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_record",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tipo_record ::= ARRAY CORCHETE1 expresion PARRAY expresion CORCHETE2 OF tipos_variable FINCADENA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Tipo(d.getNombre(), d.getTipo(), "array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_record",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipo_record ::= ARRAY CORCHETE1 expresion CORCHETE2 OF tipos_variable FINCADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Tipo (d.getNombre(), d.getTipo(), "array"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_record",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipo_record ::= ID FINCADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_record",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // declaracion_constantes ::= declaracion_constantes ID IGUAL expresion FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;  
                                    RESULT.add(new DeclaracionConstante(false, b,c, new Tipo(TipoDato.INTEGER),bleft, bright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // declaracion_constantes ::= ID IGUAL expresion FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(new DeclaracionConstante(false, b,c, new Tipo(TipoDato.INTEGER),bleft, bright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // declaracion_constantes ::= error FINCADENA 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // declaracion_constantes ::= error 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_constantes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // declaraciones_variables ::= declaraciones_variables declaracion_variables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_variables",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // declaraciones_variables ::= declaracion_variables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_variables",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declaracion_variables ::= listado_id DOSPUNTOS tipos_dato_var FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new DeclaracionVariable(true, a,null, b,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declaracion_variables ::= listado_id DOSPUNTOS expresion PRANGO expresion FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVarSubrango(a, b,c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // declaracion_variables ::= listado_id DOSPUNTOS ARRAY CORCHETE1 expresion PARRAY expresion CORCHETE2 OF tipos_dato_var FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVarArreglo(a,b,c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // declaracion_variables ::= listado_id DOSPUNTOS ARRAY CORCHETE1 expresion CORCHETE2 OF tipos_dato_var FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclaracionVarArreglo(a,new Nativo(0, new Tipo("integer",TipoDato.INTEGER), aleft, aright ),c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // declaracion_variables ::= declaracion_var_record 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // declaracion_variables ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // declaracion_variables ::= error 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // declaracion_var_record ::= listado_id IGUAL RECORD lista_record END FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<HashMap> b = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new DeclaracionVarRecord(a.getFirst(),b,  aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_var_record",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // listado_id ::= listado_id COMA ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                                    RESULT.add(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listado_id",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // listado_id ::= ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<String>(); 
                                                    RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listado_id",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipos_variable ::= INTEGER 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("integer",TipoDato.INTEGER, "integer");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tipos_variable ::= REAL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("real",TipoDato.REAL, "real");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tipos_variable ::= STRING 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("string",TipoDato.CADENA, "string");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tipos_variable ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("char",TipoDato.CARACTER, "char");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tipos_variable ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("boolean",TipoDato.BOOLEANO, "boolean");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tipos_variable ::= VOID 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo("void",TipoDato.VOID, "void");   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // tipos_dato_var ::= INTEGER 
            {
              String RESULT =null;
		   RESULT="integer";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tipos_dato_var ::= REAL 
            {
              String RESULT =null;
		   RESULT="real";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tipos_dato_var ::= STRING 
            {
              String RESULT =null;
		   RESULT="string";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tipos_dato_var ::= CHAR 
            {
              String RESULT =null;
		   RESULT="char";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // tipos_dato_var ::= BOOL 
            {
              String RESULT =null;
		   RESULT="boolean";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // tipos_dato_var ::= VOID 
            {
              String RESULT =null;
		   RESULT="void";   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // tipos_dato_var ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_dato_var",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // writeln ::= IMPRIMIR PAR1 expresion_conca PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Writeln(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeln",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // readln ::= READLN PAR1 listado_id PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Readln(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readln",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresion_conca ::= expresion_conca COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
                                                    RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_conca",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresion_conca ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); 
                                                    RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_conca",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // asignacion_variable ::= ID DOSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVariable(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // asignacion_record ::= ID PUNTO ID DOSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVarRecord(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_record",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // asignacion_array ::= ID CORCHETE1 expresion CORCHETE2 DOSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVarArreglo(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_array",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sentencia_if ::= IF expresion THEN instruccion_fin 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new SentenciaIf(a, new LinkedList<>(Collections.singletonList(b)), aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentencia_if ::= IF expresion THEN BEGIN instrucciones END 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaIf(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentencia_if ::= IF expresion THEN BEGIN instrucciones END ELSE instruccion_else_fin 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaIfElse(a, b,new LinkedList<>(Collections.singletonList(c)) , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sentencia_if ::= IF expresion THEN instruccion_fin ELSE instruccion_else_fin 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new SentenciaIfElse(a, new LinkedList<>(Collections.singletonList(b)), new LinkedList<>(Collections.singletonList(c)), aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sentencia_if ::= IF expresion THEN instruccion_fin ELSE BEGIN instrucciones END 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaIfElse(a, new LinkedList<>(Collections.singletonList(b)),c , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentencia_if ::= IF expresion THEN BEGIN instrucciones END ELSE BEGIN instrucciones END 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaIfElse(a, b,c , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentencia_if ::= IF expresion THEN instruccion_fin ELSE sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaIfElseIf(a, new LinkedList<>(Collections.singletonList(b)),c , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // sentencia_if ::= IF expresion THEN BEGIN instrucciones END ELSE sentencia_if 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaIfElseIf(a, b,c , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_if",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // sentencia_case ::= CASE expresion OF casos_case ELSE BEGIN instrucciones END FINCADENA END 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<CasoCase> b = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        RESULT = new SentenciaCase(a, b, c, aleft, aright);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sentencia_case ::= CASE expresion OF casos_case ELSE instruccion END 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<CasoCase> b = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = new SentenciaCase(a, b, new LinkedList<>(Collections.singletonList(c)), aleft, aright);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_case",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // casos_case ::= casos_case caso_case 
            {
              LinkedList<CasoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CasoCase> a = (LinkedList<CasoCase>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoCase b = (CasoCase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_case",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // casos_case ::= caso_case 
            {
              LinkedList<CasoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CasoCase a = (CasoCase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos_case",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // caso_case ::= expresiones_case DOSPUNTOS BEGIN instrucciones END FINCADENA 
            {
              CasoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new CasoCase(a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_case",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // caso_case ::= expresiones_case DOSPUNTOS instruccion 
            {
              CasoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CasoCase(a, new LinkedList<>(Collections.singletonList(b))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso_case",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expresiones_case ::= expresiones_case COMA expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a; RESULT.add(b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_case",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expresiones_case ::= expresion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_case",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // sentencia_while ::= WHILE expresion DO BEGIN instrucciones END 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new SentenciaWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // sentencia_while ::= WHILE expresion DO instruccion_fin 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaWhile(a,new LinkedList<>(Collections.singletonList(b)), aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_while",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // sentencia_for ::= FOR ID DOSPUNTOS IGUAL expresion TO expresion DO instruccion_fin 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SentenciaFor(new AsignacionVariable(a, b, aleft, aright), c, new AccesoVariable(a, aleft, aright) , new LinkedList<>(Collections.singletonList(d)),new AsignacionVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo("integer",TipoDato.INTEGER), aleft, aright) , aleft, aright), aleft, aright),aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // sentencia_for ::= FOR ID DOSPUNTOS IGUAL expresion TO expresion DO BEGIN instrucciones END 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  		   RESULT = new SentenciaFor(new AsignacionVariable(a, b, aleft, aright), c, new AccesoVariable(a, aleft, aright) , d,new AsignacionVariable(a, new OperacionSuma(new AccesoVariable(a, aleft, aright), new Nativo(1, new Tipo("integer",TipoDato.INTEGER), aleft, aright) , aleft, aright), aleft, aright),aleft, aright);   
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_for",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // sentencia_repeat ::= REPEAT instrucciones UNTIL expresion 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new SentenciaRepeat(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_repeat",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // transferencia_break ::= BREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = new SentenciaBreak(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_break",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // transferencia_continue ::= CONTINUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		    RESULT = new SentenciaContinue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transferencia_continue",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expresion ::= expresionAritmetica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expresion ::= expresionRelacional 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expresion ::= expresionLogica 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // expresion ::= llamada_funcion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expresion ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Integer.parseInt(a), new Tipo("integer",TipoDato.INTEGER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // expresion ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(new Double(a), new Tipo("real",TipoDato.REAL), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // expresion ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo("string",TipoDato.CADENA), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // expresion ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(a, new Tipo("char",TipoDato.CARACTER), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // expresion ::= BOOLEAN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo("boolean",TipoDato.BOOLEANO), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // expresion ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new AccesoVariable(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // expresion ::= ID PUNTO ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVarRecord(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // expresion ::= ID CORCHETE1 expresion CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVarArreglo(a, b, aleft, aright );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expresionAritmetica ::= MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionNegacionU(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expresionAritmetica ::= expresion MAS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionSuma(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expresionAritmetica ::= expresion MENOS expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionResta(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expresionAritmetica ::= expresion MULT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperacionMultiplicacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expresionAritmetica ::= expresion DIV expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDivision (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expresionAritmetica ::= expresion DIVE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionDiv(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expresionAritmetica ::= expresion MOD expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new OperacionModulo (a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expresionAritmetica ::= PAR1 expresion PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAritmetica",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expresionRelacional ::= expresion IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Igualacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expresionRelacional ::= expresion DIFERENTE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new Diferenciacion(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expresionRelacional ::= expresion MENOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expresionRelacional ::= expresion MENORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MenorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expresionRelacional ::= expresion MAYOR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expresionRelacional ::= expresion MAYORIGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new MayorIgualQue(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionRelacional",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expresionLogica ::= NOT expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorNot(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expresionLogica ::= expresion AND expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAnd(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expresionLogica ::= expresion OR expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOr(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expresionLogica ::= expresion AND THEN expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorAndThen(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // expresionLogica ::= expresion OR ELSE expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = new OperadorOrThen(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionLogica",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
